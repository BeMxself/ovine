define('39ea9ea',
function(require, exports, module) {

    !
    function(e, t) {
        for (var a in t) e[a] = t[a]
    } (exports,
    function(e) {
        var t = {};
        function a(l) {
            if (t[l]) return t[l].exports;
            var i = t[l] = {
                i: l,
                l: !1,
                exports: {}
            };
            return e[l].call(i.exports, i, i.exports, a),
            i.l = !0,
            i.exports
        }
        return a.m = e,
        a.c = t,
        a.d = function(e, t, l) {
            a.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: l
            })
        },
        a.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }),
            Object.defineProperty(e, "__esModule", {
                value: !0
            })
        },
        a.t = function(e, t) {
            if (1 & t && (e = a(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var l = Object.create(null);
            if (a.r(l), Object.defineProperty(l, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for (var i in e) a.d(l, i,
            function(t) {
                return e[t]
            }.bind(null, i));
            return l
        },
        a.n = function(e) {
            var t = e && e.__esModule ?
            function() {
                return e.
            default
            }:
            function() {
                return e
            };
            return a.d(t, "a", t),
            t
        },
        a.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t)
        },
        a.p = "",
        a(a.s = 36)
    } ([function(e, t) {
        e.exports = require("849c8c1")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.resolveEditor = t.Editor = t.getEditorByName = t.getEditors = t.editors = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(5),
        o = l.__importDefault(a(41)),
        r = a(14),
        s = a(4),
        p = l.__importDefault(a(13)),
        c = n.utils.guid,
        d = n.utils.__uri,
        m = a(15),
        u = l.__importDefault(a(42));
        t.editors = [],
        t.getEditors = function() {
            return t.editors.concat()
        },
        t.getEditorByName = u.
    default((function(e) {
            return r(t.editors, (function(t) {
                return t.rendererName === e
            }))
        })),
        t.Editor = function(e, a, o) {
            var r = n.getRendererByName(e);
            return function(n) {
                if (!r) throw new Error('The Renderer with name "' + e + '" not found!');
                var s = r.component;
                if (o) {
                    for (var p = s; p.ComposedComponent;) p = p.ComposedComponent;
                    var c = p.prototype;
                    Object.keys(o).forEach((function(e) {
                        "render" === e && console.warn("ä¸è¦ hack renderï¼Œé‡æ–°æ¸²æŸ“å¯èƒ½ä¸ä¼šæ‰§è¡Œåˆ°ã€‚");
                        var t = c[e],
                        a = o[e];
                        "function" == typeof a && (c[e] = function() {
                            var e = this.super;
                            this.super = t.bind(this);
                            var l = a.apply(this, arguments);
                            return this.super = e,
                            l
                        })
                    }))
                }
                var m = function(t) {
                    function i() {
                        var l = null !== t && t.apply(this, arguments) || this;
                        return l.Renderer = s,
                        l.$schema = null == a ? void 0 : a.$schema,
                        l.rendererName = e,
                        l
                    }
                    return l.__extends(i, t),
                    i.displayName = n.displayName,
                    i.propsList = (s && s.propsList || []).concat(["$$contentMode", "$$replaceable", "$$removable", "$$codeEditable", "$$movable", "$$acceptChild", "$$childenOrder"]),
                    i
                } (n),
                u = i.
            default.forwardRef((function(e, t) {
                    return i.
                default.createElement(m, l.__assign({},
                    e, {
                        key: e.$$id,
                        ref: t
                    }))
                }));
                return u.propsList = m.propsList,
                t.editors.push(l.__assign(l.__assign({},
                a), {
                    image: a && a.image || d("./editors/images/nope.jpg"),
                    renderer: s,
                    rendererName: e,
                    component: u
                })),
                m
            }
        };
        var h = {};
        function b(e) {
            if (e && !e.$$id && (e.$$id = c()), h[e.$$id]) return h[e.$$id];
            var a = r(t.editors, (function(t) {
                return t.renderer === e
            }));
            return a && (h[e.$$id] = a),
            a
        }
        t.resolveEditor = b;
        var f = function(e) {
            function t(t) {
                var a, i = e.call(this, t) || this;
                i.id = c(),
                i.dragEnterCount = 0,
                i.env = l.__assign({
                    updateLocation: function(e, t) {},
                    jumpTo: function(e) {},
                    fetcher: function(e) {
                        var t = e.url,
                        a = e.method,
                        l = e.data,
                        i = e.config;
                        return (i = i || {}).withCredentials = !0,
                        i.cancelExecutor && (i.cancelToken = new o.
                    default.CancelToken(i.cancelExecutor)),
                        "post" !== a && "put" !== a && "patch" !== a ? (l && (i.params = l), o.
                    default[a](t, i)) : (l && l instanceof FormData || !l || "string" == typeof l || l instanceof Blob || l instanceof ArrayBuffer || (l = JSON.stringify(l), i.headers = i.headers || {},
                        i.headers["Content-Type"] = "application/json"), o.
                    default[a](t, l, i))
                    },
                    isCancel: function(e) {
                        return o.
                    default.isCancel(e)
                    },
                    notify: function(e, t) {
                        i.props.editable ? console.warn("[Notify]", e, t) : n.toast[e] ? n.toast[e](t, "error" === e ? "ç³»ç»Ÿé”™è¯¯": "ç³»ç»Ÿæ¶ˆæ¯") : console.warn("[Notify]", e, t)
                    },
                    alert: n.alert,
                    confirm: n.confirm,
                    theme: i.props.theme,
                    session: "preview-" + i.id,
                    rendererResolver: i.rendererResolver.bind(i)
                },
                t.amis_env),
                i.env.fetcher = (a = i.env.fetcher,
                function() {
                    var e = function() {
                        return {
                            items: [{
                                id: 1,
                                engine: "mocked",
                                browser: "mocked",
                                platform: "mocked",
                                version: "mocked",
                                grade: "mocked"
                            }]
                        }
                    };
                    return a.apply(this, arguments).then((function(t) {
                        return ! d.props.editable || t.data && !t.data.status || (t.data = {
                            status: 0,
                            msg: "",
                            data: e()
                        }),
                        t
                    })).
                    catch((function(t) {
                        if (d.props.editable) return {
                            status: 0,
                            msg: "",
                            data: e()
                        };
                        throw t
                    }))
                }),
                i.widgetsLayerRef = i.widgetsLayerRef.bind(i);
                var r = t.schema,
                p = t.schemaFilter;
                p && (r = p(r) || r),
                i.state = {
                    ready: !1,
                    schema: t.editable ? r: s.JSONPipeOut(r)
                },
                i.handleClick = i.handleClick.bind(i);
                var d = i;
                return i
            }
            return l.__extends(t, e),
            t.prototype.componentDidMount = function() {
                var e = m.findDOMNode(this);
                e.addEventListener("click", this.handleClick),
                e.addEventListener("mouseover", this.handeMouseOver),
                this.unSensor = n.resizeSensor(e, this.props.onResize)
            },
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                if (t.schema !== e.schema || t.editable !== e.editable) {
                    var a = e.schema,
                    l = e.schemaFilter;
                    l && (a = l(a) || a),
                    this.setState({
                        schema: e.editable ? a: s.JSONPipeOut(a)
                    })
                }
            },
            t.prototype.componentWillUnmount = function() {
                var e = this,
                t = m.findDOMNode(this);
                this.unSensor && this.unSensor(),
                t.removeEventListener("click", this.handleClick),
                t.removeEventListener("mouseover", this.handeMouseOver),
                setTimeout((function() {
                    return n.clearStoresCache(["preview-" + e.id])
                }), 500)
            },
            t.prototype.widgetsLayerRef = function(e) {
                var t = this.props.widgetsLayerRef;
                t && t(e),
                this.widgetsLayer = e,
                this.setState({
                    ready: !!e
                })
            },
            t.prototype.handleClick = function(e) {
                var t = this.props.onClick;
                t && t(e)
            },
            t.prototype.handeMouseOver = function(e) {
                e.preventDefault(),
                e.stopPropagation()
            },
            t.prototype.rendererResolver = function(e, t, a) {
                var i = this.props,
                o = i.editable,
                r = i.isEditorEnabled,
                s = n.resolveRenderer(e, t, a);
                if (!1 !== o && !1 !== a.$$editable && s && t.$$id) {
                    var p = b(s.component);
                    p && (!r || r(e, p, s, t)) && (s = l.__assign(l.__assign({},
                    s), {
                        component: p.component
                    }))
                }
                return s
            },
            t.prototype.handleDragEnter = function(e) {
                if (this.dragEnterCount++, 1 === this.dragEnterCount) {
                    var t = this.props.onDragEnter;
                    t && t(e)
                }
            },
            t.prototype.handleDragLeave = function(e) {
                if (this.dragEnterCount--, 0 === this.dragEnterCount) {
                    var t = this.props.onDragLeave;
                    t && t(e)
                }
            },
            t.prototype.handleDrop = function(e) {
                this.dragEnterCount = 0;
                var t = this.props.onDrop;
                t && t(e)
            },
            t.prototype.reset = function() {
                this.dragEnterCount = 0
            },
            t.prototype.render = function() {
                var e = this.props,
                t = (e.schema, e.schemaFilter, e.editable),
                a = e.pathPrefix,
                o = e.className,
                r = (e.history, e.onMouseLeave),
                s = e.onMouseMove,
                c = (e.onClick, e.onDragOver),
                d = (e.onDragEnter, e.onDragLeave, e.onDrop, l.__rest(e, ["schema", "schemaFilter", "editable", "pathPrefix", "className", "history", "onMouseLeave", "onMouseMove", "onClick", "onDragOver", "onDragEnter", "onDragLeave", "onDrop"]));
                return i.
            default.createElement("div", {
                    className: p.
                default("ae-Preview", o, t ? "is-edting": ""),
                    onMouseMove: s,
                    onMouseLeave: r,
                    onDragOver: c,
                    onDragEnter: this.handleDragEnter,
                    onDragLeave: this.handleDragLeave,
                    onDrop: this.handleDrop
                },
                this.state.ready ? n.render(this.state.schema, l.__assign(l.__assign({},
                d), {
                    key: t ? "edit-mode": "preview-mode"
                }), this.env, a) : null, i.
            default.createElement("div", {
                    className: "ae-Preview-widgets",
                    ref: this.widgetsLayerRef
                }))
            },
            t.defaultProps = {
                onResize: function() {}
            },
            l.__decorate([s.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleDragEnter", null),
            l.__decorate([s.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleDragLeave", null),
            l.__decorate([s.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleDrop", null),
            t
        } (i.
    default.Component);
        t.
    default = f
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.defaultValue = t.valuePipeOut = t.getSchemaTplByName = void 0;
        var l, i, n = a(0),
        o = a(4),
        r = a(14),
        s = a(5),
        p = {
            formItemName: {
                label: "å­—æ®µå",
                name: "name",
                type: "text"
            },
            formItemMode: {
                label: "å±•ç¤ºæ¨¡å¼",
                name: "mode",
                type: "button-group",
                size: "sm",
                option: "ç»§æ‰¿",
                pipeIn: c(""),
                options: [{
                    label: "ç»§æ‰¿",
                    value: ""
                },
                {
                    label: "æ­£å¸¸",
                    value: "normal"
                },
                {
                    label: "å†…è”",
                    value: "inline"
                },
                {
                    label: "æ°´å¹³",
                    value: "horizontal"
                }]
            },
            fontItemInline: {
                label: "è¡¨å•é¡¹å†…è”",
                name: "inline",
                type: "switch",
                visibleOn: 'data.$$formMode != "inline" && data.mode != "inline"',
                mode: "inline",
                className: "w-full",
                pipeIn: c(!1)
            },
            formItemSize: {
                name: "size",
                label: "æŽ§ä»¶å°ºå¯¸",
                type: "button-group",
                size: "sm",
                pipeIn: c("full"),
                options: [{
                    label: "æžå°",
                    value: "xs"
                },
                {
                    label: "å°",
                    value: "sm"
                },
                {
                    label: "ä¸­",
                    value: "md"
                },
                {
                    label: "å¤§",
                    value: "lg"
                },
                {
                    label: "å æ»¡",
                    value: "full",
                    hiddenOn: "this.inline === true"
                },
                {
                    label: "é»˜è®¤",
                    value: "full",
                    hiddenOn: "this.inline !== true"
                }]
            },
            minLength: {
                name: "minLength",
                type: "number",
                label: "é™åˆ¶æœ€å°æ•°é‡"
            },
            maxLength: {
                name: "maxLength",
                type: "number",
                label: "é™åˆ¶æœ€å¤§æ•°é‡"
            },
            label: [{
                label: "Label",
                name: "label",
                type: "text",
                hiddenOn: "data.label === false"
            },
            {
                name: "label",
                label: "éšè— Label",
                type: "switch",
                mode: "inline",
                className: "w-full",
                pipeIn: function(e) {
                    return ! 1 === e
                },
                pipeOut: function(e) {
                    return ! 0 !== e && ""
                },
                visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && !data.label',
                description: "å½“ form ä¸ºæ°´å¹³å¸ƒå±€æ—¶æœ‰ç”¨ï¼Œå¯ä»¥ç”¨æ¥åŽ»æŽ‰é—´éš”ã€‚"
            }],
            placeholder: {
                label: "å ä½ç¬¦",
                name: "placeholder",
                type: "text",
                placeholder: "å ä½ç¬¦"
            },
            tabs: function(e) {
                return {
                    type: "tabs",
                    tabsMode: "line",
                    className: "m-t-n-xs",
                    contentClassName: "no-border p-l-none p-r-none",
                    tabs: e
                }
            },
            clearable: {
                type: "switch",
                name: "clearable",
                mode: "inline",
                className: "w-full",
                label: "å¯ç”¨æ¸…é™¤æŒ‰é’®"
            },
            hint: {
                label: "è¾“å…¥æç¤º",
                type: "text",
                name: "hint",
                description: "å½“è¾“å…¥æ¡†èŽ·å¾—ç„¦ç‚¹çš„æ—¶å€™æ˜¾ç¤ºï¼Œç”¨æ¥æç¤ºç”¨æˆ·è¾“å…¥å†…å®¹ã€‚"
            },
            remark: [{
                label: "å¯ç”¨ä¿¡æ¯æç¤º",
                type: "switch",
                name: "remark",
                mode: "inline",
                className: "w-full",
                description: "åœ¨è¾“å…¥æŽ§ä»¶æ—è¾¹å±•ç¤ºä¸€ä¸ª iconï¼Œå½“é¼ æ ‡æ”¾ä¸ŠåŽ»æ—¶å±•ç¤ºè¯¦ç»†æè¿°ï¼Œæ³¨æ„å¯åŠ¨åŽè¯·å°†æŽ§ä»¶å®½åº¦è®¾ç½®æˆéžå æ»¡ï¼Œå¦åˆ™ icon æ˜¾ç¤ºä½ç½®ä¼šæ¢è¡Œï¼",
                pipeIn: function(e) {
                    return !! e
                },
                pipeOut: function(e) {
                    return e ? {
                        icon: "fa fa-question-circle",
                        trigger: ["hover", "focus"],
                        className: "Remark--warning"
                    }: null
                }
            },
            {
                type: "combo",
                name: "remark",
                className: "no-padder",
                visibleOn: "this.remark",
                multiLine: !0,
                controls: [{
                    name: "title",
                    type: "text",
                    label: "æ ‡é¢˜"
                },
                {
                    name: "content",
                    type: "textarea",
                    label: "å†…å®¹"
                },
                {
                    name: "placement",
                    type: "button-group",
                    size: "xs",
                    label: "å¼¹å‡ºä½ç½®",
                    options: [{
                        label: "å·¦",
                        value: "left"
                    },
                    {
                        label: "ä¸Š",
                        value: "top"
                    },
                    {
                        label: "å³",
                        value: "right"
                    },
                    {
                        label: "åº•",
                        value: "bottom"
                    }]
                },
                {
                    name: "icon",
                    label: "å›¾æ ‡",
                    type: "icon-picker"
                },
                {
                    name: "className",
                    label: "CSS ç±»å",
                    type: "text",
                    labelRemark: {
                        trigger: "click",
                        className: "m-l-xs",
                        rootClose: !0,
                        content: 'æœ‰å“ªäº›è¾…åŠ©ç±» CSS ç±»åï¼Ÿè¯·å‰å¾€ <a href="http://amis.baidu.com/v2/docs/style" target="_blank">æ ·å¼è¯´æ˜Ž</a>ï¼Œé™¤æ­¤ä¹‹å¤–ä½ å¯ä»¥æ·»åŠ è‡ªå®šä¹‰ç±»åï¼Œç„¶åŽåœ¨ç³»ç»Ÿé…ç½®ä¸­æ·»åŠ è‡ªå®šä¹‰æ ·å¼ã€‚',
                        placement: "right"
                    }
                },
                {
                    name: "trigger",
                    type: "select",
                    label: "è§¦å‘æ–¹å¼",
                    multiple: !0,
                    pipeIn: function(e) {
                        return Array.isArray(e) ? e.join(",") : []
                    },
                    pipeOut: function(e) {
                        return e && e.length ? e.split(",") : void 0
                    },
                    options: [{
                        label: "é¼ æ ‡æ‚¬åœ",
                        value: "hover"
                    },
                    {
                        label: "èšç„¦",
                        value: "focus"
                    },
                    {
                        label: "ç‚¹å‡»",
                        value: "click"
                    }]
                },
                {
                    name: "rootClose",
                    visibleOn: '~this.trigger.indexOf("click")',
                    label: "ç‚¹å‡»ç©ºç™½å…³é—­",
                    type: "switch"
                }]
            }],
            labelRemark: [{
                label: "å¯ç”¨ Label ä¿¡æ¯æç¤º",
                type: "switch",
                name: "labelRemark",
                mode: "inline",
                className: "w-full",
                description: "åœ¨ Label æ—è¾¹å±•ç¤ºä¸€ä¸ª iconï¼Œå½“é¼ æ ‡æ”¾ä¸ŠåŽ»æ—¶å±•ç¤ºè¯¦ç»†æè¿°",
                visibleOn: "this.label",
                pipeIn: function(e) {
                    return !! e
                },
                pipeOut: function(e) {
                    return e ? {
                        icon: "fa fa-question-circle",
                        trigger: ["hover", "focus"],
                        className: "Remark--warning"
                    }: null
                }
            },
            {
                type: "combo",
                name: "labelRemark",
                className: "no-padder",
                visibleOn: "this.labelRemark",
                multiLine: !0,
                controls: [{
                    name: "title",
                    type: "text",
                    label: "æ ‡é¢˜"
                },
                {
                    name: "content",
                    type: "textarea",
                    label: "å†…å®¹"
                },
                {
                    name: "placement",
                    type: "button-group",
                    size: "xs",
                    label: "å¼¹å‡ºä½ç½®",
                    options: [{
                        label: "å·¦",
                        value: "left"
                    },
                    {
                        label: "ä¸Š",
                        value: "top"
                    },
                    {
                        label: "å³",
                        value: "right"
                    },
                    {
                        label: "åº•",
                        value: "bottom"
                    }]
                },
                {
                    name: "icon",
                    label: "å›¾æ ‡",
                    type: "icon-picker"
                },
                {
                    name: "className",
                    label: "CSS ç±»å",
                    type: "text"
                },
                {
                    name: "trigger",
                    type: "select",
                    label: "è§¦å‘æ–¹å¼",
                    multiple: !0,
                    pipeIn: function(e) {
                        return Array.isArray(e) ? e.join(",") : []
                    },
                    pipeOut: function(e) {
                        return e && e.length ? e.split(",") : void 0
                    },
                    options: [{
                        label: "é¼ æ ‡æ‚¬åœ",
                        value: "hover"
                    },
                    {
                        label: "èšç„¦",
                        value: "focus"
                    },
                    {
                        label: "ç‚¹å‡»",
                        value: "click"
                    }]
                },
                {
                    name: "rootClose",
                    visibleOn: '~this.trigger.indexOf("click")',
                    label: "ç‚¹å‡»ç©ºç™½å…³é—­",
                    type: "switch"
                }]
            }],
            expression: {
                type: "text",
                description: "æ”¯æŒ JS è¡¨è¾¾å¼ï¼Œå¦‚ï¼š`this.xxx == 1`"
            },
            icon: {
                label: "å›¾æ ‡",
                type: "icon-picker",
                name: "icon",
                placeholder: "ç‚¹å‡»é€‰æ‹©å›¾æ ‡",
                clearable: !0,
                description: 'è¯·ä½¿ç”¨ <a href="https://fontawesome.com" target="_blank">font-awesome</a> å›¾æ ‡ï¼Œå¦‚ï¼š<code>fa fa-cloud</code>'
            },
            size: {
                label: "æŽ§ä»¶å°ºå¯¸",
                type: "button-group",
                name: "size",
                size: "sm",
                clearable: !0,
                options: [{
                    label: "æžå°",
                    value: "xs"
                },
                {
                    label: "å°",
                    value: "sm"
                },
                {
                    label: "ä¸­",
                    value: "md"
                },
                {
                    label: "å¤§",
                    value: "lg"
                }]
            },
            name: {
                label: "åå­—",
                name: "name",
                type: "text",
                description: "éœ€è¦è”åŠ¨æ—¶æ‰éœ€è¦ï¼Œå…¶ä»–ç»„ä»¶å¯ä»¥é€šè¿‡è¿™ä¸ªåå­—è·Ÿå½“å‰ç»„ä»¶è”åŠ¨",
                placeholder: "è¯·è¾“å…¥å­—æ¯æˆ–è€…æ•°å­—"
            },
            reload: {
                label: "åˆ·æ–°ç›®æ ‡ç»„ä»¶",
                name: "reload",
                type: "text",
                description: "å¯ä»¥æŒ‡å®šæ“ä½œå®ŒæˆåŽåˆ·æ–°ç›®æ ‡ç»„ä»¶ï¼Œè¯·å¡«å†™ç›®æ ‡ç»„ä»¶çš„ <code>name</code> å±žæ€§ï¼Œå¤šä¸ªç»„ä»¶è¯·ç”¨<code>,</code>éš”å¼€ï¼Œå¦‚æžœç›®æ ‡ç»„ä»¶ä¸ºè¡¨å•é¡¹ï¼Œè¯·å…ˆå¡«å†™è¡¨å•çš„åå­—ï¼Œå†ç”¨<code>.</code>è¿žæŽ¥è¡¨å•é¡¹çš„åå­—å¦‚ï¼š<code>xxForm.xxControl</code>ã€‚å¦å¤–å¦‚æžœåˆ·æ–°ç›®æ ‡å¯¹è±¡è®¾ç½®ä¸º <code>window</code>ï¼Œåˆ™ä¼šåˆ·æ–°æ•´ä¸ªé¡µé¢ã€‚",
                labelRemark: {
                    trigger: "click",
                    className: "m-l-xs",
                    rootClose: !0,
                    content: "è®¾ç½®åå­—åŽï¼Œå½“å‰ç»„ä»¶æ“ä½œå®Œæˆä¼šè§¦å‘ç›®æ ‡ç»„ä»¶ï¼ˆæ ¹æ®è®¾ç½®çš„åå­—ï¼‰çš„åˆ·æ–°ã€‚",
                    placement: "right"
                }
            },
            className: {
                label: "CSS ç±»å",
                type: "ae-classname",
                name: "className",
                labelRemark: {
                    trigger: "click",
                    className: "m-l-xs",
                    rootClose: !0,
                    content: 'æœ‰å“ªäº›è¾…åŠ©ç±» CSS ç±»åï¼Ÿè¯·å‰å¾€ <a href="/docs/style" target="_blank">æ ·å¼è¯´æ˜Ž</a>ï¼Œé™¤æ­¤ä¹‹å¤–ä½ å¯ä»¥æ·»åŠ è‡ªå®šä¹‰ç±»åï¼Œç„¶åŽåœ¨ç³»ç»Ÿé…ç½®ä¸­æ·»åŠ è‡ªå®šä¹‰æ ·å¼ã€‚',
                    placement: "right"
                }
            },
            api: function(e) {
                void 0 === e && (e = {});
                var t = e.name,
                a = e.label,
                l = e.value,
                i = e.description,
                r = n.__rest(e, ["name", "label", "value", "description"]);
                return n.__assign({
                    type: "fieldSet",
                    className: "",
                    collapsable: !1,
                    controls: [{
                        type: "checkbox",
                        label: a || "API",
                        option: "é«˜çº§é…ç½®",
                        name: t || "api",
                        mode: "inline",
                        className: "w-full m-b-sm",
                        inputClassName: "pull-right text-sm m-t-sm p-t-none",
                        pipeIn: function(e) {
                            return e && "string" != typeof e
                        },
                        pipeOut: function(e, t) {
                            var a = s.buildApi(t);
                            return e ? {
                                method: a.method,
                                url: a.url
                            }: a.url ? (a.method ? a.method + ":": "") + a.url: ""
                        }
                    },
                    {
                        name: t || "api",
                        type: "text",
                        value: l,
                        placeholder: "http://",
                        description: i,
                        visibleOn: "!this." + (t || "api") + " || typeof this." + (t || "api") + " === 'string'",
                        className: "m-b-none"
                    },
                    {
                        type: "combo",
                        name: t || "api",
                        description: i,
                        syncDefaultValue: !1,
                        multiLine: !0,
                        visibleOn: "this." + (t || "api") + " && typeof this." + (t || "api") + " !== 'string'",
                        className: "m-b-none",
                        messages: {
                            validateFailed: "æŽ¥å£é…ç½®ä¸­å­˜åœ¨é”™è¯¯ï¼Œè¯·ä»”ç»†æ£€æŸ¥ï¼"
                        },
                        pipeIn: function(e) {
                            if ("string" == typeof e) {
                                var t = e,
                                a = "get",
                                l = /^(raw:|external:)?(get|post|put|patch|delete):(.*)$/.exec(t);
                                return l && (t = l[1] + l[3], a = l[2]),
                                {
                                    method: a,
                                    url: t
                                }
                            }
                            return e
                        },
                        controls: [{
                            label: "å‘é€æ–¹å¼",
                            name: "method",
                            value: "get",
                            type: "button-group",
                            size: "xs",
                            options: ["get", "post", "put", "patch", "delete"]
                        },
                        {
                            label: "æŽ¥å£åœ°å€",
                            type: "text",
                            name: "url",
                            placeholder: "http://",
                            required: !0
                        },
                        {
                            type: "switch",
                            label: "æ•°æ®æ˜ å°„",
                            name: "data",
                            mode: "inline",
                            className: "w-full m-b-xs",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? {
                                    "&": "$$"
                                }: null
                            }
                        },
                        {
                            type: "tpl",
                            visibleOn: "!this.data",
                            tpl: '<p class="text-sm text-muted">å½“æ²¡å¼€å¯æ•°æ®æ˜ å°„æ—¶ï¼Œå‘é€ API çš„æ—¶å€™ä¼šå‘é€å°½å¯èƒ½å¤šçš„æ•°æ®ï¼Œå¦‚æžœä½ æƒ³è‡ªå·±æŽ§åˆ¶å‘é€çš„æ•°æ®ï¼Œæˆ–è€…éœ€è¦é¢å¤–çš„æ•°æ®å¤„ç†ï¼Œè¯·å¼€å¯æ­¤é€‰é¡¹</p>'
                        },
                        {
                            type: "combo",
                            syncDefaultValue: !1,
                            name: "data",
                            visibleOn: "this.data",
                            descriptionClassName: "help-block text-xs m-b-none",
                            description: '<p>å½“æ²¡å¼€å¯æ•°æ®æ˜ å°„æ—¶ï¼Œå‘é€æ•°æ®è‡ªåŠ¨åˆ‡æˆç™½åå•æ¨¡å¼ï¼Œé…ç½®å•¥å‘é€å•¥ï¼Œè¯·ç»‘å®šæ•°æ®ã€‚å¦‚ï¼š<code>{"a": "\\${a}", "b": 2}</code></p><p>å¦‚æžœå¸Œæœ›åœ¨é»˜è®¤çš„åŸºç¡€ä¸Šå®šåˆ¶ï¼Œè¯·å…ˆæ·»åŠ ä¸€ä¸ª Key ä¸º `&` Value ä¸º `\\$$` ä½œä¸ºç¬¬ä¸€è¡Œã€‚</p><div>å½“å€¼ä¸º <code>__undefined</code>æ—¶ï¼Œè¡¨ç¤ºåˆ é™¤å¯¹åº”çš„å­—æ®µï¼Œå¯ä»¥ç»“åˆ<code>{"&": "\\$$"}</code>æ¥è¾¾åˆ°é»‘åå•æ•ˆæžœã€‚</div>',
                            multiple: !0,
                            pipeIn: function(e) {
                                if (!o.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    t.push({
                                        key: a || "",
                                        value: "string" == typeof e[a] ? e[a] : JSON.stringify(e[a])
                                    })
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var t = {};
                                return e.forEach((function(e) {
                                    var a = e.key || "",
                                    l = e.value;
                                    try {
                                        l = JSON.parse(l)
                                    } catch(e) {}
                                    t[a] = l
                                })),
                                t
                            },
                            controls: [{
                                placeholder: "Key",
                                type: "text",
                                unique: !0,
                                name: "key",
                                required: !0
                            },
                            {
                                placeholder: "Value",
                                type: "text",
                                name: "value"
                            }]
                        },
                        {
                            label: "å‘é€æ¡ä»¶",
                            type: "text",
                            name: "sendOn",
                            placeholder: 'å¦‚ï¼šthis.type == "123"',
                            description: "ç”¨è¡¨è¾¾å¼æ¥è®¾ç½®è¯¥è¯·æ±‚çš„å‘é€æ¡ä»¶"
                        },
                        {
                            type: "switch",
                            label: "æ˜¯å¦è®¾ç½®ç¼“å­˜",
                            name: "cache",
                            mode: "inline",
                            className: "w-full m-b-xs",
                            description: "è®¾ç½®è¯¥è¯·æ±‚ç¼“å­˜çš„æœ‰æ•ˆæ—¶é—´",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? 3e3: void 0
                            }
                        },
                        {
                            type: "number",
                            name: "cache",
                            mode: "inline",
                            min: 0,
                            step: 500,
                            visibleOn: "this.cache",
                            pipeIn: function(e) {
                                return "number" == typeof e ? e: 0
                            }
                        },
                        {
                            label: "æ–‡ä»¶ä¸‹è½½",
                            type: "switch",
                            name: "responseType",
                            mode: "inline",
                            className: "block",
                            pipeIn: function(e) {
                                return "blob" === e
                            },
                            pipeOut: function(e) {
                                return e ? "blob": void 0
                            },
                            description: "å½“æŽ¥å£ä¸ºäºŒè¿›åˆ¶æ–‡ä»¶ä¸‹è½½æ—¶è¯·å‹¾é€‰ï¼Œå¦åˆ™ä¼šæ–‡ä»¶ä¹±ç ã€‚"
                        },
                        {
                            label: "æ•°æ®æ ¼å¼",
                            type: "button-group",
                            name: "dataType",
                            description: 'å‘é€ä½“æ ¼å¼ä¸ºï¼š<%= data.dataType === "json" ? "application/json" : data.dataType === "form-data" ? "multipart/form-data" : data.dataType === "form" ? "application/x-www-form-urlencoded" : "" %>ï¼Œå½“å‘é€å†…å®¹ä¸­å­˜åœ¨æ–‡ä»¶æ—¶ä¼šè‡ªåŠ¨ä½¿ç”¨ form-data æ ¼å¼ã€‚',
                            size: "sm",
                            className: "block",
                            mode: "inline",
                            options: [{
                                label: "JSON",
                                value: "json"
                            },
                            {
                                label: "FormData",
                                value: "form-data"
                            },
                            {
                                label: "Form",
                                value: "form"
                            }]
                        },
                        {
                            type: "switch",
                            label: "æ•°æ®æ›¿æ¢",
                            name: "replaceData",
                            mode: "inline",
                            className: "w-full",
                            description: "é»˜è®¤æ•°æ®éƒ½æ˜¯è¿½åŠ æ–¹å¼ï¼Œå¼€å¯è¿™ä¸ªåŽæ˜¯å®Œå…¨æ›¿æ¢"
                        },
                        {
                            title: "è‡ªå®šä¹‰é€‚é…å™¨",
                            type: "fieldSet",
                            className: "m-b-none",
                            size: "sm",
                            collapsable: !0,
                            collapsedOn: "!this.requestAdaptor && !this.adaptor",
                            controls: [{
                                name: "requestAdaptor",
                                type: "js-editor",
                                label: "å‘é€é€‚é…å™¨",
                                description: "å‡½æ•°ç­¾åï¼š(api) => apiï¼Œ æ•°æ®åœ¨ api.data ä¸­ï¼Œä¿®æ”¹åŽè¿”å›ž api å¯¹è±¡ã€‚"
                            },
                            {
                                name: "adaptor",
                                type: "js-editor",
                                label: "æŽ¥æ”¶é€‚é…å™¨",
                                description: "å‡½æ•°ç­¾å: (payload, response, api) => payload"
                            }]
                        }]
                    }]
                },
                r)
            },
            apiString: {
                name: "api",
                type: "text",
                placeholder: "http://"
            },
            required: {
                name: "required",
                type: "switch",
                mode: "inline",
                className: "w-full",
                label: "æ˜¯å¦å¿…å¡«"
            },
            description: {
                name: "description",
                type: "textarea",
                label: "æè¿°",
                pipeIn: function(e, t) {
                    return e || t.desc || ""
                }
            },
            options: {
                label: "é€‰é¡¹ Options",
                name: "options",
                type: "combo",
                multiple: !0,
                draggable: !0,
                addButtonText: "æ–°å¢žé€‰é¡¹",
                scaffold: {
                    label: "",
                    value: ""
                },
                pipeIn: function(e) {
                    return s.normalizeOptions(e)
                },
                controls: [{
                    type: "text",
                    name: "label",
                    placeholder: "åç§°",
                    required: !0
                },
                {
                    type: "text",
                    name: "value",
                    placeholder: "å€¼",
                    unique: !0
                }]
            },
            tree: {
                label: "é€‰é¡¹ Options",
                name: "options",
                type: "combo",
                multiple: !0,
                draggable: !0,
                addButtonText: "æ–°å¢žé€‰é¡¹",
                description: "é™æ€æ•°æ®æš‚ä¸æ”¯æŒå¤šçº§ï¼Œè¯·åˆ‡æ¢åˆ°ä»£ç æ¨¡å¼ï¼Œæˆ–è€…é‡‡ç”¨ source æŽ¥å£èŽ·å–ã€‚",
                scaffold: {
                    label: "",
                    value: ""
                },
                controls: [{
                    type: "text",
                    name: "label",
                    placeholder: "åç§°",
                    required: !0
                },
                {
                    type: "text",
                    name: "value",
                    placeholder: "å€¼",
                    unique: !0
                }]
            },
            horizontalMode: {
                label: "å·¦å³å æ¯”è®¾ç½®",
                name: "horizontal",
                type: "switch",
                option: "ç»§æ‰¿",
                mode: "inline",
                className: "w-full",
                inputClassName: "text-sm",
                visibleOn: '(this.mode || this.$$formMode) == "horizontal" && this.label !== false',
                pipeIn: function(e) {
                    return ! e
                },
                pipeOut: function(e, t, a) {
                    return e ? null: a.formHorizontal
                }
            },
            horizontal: {
                type: "combo",
                syncDefaultValue: !1,
                name: "horizontal",
                multiLine: !0,
                pipeIn: function(e) {
                    return {
                        leftRate: e && "number" == typeof e.left ? e.left: e && /\bcol\-(?:xs|sm|md|lg)\-(\d+)\b/.test(e.left) ? parseInt(RegExp.$1, 10) : 2,
                        leftFixed: e && e.leftFixed || ""
                    }
                },
                pipeOut: function(e) {
                    var t = Math.min(11, Math.max(1, e.leftRate || 2));
                    return {
                        leftFixed: e.leftFixed || "",
                        left: t,
                        right: 12 - t
                    }
                },
                inputClassName: "no-padder",
                controls: [{
                    name: "leftFixed",
                    type: "button-group",
                    label: "å·¦ä¾§å®½åº¦",
                    size: "xs",
                    options: [{
                        label: "æ¯”çŽ‡",
                        value: ""
                    },
                    {
                        label: "å°å®½åº¦",
                        value: "sm",
                        visibleOn: "this.leftFixed"
                    },
                    {
                        label: "å›ºå®šå®½åº¦",
                        value: "normal"
                    },
                    {
                        label: "å¤§å®½åº¦",
                        value: "lg",
                        visibleOn: "this.leftFixed"
                    }]
                },
                {
                    name: "leftRate",
                    type: "range",
                    visibleOn: "!this.leftFixed",
                    min: 1,
                    max: 11,
                    step: 1,
                    label: "å·¦å³åˆ†å¸ƒè°ƒæ•´(n/12)",
                    labelRemark: {
                        trigger: "click",
                        className: "m-l-xs",
                        rootClose: !0,
                        content: "ä¸€å…± 12 ç­‰ä»½ï¼Œè¿™é‡Œå¯ä»¥è®¾ç½®å·¦ä¾§å®½åº¦å æ¯” n/12ã€‚",
                        placement: "right"
                    }
                }]
            },
            validations: (l = [{
                label: "é‚®ç®±æ ¼å¼",
                value: "isEmail"
            },
            {
                label: "Urlæ ¼å¼",
                value: "isUrl"
            },
            {
                label: "æ•°å­—",
                value: "isNumeric"
            },
            {
                label: "å­—æ¯",
                value: "isAlpha"
            },
            {
                label: "å­—æ¯å’Œæ•°å­—",
                value: "isAlphanumeric"
            },
            {
                label: "æ•´åž‹æ•°å­—",
                value: "isInt"
            },
            {
                label: "æµ®ç‚¹åž‹æ•°å­—",
                value: "isFloat"
            },
            {
                label: "å›ºå®šé•¿åº¦",
                value: "isLength"
            },
            {
                label: "æœ€å¤§é•¿åº¦",
                value: "maxLength"
            },
            {
                label: "æœ€å°é•¿åº¦",
                value: "minLength"
            },
            {
                label: "æœ€å¤§å€¼",
                value: "maximum"
            },
            {
                label: "æœ€å°å€¼",
                value: "minimum"
            },
            {
                label: "JSONæ ¼å¼",
                value: "isJson"
            },
            {
                label: "ä¸ä¸ºç©º",
                value: "notEmptyString"
            },
            {
                label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                value: "equals"
            },
            {
                label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                value: "equalsField"
            },
            {
                label: "è‡ªå®šä¹‰æ­£åˆ™",
                value: "matchRegexp"
            },
            {
                label: "è‡ªå®šä¹‰æ­£åˆ™2",
                value: "matchRegexp1"
            },
            {
                label: "è‡ªå®šä¹‰æ­£åˆ™3",
                value: "matchRegexp2"
            },
            {
                label: "è‡ªå®šä¹‰æ­£åˆ™4",
                value: "matchRegexp3"
            },
            {
                label: "è‡ªå®šä¹‰æ­£åˆ™5",
                value: "matchRegexp4"
            }], i = ["isEmail", "isUrl", "isNumeric", "isAlpha", "isAlphanumeric", "isInt", "isFloat", "isJson"], {
                type: "combo",
                syncDefaultValue: !1,
                name: "validations",
                label: "éªŒè¯è§„åˆ™",
                addButtonText: "æ–°å¢žè§„åˆ™",
                multiple: !0,
                pipeIn: function(e) {
                    if ("string" == typeof e && e && (e = s.str2rules(e)), !o.isObject(e)) return e;
                    var t = [];
                    return Object.keys(e).forEach((function(a) {
                        var l;
                        /^\$\$/.test(a) || t.push(((l = {
                            type: a
                        })[a] = Array.isArray(e[a]) ? e[a][0] : e[a], l))
                    })),
                    t
                },
                pipeOut: function(e) {
                    if (!Array.isArray(e)) return e;
                    var t = {};
                    return e.forEach((function(e) {
                        var a, n = e.type || ((a = r(l, (function(e) {
                            return ! t[e.value]
                        }))) ? a.value: "") || l[0].value;
                        t[n] = e[n] || !!~i.indexOf(n) || ""
                    })),
                    t
                },
                controls: [{
                    type: "select",
                    unique: !0,
                    name: "type",
                    options: l,
                    columnClassName: "w-sm"
                },
                {
                    type: "number",
                    name: "isLength",
                    visibleOn: 'data.type == "isLength"',
                    placeholder: "è®¾ç½®é•¿åº¦",
                    value: "1"
                },
                {
                    type: "number",
                    name: "maximum",
                    visibleOn: 'data.type == "maximum"',
                    placeholder: "è®¾ç½®æœ€å¤§å€¼"
                },
                {
                    type: "number",
                    name: "minimum",
                    visibleOn: 'data.type == "minimum"',
                    placeholder: "è®¾ç½®æœ€å¤§å€¼"
                },
                {
                    type: "number",
                    name: "maxLength",
                    visibleOn: 'data.type == "maxLength"',
                    placeholder: "è®¾ç½®æœ€å¤§é•¿åº¦å€¼"
                },
                {
                    type: "number",
                    name: "minLength",
                    visibleOn: 'data.type == "minLength"',
                    placeholder: "è®¾ç½®æœ€å°é•¿åº¦å€¼"
                },
                {
                    type: "text",
                    name: "equals",
                    visibleOn: 'data.type == "equals"',
                    placeholder: "è®¾ç½®å€¼",
                    value: ""
                },
                {
                    type: "text",
                    name: "equalsField",
                    visibleOn: 'data.type == "equalsField"',
                    placeholder: "è®¾ç½®å­—æ®µå",
                    value: ""
                },
                {
                    type: "text",
                    name: "matchRegexp",
                    visibleOn: 'data.type == "matchRegexp"',
                    placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                },
                {
                    type: "text",
                    name: "matchRegexp1",
                    visibleOn: 'data.type == "matchRegexp1"',
                    placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                },
                {
                    type: "text",
                    name: "matchRegexp2",
                    visibleOn: 'data.type == "matchRegexp2"',
                    placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                },
                {
                    type: "text",
                    name: "matchRegexp3",
                    visibleOn: 'data.type == "matchRegexp3"',
                    placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                },
                {
                    type: "text",
                    name: "matchRegexp4",
                    visibleOn: 'data.type == "matchRegexp4"',
                    placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                }]
            }),
            validationErrors: function() {
                var e = [{
                    label: "é‚®ç®±æ ¼å¼",
                    value: "isEmail"
                },
                {
                    label: "Urlæ ¼å¼",
                    value: "isUrl"
                },
                {
                    label: "æ•°å­—",
                    value: "isNumeric"
                },
                {
                    label: "å­—æ¯",
                    value: "isAlpha"
                },
                {
                    label: "å­—æ¯å’Œæ•°å­—",
                    value: "isAlphanumeric"
                },
                {
                    label: "æ•´åž‹æ•°å­—",
                    value: "isInt"
                },
                {
                    label: "æµ®ç‚¹åž‹æ•°å­—",
                    value: "isFloat"
                },
                {
                    label: "å›ºå®šé•¿åº¦",
                    value: "isLength"
                },
                {
                    label: "æœ€å¤§é•¿åº¦",
                    value: "maxLength"
                },
                {
                    label: "æœ€å°é•¿åº¦",
                    value: "minLength"
                },
                {
                    label: "æœ€å¤§å€¼",
                    value: "maximum"
                },
                {
                    label: "æœ€å°å€¼",
                    value: "minimum"
                },
                {
                    label: "JSONæ ¼å¼",
                    value: "isJson"
                },
                {
                    label: "ä¸ä¸ºç©º",
                    value: "notEmptyString"
                },
                {
                    label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                    value: "equals"
                },
                {
                    label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                    value: "equalsField"
                },
                {
                    label: "è‡ªå®šä¹‰æ­£åˆ™",
                    value: "matchRegexp"
                },
                {
                    label: "è‡ªå®šä¹‰æ­£åˆ™2",
                    value: "matchRegexp1"
                },
                {
                    label: "è‡ªå®šä¹‰æ­£åˆ™3",
                    value: "matchRegexp2"
                },
                {
                    label: "è‡ªå®šä¹‰æ­£åˆ™4",
                    value: "matchRegexp3"
                },
                {
                    label: "è‡ªå®šä¹‰æ­£åˆ™5",
                    value: "matchRegexp4"
                }],
                t = {
                    isEmail: "Email æ ¼å¼ä¸æ­£ç¡®",
                    isRequired: "è¿™æ˜¯å¿…å¡«é¡¹",
                    isUrl: "Url æ ¼å¼ä¸æ­£ç¡®",
                    isInt: "è¯·è¾“å…¥æ•´å½¢æ•°å­—",
                    isAlpha: "è¯·è¾“å…¥å­—æ¯",
                    isNumeric: "è¯·è¾“å…¥æ•°å­—",
                    isAlphanumeric: "è¯·è¾“å…¥å­—æ¯æˆ–è€…æ•°å­—",
                    isFloat: "è¯·è¾“å…¥æµ®ç‚¹åž‹æ•°å€¼",
                    isWords: "è¯·è¾“å…¥å­—æ¯",
                    isUrlPath: "åªèƒ½è¾“å…¥å­—æ¯ã€æ•°å­—ã€`-` å’Œ `_`.",
                    matchRegexp: "æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚",
                    minLength: "è¯·è¾“å…¥æ›´å¤šçš„å†…å®¹ï¼Œè‡³å°‘è¾“å…¥ $1 ä¸ªå­—ç¬¦ã€‚",
                    maxLength: "è¯·æŽ§åˆ¶å†…å®¹é•¿åº¦, è¯·ä¸è¦è¾“å…¥ $1 ä¸ªå­—ç¬¦ä»¥ä¸Š",
                    maximum: "å½“å‰è¾“å…¥å€¼è¶…å‡ºæœ€å¤§å€¼ $1ï¼Œè¯·æ£€æŸ¥",
                    minimum: "å½“å‰è¾“å…¥å€¼ä½ŽäºŽæœ€å°å€¼ $1ï¼Œè¯·æ£€æŸ¥",
                    isJson: "è¯·æ£€æŸ¥ Json æ ¼å¼ã€‚",
                    isLength: "è¯·è¾“å…¥é•¿åº¦ä¸º $1 çš„å†…å®¹",
                    notEmptyString: "è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦",
                    equalsField: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´",
                    equals: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´"
                };
                return {
                    type: "combo",
                    syncDefaultValue: !1,
                    name: "validationErrors",
                    label: "è‡ªå®šä¹‰éªŒè¯æç¤º",
                    description: "è‡ªå¸¦æç¤ºä¸æ»¡è¶³æ—¶ï¼Œå¯ä»¥è‡ªå®šä¹‰ã€‚",
                    addButtonText: "æ–°å¢žæç¤º",
                    multiple: !0,
                    pipeIn: function(e) {
                        if (!o.isObject(e)) return e;
                        var t = [];
                        return Object.keys(e).forEach((function(a) { / ^\$\$ / .test(a) || t.push({
                                type: a,
                                msg: e[a]
                            })
                        })),
                        t
                    },
                    pipeOut: function(a) {
                        if (!Array.isArray(a)) return a;
                        var l = {};
                        return a.forEach((function(a) {
                            var i, n = a.type || ((i = r(e, (function(e) {
                                return ! l[e.value]
                            }))) ? i.value: "") || e[0].value;
                            l[n] = a.msg || t[n] || ""
                        })),
                        l
                    },
                    controls: [{
                        type: "select",
                        unique: !0,
                        name: "type",
                        options: e,
                        columnClassName: "w-sm"
                    },
                    {
                        type: "text",
                        name: "msg",
                        placeholder: "æç¤ºä¿¡æ¯"
                    },
                    {
                        type: "formula",
                        name: "msg",
                        initSet: !1,
                        formula: "({\n                        isEmail: 'Email æ ¼å¼ä¸æ­£ç¡®',\n                        isRequired: 'è¿™æ˜¯å¿…å¡«é¡¹',\n                        isUrl: 'Url æ ¼å¼ä¸æ­£ç¡®',\n                        isInt: 'è¯·è¾“å…¥æ•´å½¢æ•°å­—',\n                        isAlpha: 'è¯·è¾“å…¥å­—æ¯',\n                        isNumeric: 'è¯·è¾“å…¥æ•°å­—',\n                        isAlphanumeric: 'è¯·è¾“å…¥å­—æ¯æˆ–è€…æ•°å­—',\n                        isFloat: 'è¯·è¾“å…¥æµ®ç‚¹åž‹æ•°å€¼',\n                        isWords: 'è¯·è¾“å…¥å­—æ¯',\n                        isUrlPath: 'åªèƒ½è¾“å…¥å­—æ¯ã€æ•°å­—ã€`-` å’Œ `_`.',\n                        matchRegexp: 'æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚',\n                        minLength: 'è¯·è¾“å…¥æ›´å¤šçš„å†…å®¹ï¼Œè‡³å°‘è¾“å…¥ $1 ä¸ªå­—ç¬¦ã€‚',\n                        maxLength: 'è¯·æŽ§åˆ¶å†…å®¹é•¿åº¦, è¯·ä¸è¦è¾“å…¥ $1 ä¸ªå­—ç¬¦ä»¥ä¸Š',\n                        maximum: 'å½“å‰è¾“å…¥å€¼è¶…å‡ºæœ€å¤§å€¼ $1ï¼Œè¯·æ£€æŸ¥',\n                        minimum: 'å½“å‰è¾“å…¥å€¼ä½ŽäºŽæœ€å°å€¼ $1ï¼Œè¯·æ£€æŸ¥',\n                        isJson: 'è¯·æ£€æŸ¥ Json æ ¼å¼ã€‚',\n                        isLength: 'è¯·è¾“å…¥é•¿åº¦ä¸º $1 çš„å†…å®¹',\n                        notEmptyString: 'è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦',\n                        equalsField: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´',\n                        equals: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´'\n                    })[data.type] || ''"
                    }]
                }
            } (),
            submitOnChange: {
                label: "ä¿®æ”¹å³æäº¤",
                type: "switch",
                name: "submitOnChange",
                mode: "inline",
                className: "w-full",
                labelRemark: {
                    trigger: "click",
                    className: "m-l-xs",
                    rootClose: !0,
                    content: "è®¾ç½®åŽï¼Œè¡¨å•ä¸­æ¯æ¬¡æœ‰ä¿®æ”¹éƒ½ä¼šè§¦å‘æäº¤",
                    placement: "right"
                }
            },
            validateOnChange: {
                type: "button-group",
                name: "validateOnChange",
                label: "ä¿®æ”¹å³è§¦å‘è¡¨å•éªŒè¯",
                description: "é»˜è®¤ä¸ºå½“è¡¨å•æäº¤è¿‡åˆ™æ¯æ¬¡ä¿®æ”¹éƒ½è§¦å‘éªŒè¯ã€‚",
                size: "xs",
                mode: "inline",
                className: "w-full",
                options: [{
                    label: "é»˜è®¤",
                    value: ""
                },
                {
                    label: "å¼€å¯",
                    value: !0
                },
                {
                    label: "å…³é—­",
                    value: !1
                }],
                pipeIn: c(""),
                pipeOut: function(e) {
                    return "" === e ? void 0 : !!e
                }
            },
            visible: {
                type: "fieldSet",
                title: "æ˜¾éšé…ç½®",
                _name: "visible",
                collapsable: !0,
                className: "fieldset",
                controls: [{
                    label: "è®¾ç½®æ–¹å¼",
                    name: "visible",
                    type: "button-group",
                    size: "xs",
                    mode: "inline",
                    className: "w-full",
                    options: [{
                        label: "é™æ€è®¾ç½®",
                        value: 1
                    },
                    {
                        label: "è¡¨è¾¾å¼",
                        value: 2
                    }],
                    pipeIn: function(e) {
                        return "boolean" == typeof e ? 1 : 2
                    },
                    pipeOut: function(e) {
                        return 1 === e || ""
                    }
                },
                {
                    type: "switch",
                    label: "å¯è§(visible)",
                    name: "visible",
                    visibleOn: 'typeof this.visible === "boolean"',
                    pipeIn: function(e, t) {
                        return ! 1 !== e && !t.hidden
                    },
                    mode: "inline",
                    className: "w-full m-b-none",
                    onChange: function(e, t, a, l) {
                        return l.setValueByName("visibleOn", "")
                    }
                },
                {
                    name: "visibleOn",
                    label: "å¯è§è¡¨è¾¾å¼(visibleOn)",
                    type: "text",
                    visibleOn: 'typeof this.visible !== "boolean"',
                    autoComplete: !1,
                    pipeIn: function(e, t) {
                        return e || t.hiddenOn && "!(" + t.hiddenOn + ")" || ""
                    },
                    description: "æ”¯æŒ JS è¡¨è¾¾å¼å¦‚ï¼š<code>this.xxx == 1</code>",
                    className: "m-b-none"
                }]
            },
            initFetch: {
                type: "group",
                label: "æ˜¯å¦åˆå§‹åŠ è½½",
                visibleOn: "this.initApi",
                direction: "vertical",
                className: "m-b-none",
                labelRemark: {
                    trigger: "click",
                    rootClose: !0,
                    className: "m-l-xs",
                    content: "å½“é…ç½®åˆå§‹åŒ–æŽ¥å£åŽï¼Œç»„ä»¶åˆå§‹å°±ä¼šæ‹‰å–æŽ¥å£æ•°æ®ï¼Œå¯ä»¥é€šè¿‡ä»¥ä¸‹é…ç½®ä¿®æ”¹ã€‚",
                    placement: "right"
                },
                controls: [{
                    name: "initFetch",
                    type: "radios",
                    inline: !0,
                    options: [{
                        label: "æ˜¯",
                        value: !0
                    },
                    {
                        label: "å¦",
                        value: !1
                    },
                    {
                        label: "è¡¨è¾¾å¼",
                        value: ""
                    }]
                },
                {
                    name: "initFetchOn",
                    autoComplete: !1,
                    visibleOn: 'typeof this.initFetch !== "boolean"',
                    type: "text",
                    placeholder: "å¦‚ï¼šthis.id è¡¨ç¤ºæœ‰ id å€¼æ—¶åˆå§‹åŠ è½½",
                    className: "m-t-n-sm"
                }]
            },
            disabled: {
                type: "fieldSet",
                title: "ç¦ç”¨é…ç½®",
                _name: "disabled",
                collapsable: !0,
                className: "fieldset",
                controls: [{
                    label: "è®¾ç½®æ–¹å¼",
                    name: "disabled",
                    type: "button-group",
                    size: "xs",
                    mode: "inline",
                    className: "w-full",
                    options: [{
                        label: "é™æ€è®¾ç½®",
                        value: 1
                    },
                    {
                        label: "è¡¨è¾¾å¼",
                        value: 2
                    }],
                    pipeIn: function(e) {
                        return "boolean" == typeof e ? 1 : 2
                    },
                    pipeOut: function(e) {
                        return 1 !== e && ""
                    }
                },
                {
                    type: "switch",
                    label: "ç¦ç”¨(disabled)",
                    name: "disabled",
                    visibleOn: 'typeof this.disabled === "boolean"',
                    pipeIn: function(e, t) {
                        return ! 1 !== e && !t.hidden
                    },
                    mode: "inline",
                    className: "w-full m-b-none",
                    onChange: function(e, t, a, l) {
                        return l.setValueByName("disabledOn", "")
                    }
                },
                {
                    name: "disabledOn",
                    label: "ç¦ç”¨è¡¨è¾¾å¼(disabledOn)",
                    type: "text",
                    visibleOn: 'typeof this.disabled !== "boolean"',
                    description: "æ”¯æŒ JS è¡¨è¾¾å¼å¦‚ï¼š<code>this.xxx == 1</code>",
                    className: "m-b-none"
                }]
            },
            switchDefaultValue: {
                type: "switch",
                name: "value",
                label: "è®¾ç½®é»˜è®¤å€¼",
                mode: "inline",
                className: "w-full",
                pipeIn: function(e) {
                    return void 0 !== e
                },
                pipeOut: function(e, t, a) {
                    return e ? "": void 0
                },
                description: "ä¸è®¾ç½®æ—¶ï¼Œæ ¹æ®å­—æ®µåèŽ·å–å€¼"
            },
            multiple: {
                label: "å¤šé€‰æ¨¡å¼",
                name: "multiple",
                type: "switch",
                mode: "inline",
                className: "w-full"
            },
            joinValues: {
                type: "switch",
                name: "joinValues",
                mode: "inline",
                className: "w-full",
                visibleOn: "data.multiple",
                label: "æ˜¯å¦æ‹¼æŽ¥å€¼",
                value: !0,
                description: "å¼€å¯åŽå°†é€‰ä¸­çš„é€‰é¡¹ value çš„å€¼ç”¨è¿žæŽ¥ç¬¦æ‹¼æŽ¥èµ·æ¥ï¼Œä½œä¸ºå½“å‰è¡¨å•é¡¹çš„å€¼ã€‚"
            },
            delimiter: {
                type: "text",
                name: "delimiter",
                label: "è¿žæŽ¥ç¬¦",
                visibleOn: "data.multiple && data.joinValues",
                pipeIn: c(",")
            },
            extractValue: {
                type: "switch",
                name: "extractValue",
                mode: "inline",
                className: "w-full",
                label: "æ˜¯å¦æŠ½å–valueå€¼",
                visibleOn: "data.joinValues === false",
                pipeIn: c(!1),
                description: "å¼€å¯åŽå°†é€‰ä¸­çš„é€‰é¡¹ value çš„å€¼å°è£…ä¸ºæ•°ç»„ï¼Œä½œä¸ºå½“å‰è¡¨å•é¡¹çš„å€¼ã€‚"
            },
            ref: {
                type: "text",
                name: "$ref",
                label: "é€‰æ‹©å®šä¹‰",
                labelRemark: "è¾“å…¥å·²ç»åœ¨pageä¸­è®¾å®šå¥½çš„å®šä¹‰"
            }
        };
        function c(e, t) {
            return void 0 === t && (t = !0),
            t ?
            function(t) {
                return void 0 === t ? e: t
            }: function(t) {
                return t || e
            }
        }
        t.getSchemaTplByName = function(e, t) {
            var a = p[e];
            return "function" == typeof a ? a(t) : a ? t ? n.__assign(n.__assign({},
            a), t) : a: null
        },
        t.valuePipeOut = function(e) {
            try {
                if ("undefined" === e) return;
                return JSON.parse(e)
            } catch(t) {
                return e
            }
        },
        t.defaultValue = c
    },
    function(e, t) {
        e.exports = require("cc4bbf0")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.removeDragingClass = t.addDragingClass = t.autobind = t.normalizeId = t.persistSet = t.persistGet = t.sortByList = t.blackList = t.createElementFromHTML = t.JSONDuplicate = t.JSONMoveDownById = t.JSONCanMoveDown = t.JSONMoveUpById = t.JSONCanMoveUp = t.JSONMerge = t.JSONDelete = t.JSONUpdate = t.JSONGetParentById = t.JSONGetById = t.JSONGetPathById = t.JSONGetByPath = t.JSONPipeOut = t.JSONPipeIn = t.cleanUndefined = t.__uri = t.omitControls = t.makeHorizontalDeeper = t.noop = t.anyChanged = t.isObject = t.isObjectShallowModified = t.guid = void 0;
        var l = a(0),
        i = a(5),
        n = i.utils.guid,
        o = i.utils.omitControls,
        r = i.utils.isObjectShallowModified,
        s = i.utils.isObject,
        p = i.utils.anyChanged,
        c = i.utils.noop,
        d = i.utils.makeHorizontalDeeper,
        m = i.utils.findIndex;
        function u(e) {
            return s(e) ? (Object.keys(e).forEach((function(t) {
                void 0 === e[t] && delete e[t]
            })), e) : e
        }
        function h(e) {
            if (!s(e) || e.$$typeof) return e;
            var t = {},
            a = !1;
            return e.$$id || (a = !0, t.$$id = n()),
            ["visible", "visibleOn", "hidden", "hiddenOn", "toggled"].forEach((function(l) {
                e.hasOwnProperty(l) && (a = !0, t[l] = void 0, t["$$" + l] = e[l])
            })),
            Object.keys(e).forEach((function(l) {
                var i = e[l];
                if (Array.isArray(i)) {
                    var n = !1,
                    o = i.map((function(e) {
                        var t = h(e);
                        return t !== e && (n = !0),
                        t
                    }));
                    n && (a = !0, t[l] = o)
                } else { (o = h(i)) !== i && (a = !0, t[l] = o)
                }
            })),
            a && (e = u(l.__assign(l.__assign({},
            e), t))),
            e
        }
        function b(e, t) {
            if (void 0 === t && (t = !1), Array.isArray(e)) {
                var a = !1,
                i = e.map((function(e) {
                    var l = b(e, t);
                    return l !== e && (a = !0),
                    l
                }));
                return a ? i: e
            }
            if (!s(e) || e.$$typeof) return e;
            var n = !1,
            o = {};
            return e.$$id && (n = !0, o.$$id = void 0),
            t || ["visible", "visibleOn", "hidden", "hiddenOn", "toggled"].forEach((function(t) {
                e.hasOwnProperty("$$" + t) && (n = !0, o["$$" + t] = void 0, o[t] = e["$$" + t])
            })),
            Object.keys(e).forEach((function(a) {
                var l = e[a];
                if (!t && "__" === a.substring(0, 2)) return o[a] = void 0,
                void(n = !0);
                var i = b(l, t);
                i !== l && (n = !0, o[a] = i)
            })),
            n && (e = u(l.__assign(l.__assign({},
            e), o))),
            e
        }
        function f(e, t, a) {
            var l = e;
            return a && a.push(e),
            t.forEach((function(e) {
                l = l[e],
                a && a.push(l)
            })),
            l
        }
        function y(e, t) {
            for (var a = [], l = !1, i = [{
                path: ".",
                data: e
            }], n = function() {
                var e = i.shift(),
                n = e.data,
                o = e.path;
                if (n.$$id === t) return l = !0,
                a = o.split(".").filter((function(e) {
                    return e
                })),
                "break";
                Object.keys(n).forEach((function(e) {
                    var t = n[e];
                    Array.isArray(t) ? t.forEach((function(t, a) {
                        s(t) && i.push({
                            data: t,
                            path: o + "." + e + "." + a
                        })
                    })) : s(t) && i.push({
                        data: t,
                        path: o + "." + e
                    })
                }))
            }; i.length;) {
                if ("break" === n()) break
            }
            return l ? a: null
        }
        function g(e, t, a) {
            void 0 === a && (a = !1);
            var l = y(e, t);
            if (null === l || !l.length) return null;
            var i = e,
            n = [i];
            for (l.pop(), l.forEach((function(e) {
                i = i[e],
                n.unshift(i)
            })); a && Array.isArray(n[0]);) n.shift();
            return n[0]
        }
        t.guid = n,
        t.omitControls = o,
        t.isObjectShallowModified = r,
        t.isObject = s,
        t.anyChanged = p,
        t.noop = c,
        t.makeHorizontalDeeper = d,
        t.__uri = function(e) {
            return e
        },
        t.cleanUndefined = u,
        t.JSONPipeIn = h,
        t.JSONPipeOut = b,
        t.JSONGetByPath = f,
        t.JSONGetPathById = y,
        t.JSONGetById = function(e, t) {
            var a = y(e, t);
            return null === a ? null: f(e, a)
        },
        t.JSONGetParentById = g,
        t.JSONUpdate = function(e, t, a, i) {
            void 0 === i && (i = !1);
            var n = y(e, t);
            if (null === n) return e;
            var o = [],
            r = f(e, n, o);
            for (o[o.length - 1] = r = l.__assign(l.__assign(l.__assign({},
            i ? null: r), a), {
                $$id: t
            }); o.length > 1;) {
                var s = o.pop();
                Array.isArray(o[o.length - 1]) ? o[o.length - 1] = o[o.length - 1].concat() : o[o.length - 1] = l.__assign({},
                o[o.length - 1]),
                o[o.length - 1][n[o.length - 1]] = s
            }
            return o[0]
        },
        t.JSONDelete = function(e, t, a, i) {
            var n = y(e, t);
            if (null === n) return e;
            Array.isArray(a) && a.push.apply(a, n);
            var o = n.pop(),
            r = [],
            s = f(e, n, r);
            for (Array.isArray(s) ? (r[r.length - 1] = s = s.concat(), s.splice(o, 1), i && !s.length && (r[r.length - 1] = void 0)) : (r[r.length - 1] = s = l.__assign({},
            s), delete s[o]); r.length > 1;) {
                var p = r.pop();
                Array.isArray(r[r.length - 1]) ? r[r.length - 1] = r[r.length - 1].concat() : r[r.length - 1] = l.__assign({},
                r[r.length - 1]),
                void 0 === p ? delete r[r.length - 1][n[r.length - 1]] : r[r.length - 1][n[r.length - 1]] = p
            }
            return r[0]
        },
        t.JSONMerge = function e(t, a) {
            if (!s(t) || !s(a)) return a;
            if (!r(t, a)) return t;
            var l = {};
            return t.$$id && (l.$$id = t.$$id),
            Object.keys(a).forEach((function(i) {
                Array.isArray(a[i]) && Array.isArray(t[i]) && a[i] !== t[i] ? l[i] = a[i].map((function(a, l) {
                    return t[i][l] ? e(t[i][l], a) : a
                })) : void 0 === t[i] ? l[i] = a[i] : l[i] = e(t[i], a[i])
            })),
            l
        },
        t.JSONCanMoveUp = function(e, t) {
            var a = g(e, t);
            return ! (!a || !Array.isArray(a)) && m(a, (function(e) {
                return e.$$id === t
            })) > 0
        },
        t.JSONMoveUpById = function(e, t) {
            var a = y(e, t);
            if (null === a) return e;
            var i = parseInt(a.pop(), 10);
            if (0 === i) return e;
            var n = [],
            o = f(e, a, n);
            if (!Array.isArray(o)) return e;
            n[n.length - 1] = o = o.concat();
            var r = o[i];
            for (o.splice(i, 1), o.splice(i - 1, 0, r); n.length > 1;) {
                var s = n.pop();
                Array.isArray(n[n.length - 1]) ? n[n.length - 1] = n[n.length - 1].concat() : n[n.length - 1] = l.__assign({},
                n[n.length - 1]),
                n[n.length - 1][a[n.length - 1]] = s
            }
            return n[0]
        },
        t.JSONCanMoveDown = function(e, t) {
            var a = g(e, t);
            if (!a || !Array.isArray(a)) return ! 1;
            var l = m(a, (function(e) {
                return e.$$id === t
            }));
            return~l && l < a.length - 1
        },
        t.JSONMoveDownById = function(e, t) {
            var a = y(e, t);
            if (null === a) return e;
            var i = parseInt(a.pop(), 10),
            n = [],
            o = f(e, a, n);
            if (! (Array.isArray(o) && i < o.length - 1)) return e;
            n[n.length - 1] = o = o.concat();
            var r = o[i];
            for (o.splice(i, 1), o.splice(i + 1, 0, r); n.length > 1;) {
                var s = n.pop();
                Array.isArray(n[n.length - 1]) ? n[n.length - 1] = n[n.length - 1].concat() : n[n.length - 1] = l.__assign({},
                n[n.length - 1]),
                n[n.length - 1][a[n.length - 1]] = s
            }
            return n[0]
        },
        t.JSONDuplicate = function(e, t) {
            var a = y(e, t);
            if (null === a) return e;
            var i = parseInt(a.pop(), 10),
            n = [],
            o = f(e, a, n);
            if (!Array.isArray(o)) return e;
            n[n.length - 1] = o = o.concat();
            var r = h(b(o[i]));
            for (o.splice(i + 1, 0, r); n.length > 1;) {
                var s = n.pop();
                Array.isArray(n[n.length - 1]) ? n[n.length - 1] = n[n.length - 1].concat() : n[n.length - 1] = l.__assign({},
                n[n.length - 1]),
                n[n.length - 1][a[n.length - 1]] = s
            }
            return n[0]
        },
        t.createElementFromHTML = function(e) {
            var t = document.createElement("div");
            return t.innerHTML = e.trim(),
            t.firstChild
        },
        t.blackList = function(e) {
            return function(t) {
                return ! ~e.indexOf(t)
            }
        },
        t.sortByList = function(e, t) {
            var a = t ? "function" == typeof t ? t: function(e) {
                return e[t]
            }: function(e) {
                return e
            };
            return function(t, l) {
                var i = e.indexOf(a(t)),
                n = e.indexOf(a(l));
                return (i = ~i ? i: 999999) > (n = ~n ? n: 999999) ? 1 : i === n ? 0 : -1
            }
        },
        t.persistGet = function(e, t) {
            var a = localStorage.getItem("amis-editor-" + e);
            return a && (a = JSON.parse(a)),
            a || t
        },
        t.persistSet = function(e, t) {
            t = JSON.stringify(t),
            localStorage.setItem("amis-editor-" + e, t)
        },
        t.normalizeId = function(e) {
            return e.replace(/\-[a-z0-9]+$/g, "")
        },
        t.autobind = i.utils.autobind,
        t.addDragingClass = function(e) {
            for (; e && (e.classList.add("ae-is-draging"), !(null == (e = e.parentElement) ? void 0 : e.hasAttribute("data-region"))););
        },
        t.removeDragingClass = function(e) {
            for (; e && (e.classList.remove("ae-is-draging"), !(null == (e = e.parentElement) ? void 0 : e.hasAttribute("data-region"))););
        }
    },
    function(e, t) {
        e.exports = require("167c905")
    },
    function(e, t) {
        e.exports = require("3ce129c")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FormItemEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(8)),
        n = a(2),
        o = a(12),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "FormItem",
                t.commonSettingsLeading = [{
                    label: "å­—æ®µå",
                    name: "name",
                    type: "text"
                },
                {
                    label: "Label",
                    name: "label",
                    type: "text",
                    hiddenOn: "data.label === false"
                },
                {
                    name: "label",
                    label: "éšè— Label",
                    type: "switch",
                    mode: "inline",
                    className: "block",
                    pipeIn: function(e) {
                        return ! 1 === e
                    },
                    pipeOut: function(e) {
                        return ! 0 !== e && ""
                    },
                    visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && !data.label',
                    description: "å½“ form ä¸ºæ°´å¹³å¸ƒå±€æ—¶æœ‰ç”¨ï¼Œå¯ä»¥ç”¨æ¥åŽ»æŽ‰é—´éš”ã€‚"
                },
                {
                    label: "è¡¨å•é¡¹å†…è”",
                    name: "inline",
                    type: "switch",
                    visibleOn: 'data.$$formMode != "inline" && data.mode != "inline"',
                    mode: "inline",
                    className: "block",
                    pipeIn: n.defaultValue(!1)
                },
                {
                    label: "å±•ç¤ºæ¨¡å¼",
                    name: "mode",
                    type: "button-group",
                    size: "sm",
                    option: "ç»§æ‰¿",
                    pipeIn: n.defaultValue(""),
                    options: [{
                        label: "ç»§æ‰¿",
                        value: ""
                    },
                    {
                        label: "æ­£å¸¸",
                        value: "normal"
                    },
                    {
                        label: "å†…è”",
                        value: "inline"
                    },
                    {
                        label: "æ°´å¹³",
                        value: "horizontal"
                    }]
                },
                {
                    label: "å·¦å³å æ¯”è®¾ç½®",
                    name: "horizontal",
                    type: "switch",
                    option: "ç»§æ‰¿",
                    visibleOn: '(this.mode || this.$$formMode) == "horizontal" && this.label !== false',
                    pipeIn: function(e) {
                        return ! e
                    },
                    pipeOut: function(e, t, a) {
                        return e ? null: a.formHorizontal
                    }
                },
                n.getSchemaTplByName("horizontal", {
                    label: "",
                    visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                }), {
                    name: "size",
                    label: "æŽ§ä»¶å°ºå¯¸",
                    type: "button-group",
                    size: "sm",
                    pipeIn: n.defaultValue("full"),
                    options: [{
                        label: "æžå°",
                        value: "xs"
                    },
                    {
                        label: "å°",
                        value: "sm"
                    },
                    {
                        label: "ä¸­",
                        value: "md"
                    },
                    {
                        label: "å¤§",
                        value: "lg"
                    },
                    {
                        label: "å æ»¡",
                        value: "full"
                    }]
                },
                n.getSchemaTplByName("description")],
                t.commonSettingsTrailing = [{
                    label: "å¯ç”¨æç¤ºä¿¡æ¯",
                    type: "switch",
                    name: "remark",
                    pipeIn: function(e) {
                        return !! e
                    },
                    pipeOut: function(e) {
                        return e ? {
                            icon: "fa fa-question-circle",
                            trigger: ["hover", "focus"],
                            className: "Remark--warning"
                        }: null
                    }
                },
                {
                    type: "combo",
                    name: "remark",
                    className: "no-padder",
                    visibleOn: "this.remark",
                    multiLine: !0,
                    controls: [{
                        name: "title",
                        type: "text",
                        label: "æ ‡é¢˜"
                    },
                    {
                        name: "content",
                        type: "textarea",
                        label: "å†…å®¹"
                    },
                    {
                        name: "placement",
                        type: "button-group",
                        size: "xs",
                        label: "å¼¹å‡ºä½ç½®",
                        options: [{
                            label: "å·¦",
                            value: "left"
                        },
                        {
                            label: "ä¸Š",
                            value: "top"
                        },
                        {
                            label: "å³",
                            value: "right"
                        },
                        {
                            label: "åº•",
                            value: "bottom"
                        }]
                    },
                    {
                        name: "icon",
                        label: "å›¾æ ‡",
                        type: "icon-picker"
                    },
                    {
                        name: "className",
                        label: "CSS ç±»å",
                        type: "text"
                    },
                    {
                        name: "trigger",
                        type: "select",
                        label: "è§¦å‘æ–¹å¼",
                        multiple: !0,
                        pipeIn: function(e) {
                            return Array.isArray(e) ? e.join(",") : []
                        },
                        pipeOut: function(e) {
                            return e && e.length ? e.split(",") : void 0
                        },
                        options: [{
                            label: "é¼ æ ‡æ‚¬åœ",
                            value: "hover"
                        },
                        {
                            label: "èšç„¦",
                            value: "focus"
                        },
                        {
                            label: "ç‚¹å‡»",
                            value: "click"
                        }]
                    },
                    {
                        name: "rootClose",
                        label: "ç‚¹å‡»ç©ºç™½å…³é—­",
                        type: "switch"
                    }]
                },
                {
                    label: "æ˜¯å¦ä¿®æ”¹å³æäº¤",
                    type: "switch",
                    name: "submitOnChange",
                    mode: "inline",
                    className: "block"
                },
                n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                    label: "Label CSS ç±»å",
                    name: "labelClassName"
                }), n.getSchemaTplByName("className", {
                    label: "Input CSS ç±»å",
                    name: "inputClassName"
                }), n.getSchemaTplByName("className", {
                    label: "æè¿° CSS ç±»å",
                    name: "descriptionClassName",
                    visibleOn: "data.description",
                    value: "help-block"
                }), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")],
                t
            }
            return l.__extends(t, e),
            t.prototype.getSettingsValue = function() {
                var t = e.prototype.getSettingsValue.call(this);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.setSettingsValue = function(t) {
                var a = this.ref;
                return a && a.props.formStore && t.name && a.props.formStore.setValueByName(t.name, t.value),
                e.prototype.setSettingsValue.call(this, o(t, ["formHorizontal", "$$formMode"]))
            },
            t
        } (i.
    default);
        t.FormItemEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.defaultChildrenSortList = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = l.__importDefault(a(16)),
        o = a(5),
        r = o.utils.isObjectShallowModified,
        s = l.__importDefault(a(43)),
        p = a(15),
        c = a(4),
        d = a(1),
        m = a(21),
        u = a(14),
        h = a(5),
        b = l.__importDefault(a(11));
        t.defaultChildrenSortList = ["crud", "form", "wizard", "panel", "tabs", "service", "chart"];
        var f = function(e) {
            function a(t) {
                var a = e.call(this, t) || this;
                return a.tipName = "Unknown",
                a.Renderer = "div",
                a.regions = {},
                a.regionDefaultNodes = {},
                a.toolbarBtns = [{
                    icon: "fa fa-arrows",
                    tooltip: "å¯æ‹–æ‹½ä¿®æ”¹ä½ç½®",
                    id: "draggable",
                    test: function() {
                        return void 0 !== a.props.$$draggable ? a.props.$$draggable: a.draggable && a.context.editorNode && "global" !== a.context.editorNode.id
                    }
                },
                {
                    icon: "fa fa-cog",
                    tooltip: "è®¾ç½®ï¼ˆâŒ˜ + ,ï¼‰",
                    id: "settings",
                    visible: !1
                },
                {
                    icon: "fa fa-code",
                    tooltip: "ä»£ç æ¨¡å¼ç¼–è¾‘ï¼ˆâŒ˜ + .ï¼‰",
                    id: "code",
                    visible: !1,
                    test: function() {
                        return a.$schema && (void 0 !== a.props.$$codeEditable ? a.props.$$codeEditable: a.codeEditable)
                    }
                },
                {
                    icon: "fa fa-copy",
                    tooltip: "å¤åˆ¶ä¸€ä»½ï¼ˆâŒ˜ + dï¼‰",
                    id: "duplicate",
                    visible: !1,
                    test: function() {
                        return void 0 !== a.props.$$duplicatable ? a.props.$$duplicatable: a.duplicatable && a.context.editorNode && "global" !== a.context.editorNode.id
                    }
                },
                {
                    icon: "fa fa-arrow-left",
                    tooltip: "å‘å‰ç§»åŠ¨ï¼ˆâŒ˜ + â†ï¼‰",
                    id: "moveup",
                    test: function(e, t) {
                        var l = e.$$id,
                        i = e.$$movable;
                        return void 0 !== i ? i: !1 !== a.movable && c.JSONCanMoveUp(t.getSchema(), l)
                    }
                },
                {
                    icon: "fa fa-arrow-right",
                    tooltip: "å‘åŽç§»åŠ¨ï¼ˆâŒ˜ + â†’ï¼‰",
                    id: "movedown",
                    test: function(e, t) {
                        var l = e.$$id,
                        i = e.$$movable;
                        return void 0 !== i ? i: !1 !== a.movable && c.JSONCanMoveDown(t.getSchema(), l)
                    }
                },
                {
                    icon: "fa fa-pencil",
                    tooltip: "ä¿®æ”¹æ¸²æŸ“å™¨ç±»åž‹",
                    id: "replaceable",
                    visible: !1,
                    test: function() {
                        return void 0 !== a.props.$$replaceable ? a.props.$$replaceable: a.replaceable && a.context.editorNode && "global" !== a.context.editorNode.id
                    }
                },
                {
                    icon: "fa fa-cut",
                    tooltip: "å‰ªåˆ‡ï¼ˆâŒ˜ + xï¼‰",
                    visible: !1,
                    id: "cut",
                    test: function() {
                        return void 0 !== a.props.$$removable ? a.props.$$removable: a.removable && a.context.editorNode && "global" !== a.context.editorNode.id
                    }
                },
                {
                    icon: "fa fa-angle-double-up",
                    tooltip: "é€‰æ‹©ä¸Šå±‚ï¼ˆshift + â†‘ï¼‰",
                    id: "select-parent",
                    visible: !1,
                    test: function() {
                        var e = a.context.editorNode;
                        return !! e && e.id && "global" !== e.id
                    }
                },
                {
                    icon: "fa fa-unlink",
                    tooltip: "å–æ¶ˆé€‰ä¸­ï¼ˆEscï¼‰",
                    visible: !1,
                    id: "unlink"
                },
                {
                    icon: "fa fa-trash-o",
                    tooltip: "åˆ é™¤ï¼ˆDelï¼‰",
                    id: "delete",
                    test: function() {
                        return void 0 !== a.props.$$removable ? a.props.$$removable: a.removable && a.context.editorNode && "global" !== a.context.editorNode.id
                    }
                },
                {
                    icon: "fa fa-ellipsis-h",
                    id: "more"
                }],
                a.toolbarDom = i.
            default.createRef(),
                a.containers = [],
                a.removable = !0,
                a.replaceable = !0,
                a.codeEditable = !0,
                a.duplicatable = !0,
                a.draggable = !0,
                a.dropable = !1,
                a.$schema = "",
                a.clickIgnoreSelecor = ".ae-Button",
                a.nodes = [],
                a.placeholder = "æ²¡æœ‰å†…å®¹, å ä½ï¼",
                a.mounted = !1,
                a.replaceSettings = !0,
                a.regions2path = {},
                a.childrenSortList = {},
                a.syncOutlineLazy = m(a.syncOutline.bind(a), 250, {
                    trailing: !0,
                    leading: !1
                }),
                a.childRef = a.childRef.bind(a),
                a.highlightRef = a.highlightRef.bind(a),
                a.handleToolbarBtnClick = a.handleToolbarBtnClick.bind(a),
                a.getTarget = a.getTarget.bind(a),
                a.handleClick = a.handleClick.bind(a),
                a.addNode = a.addNode.bind(a),
                a.removeTo = a.removeTo.bind(a),
                a.getNodes = a.getNodes.bind(a),
                a.getSettingsValue = a.getSettingsValue.bind(a),
                a.setSettingsValue = a.setSettingsValue.bind(a),
                a.renderChild = a.renderChild.bind(a),
                a.regionRef = a.regionRef.bind(a),
                a.handleToolbarDragStart = a.handleToolbarDragStart.bind(a),
                a
            }
            return l.__extends(a, e),
            a.prototype.getChildContext = function() {
                return {
                    editorNode: {
                        id: this.props.$$id,
                        add: this.addNode,
                        remove: this.removeTo,
                        getNodes: this.getNodes,
                        component: this,
                        parent: this.context.editorNode
                    }
                }
            },
            a.prototype.componentWillMount = function() {
                this.mounted = !0;
                var e = this.context.editorNode;
                e && e.add(this);
                var t = this.context.editor;
                t && t.onMount && t.onMount(this),
                this.syncOutlineLazy.cancel()
            },
            a.prototype.componentDidMount = function() {
                this.patchSchema()
            },
            a.prototype.componentDidUpdate = function() {
                this.context.editor.getDragId() !== this.props.$$id && c.removeDragingClass(this.getElement())
            },
            a.prototype.componentWillUnmount = function() {
                this.patchSchema();
                var e = this.context.editorNode;
                e && e.remove(this);
                var t = this.context.editor;
                t && t.onUnmount && t.onUnmount(this),
                this.mounted = !1;
                var a = this.getElement();
                a && this.can("draggable") && a.removeEventListener("dragstart", t.onDragStart)
            },
            a.prototype.can = function(e) {
                var t = u(this.toolbarBtns, (function(t) {
                    return t.id === e
                }));
                return ! (!t || !t.test) && t.test(this.props, this.context.editor)
            },
            a.prototype.getElement = function() {
                try {
                    return this.renderer ? p.findDOMNode(this.renderer) : null
                } catch(e) {
                    return console.warn(e),
                    null
                }
            },
            a.prototype.editorWillUpdate = function(e, t, a) {
                return this.mounted
            },
            a.prototype.patchSchema = function() {
                var e, t = this.props.$$id,
                a = this.context.editor;
                if (t && "string" == typeof t && (e = a.get(t))) {
                    var l = e;
                    this.containers && this.containers.length && (l = this.normalizeContainer(l, this.containers)),
                    l = o.filterSchema(l, {
                        component: this.Renderer
                    }),
                    (l = c.JSONPipeIn(l)) !== e && a.update(t, l, !0, "patch")
                }
            },
            a.prototype.childRef = function(e) {
                for (var t = e,
                a = this.context.editor; e && e.getWrappedInstance;) e = e.getWrappedInstance();
                if (t && this.props.$$id) {
                    if (! (l = p.findDOMNode(t))) return;
                    l && !l.hasAttribute("data-editor-id") && (l.setAttribute("data-editor-id", this.props.$$id), l.setAttribute("data-editor-name", this.tipName)),
                    l.draggable = this.can("draggable"),
                    l.draggable ? l.addEventListener("dragstart", a.onDragStart) : l.removeEventListener("dragstart", a.onDragStart),
                    a.getDragId() === this.props.$$id && c.addDragingClass(l)
                } else if (!t && this.renderer) {
                    var l;
                    if (! (l = p.findDOMNode(t))) return;
                    l.removeEventListener("dragstart", a.onDragStart)
                }
                this.renderer = t,
                this.ref = e
            },
            a.prototype.highlightRef = function(e) {
                this.highlight = e
            },
            a.prototype.updateHighlight = function(e) {
                void 0 === e && (e = !1),
                this.highlight && this.highlight[e ? "update": "forceUpdate"]()
            },
            a.prototype.getWrappedInstance = function() {
                return this.ref
            },
            a.prototype.getTarget = function() {
                return p.findDOMNode(this)
            },
            a.prototype.addNode = function(e) {~this.nodes.indexOf(e) || (this.nodes.push(e), this.syncOutlineLazy())
            },
            a.prototype.removeTo = function(e) {
                var t = this.nodes.indexOf(e);~t && (this.nodes.splice(t, 1), this.syncOutlineLazy())
            },
            a.prototype.getNodes = function() {
                return this.nodes.concat()
            },
            a.prototype.syncOutline = function() {
                this.nodes = this.nodes.sort(c.sortByList(this.containers, (function(e) {
                    return e.props.name
                }))),
                this.context.editor.syncOutline()
            },
            a.prototype.handleClick = function(e) {
                e.defaultPrevented || (e.target.closest(this.clickIgnoreSelecor) ? e.preventDefault() : (e.stopPropagation(), e.preventDefault(), this.active()))
            },
            a.prototype.handleToolbarBtnClick = function(e) {
                e.stopPropagation(),
                e.preventDefault();
                var t = e.currentTarget.getAttribute("data-id");
                t && this.handleToolbarAction(t)
            },
            a.prototype.handleToolbarAction = function(e) {
                if ("settings" === e) this.openEditForm();
                else if ("delete" === e) this.deleteSelf();
                else if ("cut" === e) this.cutSelf();
                else if ("code" === e) this.openEditCode();
                else if ("moveup" === e) this.moveUp();
                else if ("movedown" === e) this.moveDown();
                else if ("select-parent" === e) this.selectParent();
                else if ("replaceable" === e) this.changeSelf();
                else if ("unlink" === e) this.closeSetting();
                else if ("duplicate" === e) this.duplicateSelf();
                else if ("more" === e) {
                    var t = this.toolbarDom.current.getBoundingClientRect(),
                    a = this.getContextMenus();
                    h.openContextMenus({
                        x: window.scrollX + t.left + t.width - 185,
                        y: window.scrollY + t.top + t.height
                    },
                    a)
                }
            },
            a.prototype.handleToolbarDragStart = function(e) {
                var t = this.getElement();
                t && this.context.editor.onDragStart(e, t)
            },
            a.prototype.selectParent = function() {
                for (var e = this.context.editorNode; e && e.isRegion;) e = e.parent;
                e && e.component && "global" !== e.id && e.component.active()
            },
            a.prototype.selectOutside = function() {
                this.selectParent()
            },
            a.prototype.selectInside = function() {
                var e = this.getNodes();
                e.length && e[0].openEditForm()
            },
            a.prototype.active = function(e) {
                var t = this,
                a = this.context.editor,
                i = this.props.$$id,
                n = a.getActiveId();
                if (e || i !== n) {
                    var o = l.__assign({},
                    this.settingsSchema);
                    Array.isArray(o.controls) && (o.controls = o.controls.filter((function(e) {
                        return e && (void 0 === e.test || "function" == typeof e.test && e.test(t.props) || e.test)
                    }))),
                    a.activeEditor(i, {
                        editor: this,
                        schema: o,
                        onChange: this.setSettingsValue,
                        getValue: this.getSettingsValue,
                        getRaw: function() {
                            return a.get(i)
                        },
                        $schema: !1 !== this.props.$$codeEditable ? this.$schema: null
                    },
                    e)
                }
            },
            a.prototype.closeSetting = function() {
                this.context.editor.activeEditor("")
            },
            a.prototype.duplicateSelf = function() {
                if (this.can("duplicate")) {
                    var e = this.context.editor,
                    t = this.props.$$id;
                    e.duplicate(t)
                }
            },
            a.prototype.openEditForm = function(e) {
                void 0 === e && (e = !0);
                var t = this.context.editor;
                this.active(e),
                e && setTimeout((function() {
                    return t.switchSettingPane("form")
                }), 200)
            },
            a.prototype.openEditCode = function() {
                var e = this.context.editor;
                this.active(),
                setTimeout((function() {
                    return e.switchSettingPane("code")
                }), 200)
            },
            a.prototype.deleteSelf = function() {
                if (this.can("delete")) {
                    var e = this.context.editor,
                    t = this.props.$$id,
                    a = e.getActiveId(),
                    l = e.get(t),
                    i = e.delete(t);
                    if (i) {
                        for (var n = this.context.editorNode; n && n.component instanceof b.
                    default;) n = n.component.context.editorNode;
                        n && n.component && n.component.onChildDelete && n.component.onChildDelete(l, i[i.length - 2], i.concat()),
                        a === t && e.activeEditor("")
                    }
                }
            },
            a.prototype.cutSelf = function() {
                var e = this;
                if (this.can("delete")) {
                    var t = this.context.editor,
                    a = this.props.$$id,
                    l = t.getActiveId();
                    t.cut(a, (function(i) {
                        for (var n = e.context.editorNode; n && n.component instanceof b.
                    default;) n = n.component.context.editorNode;
                        n && n.component && n.component.onChildDelete && n.component.onChildDelete(origin, i[i.length - 2], i),
                        l === a && t.activeEditor("")
                    }))
                }
            },
            a.prototype.moveUp = function() {
                var e = this.context.editor,
                t = this.props.$$id;
                e.moveUp(t),
                this.mounted && this.forceUpdate()
            },
            a.prototype.moveDown = function() {
                var e = this.context.editor,
                t = this.props.$$id;
                e.moveDown(t),
                this.mounted && this.forceUpdate()
            },
            a.prototype.selectBackward = function() {
                var e = this.context.editorNode,
                t = this.context.editor;
                if (!e || !t) return ! 1;
                var a = t.get(e.id);
                if (!a) return ! 1;
                var l = c.JSONGetPathById(a, this.props.$$id);
                if (!Array.isArray(l) || !l.length) return ! 1;
                var i = parseInt(l.pop(), 10);
                if (i > 0) {
                    var n = c.JSONGetByPath(a, l);
                    return t.select(n[i - 1].$$id),
                    !0
                }
                return ! 1
            },
            a.prototype.selectForward = function() {
                var e = this.context.editorNode,
                t = this.context.editor;
                if (!e || !t) return ! 1;
                var a = t.get(e.id);
                if (!a) return ! 1;
                var l = c.JSONGetPathById(a, this.props.$$id);
                if (!Array.isArray(l) || !l.length) return ! 1;
                var i = parseInt(l.pop(), 10),
                n = c.JSONGetByPath(a, l);
                return i < n.length - 1 && (t.select(n[i + 1].$$id), !0)
            },
            a.prototype.getSettingsValue = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = e.get(t);
                if (!a) return {};
                for (var l = this.context.editorNode; l && l.component instanceof b.
            default;) l = l.component.context.editorNode;
                return l && l.component && l.component.onChildSettingsGet && (a = l.component.onChildSettingsGet(this.props.type, a) || a),
                a
            },
            a.prototype.setSettingsValue = function(e, t, a) {
                void 0 === t && (t = "form");
                var l = this.context.editor,
                i = this.props.$$id,
                n = l.get(i);
                if (r(n, e)) {
                    for (var o = this.context.editorNode; o && o.component instanceof b.
                default;) o = o.component.context.editorNode;
                    o && o.component && o.component.onChildSettingsSet && (e = o.component.onChildSettingsSet(this.props.type, e, n) || e),
                    "__SKIP__" !== e && l.update(i, e, this.replaceSettings, t),
                    a && a(l.get(i))
                }
            },
            a.prototype.attachAddBtn = function(e, t, a) {
                return e = (e = Array.isArray(e) ? e: e ? [e] : a || []).concat(),
                (Array.isArray(t) ? t: [t]).forEach((function(t) {
                    return t && e.push({
                        children: t
                    })
                })),
                e
            },
            a.prototype.normalizeContainer = function(e, t) {
                var a = this,
                i = !1,
                n = {};
                return t.forEach((function(t) {
                    var l = t.split(".");
                    t = l.shift();
                    var r = e[t],
                    s = "normalizeContainer" + o.utils.ucFirst(t);
                    if (a[s]) {
                        var p = a[s](r);
                        p !== r && (i = !0, n[t] = c.JSONPipeIn(p))
                    } else {
                        if ("string" == typeof r) return i = !0,
                        void(n[t] = c.JSONPipeIn({
                            type: "tpl",
                            tpl: r
                        }));
                        if (Array.isArray(r)) {
                            var d = !1,
                            m = r.map((function(e) {
                                if ("string" == typeof e && e) return d = !0,
                                c.JSONPipeIn({
                                    type: "tpl",
                                    tpl: e
                                });
                                if (l.length) {
                                    var t = a.normalizeContainer(e, [l.join(".")]);
                                    t !== e && (d = !0, e = t)
                                }
                                return e
                            }));
                            d && (i = !0, n[t] = m)
                        } else r && (n[t] = [c.JSONPipeIn(r)], i = !0)
                    }
                })),
                i && (e = l.__assign(l.__assign({},
                e), n)),
                e
            },
            a.prototype.onAddNode = function(e, t) {},
            a.prototype.addChild = function(e, t) {
                var a, l = this.props.$$id,
                i = this.context.editor,
                n = i.get(l),
                o = this.onAddNode(e, t);
                o && (t = o);
                var r = n[e]; (r = Array.isArray(r) ? r.concat() : r ? [r] : []).push(c.JSONPipeIn(t)),
                i.update(l, ((a = {})[e] = r, a))
            },
            a.prototype.emptyChild = function(e) {
                var t, a = this.props.$$id,
                l = this.context.editor;
                l.get(a);
                l.update(a, ((t = {})[e] = void 0, t), void 0, "")
            },
            a.prototype.pickChild = function(e, a, l, i, n, o) {
                var r = this;
                void 0 === a && (a = e),
                void 0 === n && (n = !1);
                var s = this.context.editor,
                p = this.props,
                c = p.$path,
                d = p.$$id;
                s.pickRenderer(c + "/" + e, d, a, (function(e) {
                    return l ? l(e, d, s) : r.addChild(a, e)
                }), i ||
                function(e, t) {
                    return r.acceptChild(e, t.split("/").pop())
                },
                (o || this.childrenSortList[a] || []).concat(t.defaultChildrenSortList))
            },
            a.prototype.acceptChild = function(e, t, a) {
                if (this.context.editor.isMini) return ! 0;
                var l = this.props.$path + "/" + (this.regions2path && this.regions2path[t] || t) + "/" + e,
                i = o.resolveRenderer(l);
                if (a) {
                    if (a && /^(button|submit|reset|button-group|button-toolbar)(?:-control)?$/.test(a)) return ! 0;
                    var n = d.getEditorByName(a);
                    return i && i.component === (null == n ? void 0 : n.renderer)
                }
                return !! i
            },
            a.prototype.changeSelf = function() {
                var e, t = this.context.editor,
                a = this.context.editorNode,
                l = this.props,
                i = l.$path,
                n = l.$$id,
                o = l.$$acceptChild,
                r = l.$$childenOrder,
                s = i.split("/");
                for (s.pop(); a && a.component instanceof b.
            default;) a = a.component.context.editorNode;
                t.pickRenderer(s.join("/"), "", "", (function(e) {
                    a && a.component && a.component.onChildSettingsSet && (e = a.component.onChildSettingsSet(e.type, e, t.get(n), !0) || e),
                    t.update(n, c.JSONPipeIn(e), !0),
                    setTimeout((function() {
                        return t.select(n, !0)
                    }), 500)
                }), o || (null === (e = null == a ? void 0 : a.component.acceptChild) || void 0 === e ? void 0 : e.bind(a.component)), r || (a ? a.component.childrenOrder: void 0))
            },
            a.prototype.getContextMenus = function() {
                var e = this,
                t = [],
                a = this.context.editor,
                l = this.context.editorNode,
                i = this.props.$$id;
                t.push({
                    label: "é€‰ä¸­" + this.tipName,
                    data: this.props.$$id,
                    disabled: a.getActiveId() === i,
                    onSelect: a.select,
                    onHighlight: function(e, t) {
                        return a.hover(e ? t: "")
                    }
                });
                for (var n = [{
                    label: "" + this.tipName,
                    data: this.props.$$id,
                    disabled: a.getActiveId() === i,
                    onSelect: a.select,
                    onHighlight: function(e, t) {
                        return a.hover(e ? t: "")
                    }
                }]; l;) l.isRegion || "global" === l.id || n.push({
                    label: "" + l.component.tipName,
                    data: l.id,
                    disabled: a.getActiveId() === l.id,
                    onSelect: a.select,
                    onHighlight: function(e, t) {
                        return a.hover(e ? t: "")
                    }
                }),
                l = l.parent;
                return n.length && t.push({
                    label: "é€‰ä¸­å±‚çº§",
                    children: n
                }),
                a.getActiveId() && t.push({
                    label: "å–æ¶ˆé€‰ä¸­",
                    onSelect: function() {
                        return e.closeSetting()
                    }
                }),
                t.push("|"),
                t.push({
                    label: "å¤åˆ¶",
                    disabled: !this.can("duplicate"),
                    onSelect: function() {
                        return e.duplicateSelf()
                    }
                }),
                a.isMini || t.push({
                    label: "å‰ªåˆ‡",
                    disabled: !this.can("cut"),
                    onSelect: function() {
                        return e.cutSelf()
                    }
                }),
                t.push({
                    label: "åˆ é™¤",
                    disabled: !this.can("delete"),
                    onSelect: function() {
                        return e.deleteSelf()
                    }
                }),
                t.push("|"),
                t.push({
                    label: "å‘å‰ç§»åŠ¨",
                    disabled: !this.can("moveup"),
                    onSelect: function() {
                        return e.moveUp()
                    }
                }),
                t.push({
                    label: "å‘åŽç§»åŠ¨",
                    disabled: !this.can("movedown"),
                    onSelect: function() {
                        return e.moveDown()
                    }
                }),
                a.isMini || (t.push("|"), t.push({
                    label: "è®¾ç½®",
                    onSelect: function() {
                        return e.openEditForm()
                    }
                }), t.push({
                    label: "æ›´æ”¹ç»„ä»¶ç±»åž‹",
                    disabled: !this.can("replaceable"),
                    onSelect: function() {
                        return e.changeSelf()
                    }
                }), t.push({
                    label: "ä»£ç é…ç½®",
                    onSelect: function() {
                        return e.openEditCode()
                    },
                    disabled: !this.can("code")
                })),
                t
            },
            a.prototype.updateRegion = function(e) {},
            a.prototype.regionRef = function(e, t) {
                this.regions[e] = t
            },
            a.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            a.prototype.renderRenderer = function(e) {
                return i.
            default.createElement(this.Renderer, l.__assign({},
                e, {
                    ref: this.childRef
                }))
            },
            a.prototype.renderPlaceholder = function(e) {
                return i.
            default.createElement("div", {
                    key: e.key,
                    className: "wrapper-sm b-a b-light m-b-sm",
                    "data-editor-id": this.props.$$id,
                    "data-editor-name": this.tipName
                },
                i.
            default.createElement("span", {
                    className: "text-muted"
                },
                this.placeholder))
            },
            a.prototype.renderTip = function() {
                return i.
            default.createElement("div", {
                    key: "tip",
                    className: "ae-Editor-tip"
                },
                this.tipName)
            },
            a.prototype.renderToolbars = function() {
                var e = this,
                t = this.context.editor,
                a = this.toolbarBtns.filter((function(a) {
                    return (!a.test || a.test(e.props, t)) && !1 !== a.visible
                }));
                return i.
            default.createElement("div", {
                    ref: this.toolbarDom,
                    className: "ae-Editor-toolbar",
                    key: "toolbar"
                },
                a.map((function(t) {
                    return i.
                default.createElement("button", {
                        key: t.id,
                        type: "button",
                        draggable: "draggable" === t.id,
                        onDragStart: e.handleToolbarDragStart,
                        "data-id": t.id,
                        "data-tooltip": t.tooltip || void 0,
                        "data-position": t.placement || "bottom",
                        onClick: e.handleToolbarBtnClick
                    },
                    i.
                default.createElement("i", {
                        className: t.icon
                    }))
                })))
            },
            a.prototype.renderSecondaryToolbars = function() {
                return null
            },
            a.prototype.renderButton = function(e, t, a, n) {
                return void 0 === t && (t = ""),
                void 0 === a && (a = "fa fa-plus"),
                i.
            default.createElement("button", l.__assign({},
                n, {
                    onClick: e,
                    "data-tooltip": t,
                    "data-position": "bottom",
                    className: "ae-Button"
                }), i.
            default.createElement("i", {
                    className: a
                }))
            },
            a.prototype.renderBasic = function(e) {
                var t = this,
                a = this.props,
                n = a.$$id,
                o = (a.$$contentMode, a.$$replaceable, a.$$removable, a.$$codeEditable, a.$$movable, a.$$acceptChild, a.$$childenOrder, a.$$draggable, l.__rest(a, ["$$id", "$$contentMode", "$$replaceable", "$$removable", "$$codeEditable", "$$movable", "$$acceptChild", "$$childenOrder", "$$draggable"]));
                if (!1 === e) return this.renderRenderer(o);
                var r = this.context.editor;
                return [this.renderRenderer(l.__assign(l.__assign(l.__assign({},
                o), this.state), {
                    render: this.renderChild,
                    key: "renderer",
                    regionRef: this.regionRef,
                    $editor: this
                })), i.
            default.createElement(s.
            default, {
                    editor: r,
                    id: n,
                    getTarget: this.getTarget,
                    key: "highlit",
                    ref: this.highlightRef,
                    children: function() {
                        return [t.renderTip(), t.renderToolbars(), t.renderSecondaryToolbars()]
                    }
                })]
            },
            a.prototype.render = function() {
                return this.renderBasic()
            },
            a.contextTypes = {
                editor: n.
            default.object,
                editorNode: n.
            default.object
            },
            a.childContextTypes = {
                editorNode: n.
            default.object
            },
            a.propsList = [],
            a.displayName = "BasicEditor",
            a
        } (i.
    default.Component);
        t.
    default = f
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importStar(a(8)),
        n = a(22),
        o = a(3),
        r = a(4),
        s = l.__importDefault(a(11)),
        p = a(1),
        c = a(5),
        d = function(e) {
            function t(t, a) {
                var i = e.call(this, t) || this;
                return i.dropable = !0,
                i.containers = [],
                i.disabledContainers = [],
                i.diyContainer = [],
                i.containerLabels = [],
                i.regionRef = i.regionRef.bind(i),
                i.containers.length && (i.state = l.__assign({},
                i.modifyProps(t, a))),
                i
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                r.anyChanged(this.containers, t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                var a = this;
                void 0 === t && (t = this.context);
                var l = e.$$id,
                i = (e.clipboard, t.editor),
                n = i.getActiveId(),
                r = i.getDropId();
                if (n !== l && r !== l) {
                    var s = {};
                    return this.containers.forEach((function(t) {
                        var l = e[t];
                        void 0 === l && a.regionDefaultNodes[t] ? l = a.regionDefaultNodes[t] : Array.isArray(l) || (l = l ? [l] : l),
                        s[t] = l
                    })),
                    s
                }
                var p = {};
                return this.containers.forEach((function(t, l) {
                    var i = e[t];
                    if (!~a.disabledContainers.indexOf(t)) {
                        void 0 === i && a.regionDefaultNodes[t] && (i = a.regionDefaultNodes[t]);
                        var n = Array.isArray(i) ? i.concat() : i ? [i] : [];
                        n.length || n.push({
                            children: o.createElement("span", null)
                        }),
                        i = n
                    }
                    p[t] = i
                })),
                p
            },
            t.prototype.isDropableRegion = function(e) {
                return !! ~this.containers.indexOf(e)
            },
            t.prototype.updateRegion = function(e) {
                var t = this;
                e ? this.regions[e] && this.regions[e].forceUpdate() : this.containers.forEach((function(e) {
                    return t.regions[e] && t.regions[e].forceUpdate()
                }))
            },
            t.prototype.getContextMenus = function() {
                var t = this,
                a = e.prototype.getContextMenus.call(this),
                l = this.context.editor,
                i = this.props.$$id,
                o = this.containers.filter((function(e) {
                    return t.regions[e] && !~t.disabledContainers.indexOf(e)
                }));
                return o.length > 1 ? (a.push("|"), a.push({
                    label: "æ’å…¥ç»„ä»¶",
                    children: o.map((function(e) {
                        var a = n(t.containers, (function(t) {
                            return t === e
                        }));
                        return {
                            label: "æ’å…¥åˆ°" + (t.containerLabels[a] || e),
                            onSelect: function() {
                                return t.pickChild(e)
                            },
                            onHighlight: function(a) {
                                return t.regions[e] && l.hover(a ? i + "-region-" + e: "")
                            }
                        }
                    }))
                })) : o.length && (a.push("|"), a.push({
                    label: "æ’å…¥ç»„ä»¶",
                    onSelect: function() {
                        return t.pickChild(o[0])
                    }
                })),
                a
            },
            Object.defineProperty(t.prototype, "allSubRenderers", {
                get: function() {
                    return this._allSubRenderers || (this._allSubRenderers = this.getAvaiableSubRenderers()),
                    this._allSubRenderers
                },
                enumerable: !1,
                configurable: !0
            }),
            t.prototype.getAvaiableSubRenderers = function(e) {
                var t = this,
                a = [],
                l = this.props.$path,
                n = e ? [e] : this.containers,
                o = p.editors.filter((function(e) {
                    return ! (!e.name || !e.type) && (!~a.indexOf(e) && ( !! n.some((function(a) {
                        var i = l + "/" + (t.regions2path[a] || a) + "/" + (e.affixPath || e.type),
                        n = c.resolveRenderer(i);
                        return n && n.component === e.renderer && t.acceptChild(e.type, a, e.rendererName)
                    })) && (a.push(e), !0)))
                })).map((function(e) {
                    return {
                        label: e.name,
                        value: e.scaffold || {
                            type: e.type
                        },
                        docLink: e.docLink,
                        previewSchema: e.previewSchema,
                        description: e.description,
                        id: e.rendererName,
                        icon: e.icon,
                        tags: Array.isArray(e.tags) ? e.tags.concat() : e.tags ? [e.tags] : []
                    }
                })),
                s = [];
                return Object.keys(this.childrenSortList).forEach((function(e) {
                    return s.push.apply(s, t.childrenSortList[e])
                })),
                s.push.apply(s, i.defaultChildrenSortList),
                o = o.sort(r.sortByList(s, (function(e) {
                    return e.value.type
                })))
            },
            t.prototype.moveTo = function(e, t, a) {
                var l, i = this.context.editor,
                o = r.normalizeId(this.props.$$id),
                s = i.getSchema(),
                p = r.JSONGetById(s, t);
                s = r.JSONDelete(s, t);
                var c = r.JSONGetById(s, r.normalizeId(o))[e];
                if ((c = Array.isArray(c) ? c.concat() : c ? [c] : []).length && "number" == typeof a) c.splice(a, 0, p);
                else if (c.length && a) {
                    var d = n(c, (function(e) {
                        return e && e.$$id === a
                    }));~d ? c.splice(d, 0, p) : c.push(p)
                } else c.push(p);
                s = r.JSONUpdate(s, o, ((l = {})[e] = c, l)),
                i.update(null, s, void 0, "drop")
            },
            t.prototype.add = function(e, t, a, i) {
                return l.__awaiter(this, void 0, void 0, (function() {
                    var n, o, s, c, d, m, u, h;
                    return l.__generator(this, (function(l) {
                        switch (l.label) {
                        case 0:
                            return n = this.context.editor,
                            o = r.normalizeId(this.props.$$id),
                            s = n.getSchema(),
                            c = r.JSONGetById(s, r.normalizeId(o)),
                            d = c[e],
                            d = Array.isArray(d) ? d.concat() : d ? [d] : [],
                            i ? (null == (m = p.getEditorByName(i)) ? void 0 : m.scaffoldForm) ? [4, n.confirmForm(m.scaffoldForm, a)] : [3, 2] : [3, 2];
                        case 1:
                            if (! (a = l.sent())) return [2];
                            l.label = 2;
                        case 2:
                            return this.onAddNode && (u = this.onAddNode(e, a)) && (a = u),
                            ~t ? d.splice(t, 0, r.JSONPipeIn(a)) : d.push(r.JSONPipeIn(a)),
                            s = r.JSONUpdate(s, o, ((h = {})[e] = d, h)),
                            n.update(null, s, void 0, "drop"),
                            [2]
                        }
                    }))
                }))
            },
            t.prototype.regionRef = function(e, t) {
                this.regions[e] = t
            },
            t.prototype.updateHighlight = function(e) {
                void 0 === e && (e = !1),
                this.highlight && this.highlight[e ? "update": "forceUpdate"]();
                var t = this.regions;
                Object.keys(t).forEach((function(a) {
                    t[a] && t[a][e ? "update": "forceUpdate"]()
                }))
            },
            t.prototype.renderChild = function(e, t, a) {
                void 0 === a && (a = {});
                var i = this.props.$$id,
                n = (this.context.editor, this.props.render),
                r = this.containers.indexOf(e);
                return a.regionRef = this.regionRef,
                !this.dropable || !~r || this.diyContainer && ~this.diyContainer.indexOf(e) ? n(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                })) : o.createElement(s.
            default, {
                    ref: this.regionRef.bind(this, e),
                    name: e,
                    label: this.containerLabels[r],
                    hostId: i,
                    key: a && a.key
                },
                n(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this
                })))
            },
            t
        } (i.
    default);
        t.
    default = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(15);
        a(25);
        var o = l.__importStar(a(1)),
        r = l.__importDefault(a(144)),
        s = a(5),
        p = a(5),
        c = p.utils.isObjectShallowModified,
        d = a(4),
        m = l.__importDefault(a(13)),
        u = l.__importDefault(a(16)),
        h = a(4),
        b = a(21),
        f = a(150),
        y = a(24),
        g = l.__importDefault(a(22)),
        v = a(20),
        N = l.__importDefault(a(151)),
        S = l.__importDefault(a(152)),
        _ = function(e) {
            return e.nodes.length ? {
                label: e.isRegion ? e.props.label || e.props.name: e.tipName,
                value: e.isRegion ? e.props.hostId + "-region-" + e.props.name: e.props.$$id,
                dropable: !!e.isRegion || e.dropable,
                draggable: !e.isRegion && e.can("draggable"),
                children: f(e.nodes.map(_), "value"),
                isRegion: e.isRegion
            }: {
                label: e.isRegion ? e.props.label || e.props.name: e.tipName,
                value: e.isRegion ? e.props.hostId + "-region-" + e.props.name: e.props.$$id,
                dropable: !!e.isRegion || e.dropable,
                draggable: !e.isRegion && e.can("draggable"),
                isRegion: e.isRegion
            }
        },
        x = function(e) {
            return e
        },
        C = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                return a.nodes = [],
                a.mounted = !1,
                a.id = d.guid(),
                a.versionIdIndex = 0,
                a.versionId = 0,
                a.history = [],
                a.dragCache = {},
                a.dragImage = null,
                a.lastMoveAt = 0,
                a.state = {
                    settings: null,
                    value: a.value = d.JSONPipeIn(t.value || {}),
                    outline: a.outline = [],
                    seetingsSize: "normal",
                    clipboard: t.clipboard || d.persistGet("clipboard"),
                    draging: !1
                },
                a.history.push({
                    versionId: a.versionId = a.versionIdIndex++,
                    value: a.value
                }),
                a.handlePreviewResize = a.handlePreviewResize.bind(a),
                a.handleChange = a.handleChange.bind(a),
                a.activeEditor = a.activeEditor.bind(a),
                a.pickRenderer = a.pickRenderer.bind(a),
                a.getRendererCandidates = a.getRendererCandidates.bind(a),
                a.handleDialogClose = a.handleDialogClose.bind(a),
                a.handleDialogConfirm = a.handleDialogConfirm.bind(a),
                a.handleDrawerClose = a.handleDrawerClose.bind(a),
                a.handleDrawerConfirm = a.handleDrawerConfirm.bind(a),
                a.handleEditorHover = a.handleEditorHover.bind(a),
                a.openDialog = a.openDialog.bind(a),
                a.getSchema = a.getSchema.bind(a),
                a.getSettings = a.getSettings.bind(a),
                a.getParentSettings = a.getParentSettings.bind(a),
                a.updateSettings = a.updateSettings.bind(a),
                a.deleteSettings = a.deleteSettings.bind(a),
                a.cutSettings = a.cutSettings.bind(a),
                a.clearClipBoard = a.clearClipBoard.bind(a),
                a.getWidgetsLayer = a.getWidgetsLayer.bind(a),
                a.moveSeetingsUp = a.moveSeetingsUp.bind(a),
                a.moveSeetingsDown = a.moveSeetingsDown.bind(a),
                a.duplicateSettings = a.duplicateSettings.bind(a),
                a.widgetsLayerRef = a.widgetsLayerRef.bind(a),
                a.resolveEditorById = a.resolveEditorById.bind(a),
                a.addNode = a.addNode.bind(a),
                a.removeTo = a.removeTo.bind(a),
                a.handleClick = a.handleClick.bind(a),
                a.getActiveId = a.getActiveId.bind(a),
                a.getHoverId = a.getHoverId.bind(a),
                a.handleMouseMove = a.handleMouseMove.bind(a),
                a.handleMouseLeave = a.handleMouseLeave.bind(a),
                a.refreshSettings = a.refreshSettings.bind(a),
                a.settingsRef = a.settingsRef.bind(a),
                a.previewRef = a.previewRef.bind(a),
                a.selectEditor = a.selectEditor.bind(a),
                a.handleOutlineSelect = a.handleOutlineSelect.bind(a),
                a.getPreviewLayer = a.getPreviewLayer.bind(a),
                a.getWidgetsLayer = a.getWidgetsLayer.bind(a),
                a.syncOutline = b(a.syncOutline.bind(a), 250, {
                    trailing: !0,
                    leading: !1
                }),
                a.handleSettingsSizeToggle = a.handleSettingsSizeToggle.bind(a),
                a.emitChange = a.emitChange.bind(a),
                a.emitChangeLazy = b(a.emitChange, 250, {
                    trailing: !0,
                    leading: !1
                }),
                a.getDragElement = a.getDragElement.bind(a),
                a.getDropId = a.getDropId.bind(a),
                a.setDropId = a.setDropId.bind(a),
                a.getHoverRegion = a.getHoverRegion.bind(a),
                a.getDropRegion = a.getDropRegion.bind(a),
                a.getDragId = a.getDragId.bind(a),
                a.setDragId = a.setDragId.bind(a),
                a.handleDragStart = a.handleDragStart.bind(a),
                a.handleDragEnter = a.handleDragEnter.bind(a),
                a.handleDragOver = a.handleDragOver.bind(a),
                a.handleDragLeave = a.handleDragLeave.bind(a),
                a.handleDrop = a.handleDrop.bind(a),
                a.handleDragEnd = a.handleDragEnd.bind(a),
                a.handleKeyDown = a.handleKeyDown.bind(a),
                a.handleContextMenu = a.handleContextMenu.bind(a),
                a.switchSettingPane = a.switchSettingPane.bind(a),
                a.unSelectEditor = a.unSelectEditor.bind(a),
                a.confirmForm = a.confirmForm.bind(a),
                a.focus = a.focus.bind(a),
                a.undo = a.undo.bind(a),
                a.redo = a.redo.bind(a),
                y.extendsEnv(l.__assign(l.__assign({},
                t.amis_env), {
                    theme: t.theme
                })),
                a
            }
            return l.__extends(t, e),
            t.prototype.getChildContext = function() {
                var e = this.props.theme;
                return {
                    editor: {
                        id: this.id,
                        onMount: this.props.onEditorMount,
                        onUnmount: this.props.onEditorUnMount,
                        getActiveId: this.getActiveId,
                        getHoverId: this.getHoverId,
                        getHoverRegion: this.getHoverRegion,
                        getDropId: this.getDropId,
                        setDropId: this.setDropId,
                        getDragId: this.getDragId,
                        getDropRegion: this.getDropRegion,
                        setDragId: this.setDragId,
                        activeEditor: this.activeEditor,
                        switchSettingPane: this.switchSettingPane,
                        select: this.selectEditor,
                        getSchema: this.getSchema,
                        get: this.getSettings,
                        getParent: this.getParentSettings,
                        update: this.updateSettings,
                        delete: this.deleteSettings,
                        cut: this.cutSettings,
                        clearClipBoard: this.clearClipBoard,
                        pickRenderer: this.pickRenderer,
                        getRendererCandidates: this.getRendererCandidates,
                        hover: this.handleEditorHover,
                        openDialog: this.openDialog,
                        getWidgetsLayer: this.getWidgetsLayer,
                        moveUp: this.moveSeetingsUp,
                        moveDown: this.moveSeetingsDown,
                        duplicate: this.duplicateSettings,
                        syncOutline: this.syncOutline,
                        schemaFilter: this.props.schemaFilter || x,
                        theme: this.props.theme,
                        getDragElement: this.getDragElement,
                        resolveEditorById: this.resolveEditorById,
                        onDragStart: this.handleDragStart,
                        onDragOver: this.handleDragOver,
                        unSelectEditor: this.unSelectEditor,
                        confirmForm: this.confirmForm
                    },
                    editorNode: {
                        add: this.addNode,
                        remove: this.removeTo,
                        component: this,
                        id: "global"
                    },
                    theme: e
                }
            },
            t.prototype.componentDidMount = function() {
                this.props.theme;
                document.addEventListener("keydown", this.handleKeyDown),
                this.mounted = !0,
                this.props.autoFocus && (this.defaultOpenTimer = setTimeout(this.focus, 500))
            },
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                c(t.value, e.value) && c(this.lastValue, e.value, !1, !0) && (this.lastValue = null, this.setState({
                    settings: null,
                    value: this.value = d.JSONPipeIn(e.value || {})
                }))
            },
            t.prototype.componentWillUnmount = function() {
                document.removeEventListener("keydown", this.handleKeyDown),
                this.mounted = !1,
                clearTimeout(this.defaultOpenTimer),
                this.syncOutline.cancel(),
                this.emitChangeLazy.cancel(),
                this.unSensor && this.unSensor()
            },
            t.prototype.focus = function() {
                this.nodes.length && this.nodes[0].active()
            },
            t.prototype.handlePreviewResize = function() {
                var e = this.getActiveId(),
                t = e ? this.resolveEditorById(e) : null;
                t && t.updateHighlight();
                var a = this.getHoverId() ? this.resolveEditorById(this.getHoverId()) : null;
                a && a.updateHighlight()
            },
            t.prototype.resolveEditorById = function(e) {
                var t;
                if (!e) return null;
                for (var a = [this]; a.length;) {
                    var l = a.pop();
                    if (l.props.$$id && l.props.$$id == e) {
                        t = l;
                        break
                    }
                    if (l.isRegion && l.props.hostId + "-region-" + l.props.name == e) {
                        t = l;
                        break
                    }
                    a.push.apply(a, l.nodes)
                }
                return t
            },
            t.prototype.switchSettingPane = function(e) {
                this.settingsInstance.openTab(e)
            },
            t.prototype.handleClick = function(e) {
                if (!e.defaultPrevented && !e.target.closest(".ae-Editor-toolbar")) {
                    var t = e.target.closest("[data-editor-id]");
                    if (t) {
                        var a = t.getAttribute("data-editor-id"),
                        l = this.resolveEditorById(a);
                        l && l.handleClick(e)
                    }
                }
            },
            t.prototype.handleMouseMove = function(e) {
                var t = e.target.closest("[data-editor-id]");
                if (t) {
                    var a = t.getAttribute("data-editor-id"),
                    l = this.resolveEditorById(a);
                    if (!l) return;
                    this.handleEditorHover(a),
                    l.handleHover && l.handleHover(e)
                } else this.handleEditorHover(null)
            },
            t.prototype.handleMouseLeave = function(e) {
                this.handleEditorHover(null)
            },
            t.prototype.addNode = function(e) {~this.nodes.indexOf(e) || (this.nodes.push(e), this.syncOutline())
            },
            t.prototype.removeTo = function(e) {
                var t = this.nodes.indexOf(e);~t && (this.nodes.splice(t, 1), this.syncOutline())
            },
            t.prototype.getWidgetsLayer = function() {
                return this.widgetsLayer
            },
            t.prototype.getPreviewLayer = function() {
                return n.findDOMNode(this.previewInstance)
            },
            t.prototype.getEditorLayout = function() {
                return n.findDOMNode(this)
            },
            t.prototype.widgetsLayerRef = function(e) {
                this.widgetsLayer = e
            },
            t.prototype.settingsRef = function(e) {
                this.settingsInstance = e
            },
            t.prototype.previewRef = function(e) {
                this.previewInstance = e
            },
            t.prototype.refreshSettings = function() {
                this.settingsInstance && this.settingsInstance.forceUpdate()
            },
            t.prototype.selectEditor = function(e, t) {
                void 0 === t && (t = !1);
                var a = this.resolveEditorById(e);
                a && a.openEditForm(t)
            },
            t.prototype.unSelectEditor = function() {
                if (this.getActiveId()) {
                    var e = this.resolveEditorById(this.getActiveId());
                    e && e.closeSetting()
                }
            },
            t.prototype.getSettings = function(e) {
                return e = d.normalizeId(e),
                h.JSONGetById(this.getSchema(), e)
            },
            t.prototype.updateSettings = function(e, t, a, l, i) {
                void 0 === a && (a = !1),
                void 0 === l && (l = ""),
                void 0 === i && (i = !1);
                var n = (e = "string" == typeof e ? d.normalizeId(e) : e) ? h.JSONUpdate(this.getSchema(), e, t, a) : t;
                this.handleChange(n, i, l),
                this.settingsInstance && this.settingsInstance.updateSettings(e, l)
            },
            t.prototype.getParentSettings = function(e, t) {
                return void 0 === t && (t = !1),
                e = d.normalizeId(e),
                h.JSONGetParentById(this.getSchema(), e, t)
            },
            t.prototype.moveSeetingsUp = function(e) {
                e = d.normalizeId(e);
                var t = this.props.onMoveUp;
                t && !1 === t(e) || (this.handleChange(h.JSONMoveUpById(this.getSchema(), e)), this.settingsInstance && this.settingsInstance.updateSettings(e))
            },
            t.prototype.moveSeetingsDown = function(e) {
                e = d.normalizeId(e);
                var t = this.props.onMoveDown;
                t && !1 === t(e) || (this.handleChange(h.JSONMoveDownById(this.getSchema(), e)), this.settingsInstance && this.settingsInstance.updateSettings(e))
            },
            t.prototype.deleteSettings = function(e, t) {
                e = d.normalizeId(e);
                var a = [],
                l = this.props.onDelete;
                return l && !1 === l(e) ? null: (this.handleChange(h.JSONDelete(this.getSchema(), e, a, t)), this.settingsInstance && this.settingsInstance.updateSettings(e), a)
            },
            t.prototype.duplicateSettings = function(e) {
                e = d.normalizeId(e),
                this.handleChange(d.JSONDuplicate(this.getSchema(), e)),
                this.settingsInstance && this.settingsInstance.updateSettings(e)
            },
            t.prototype.cutSettings = function(e, t) {
                var a = this;
                e = d.normalizeId(e);
                var l = this.getSchema(),
                i = h.JSONGetById(l, e);
                this.setState({
                    clipboard: d.JSONPipeOut(i)
                },
                (function() {
                    d.persistSet("clipboard", a.state.clipboard);
                    var i = [];
                    a.handleChange(h.JSONDelete(l, e, i)),
                    a.settingsInstance && a.settingsInstance.updateSettings(e),
                    t && t(i)
                }))
            },
            t.prototype.clearClipBoard = function() {
                var e = this;
                this.setState({
                    clipboard: null
                },
                (function() {
                    d.persistSet("clipboard", e.state.clipboard)
                }))
            },
            t.prototype.getSchema = function() {
                return this.value
            },
            t.prototype.handleChange = function(e, t, a) {
                void 0 === t && (t = !1);
                this.props.onChange;
                this.setState({
                    value: this.value = e
                },
                t ? this.emitChangeLazy.bind(this, a) : this.emitChange.bind(this, a))
            },
            t.prototype.emitChange = function(e) {
                var t = this,
                a = this.props.onChange,
                l = g.
            default(this.history, (function(e) {
                    return e.versionId === t.versionId
                }));~l && this.history.splice(l + 1, this.history.length - l - 1),
                "patch" === e && this.history.pop(),
                this.history.push({
                    versionId: this.versionId = this.versionIdIndex++,
                    value: this.value
                }),
                a(this.lastValue = d.JSONPipeOut(this.value))
            },
            t.prototype.getVersionId = function() {
                return this.versionId
            },
            t.prototype.undo = function() {
                var e = this,
                t = this.props.onChange,
                a = g.
            default(this.history, (function(t) {
                    return t.versionId === e.versionId
                }));
                if (a > 0) {
                    var l = this.history[a - 1];
                    this.versionId = l.versionId,
                    this.value = l.value,
                    this.setState({
                        value: this.value
                    },
                    (function() {
                        t(e.lastValue = d.JSONPipeOut(e.value)),
                        e.settingsInstance && e.settingsInstance.updateSettings(void 0, "undo")
                    }))
                }
            },
            t.prototype.redo = function() {
                var e = this,
                t = this.props.onChange,
                a = g.
            default(this.history, (function(t) {
                    return t.versionId === e.versionId
                }));
                if (a < this.history.length - 1) {
                    var l = this.history[a + 1];
                    this.versionId = l.versionId,
                    this.value = l.value,
                    this.setState({
                        value: this.value
                    },
                    (function() {
                        t(e.lastValue = d.JSONPipeOut(e.value)),
                        e.settingsInstance && e.settingsInstance.updateSettings(void 0, "redo")
                    }))
                }
            },
            t.prototype.confirmForm = function(e, t) {
                return void 0 === t && (t = {}),
                l.__awaiter(this, void 0, void 0, (function() {
                    var a = this;
                    return l.__generator(this, (function(l) {
                        return [2, new Promise((function(l) {
                            a.openDialog(e.title, {
                                type: "form",
                                data: t,
                                controls: e.controls
                            },
                            (function(t) {
                                t = e.onConfirm ? e.onConfirm(t) : t,
                                l(t)
                            }), "md", "dialog", !0, l)
                        }))]
                    }))
                }))
            },
            t.prototype.getActiveId = function() {
                return this.settings ? this.settings.id: ""
            },
            t.prototype.getHoverId = function() {
                return this.hoverId
            },
            t.prototype.getHoverRegion = function() {
                return this.hoverRegion
            },
            t.prototype.getDropId = function() {
                return this.dropId
            },
            t.prototype.setDropId = function(e, t, a) {
                void 0 === t && (t = !1);
                var l = this.dropId,
                i = this.dropRegion,
                n = (e || "").split("-region-"),
                o = n[0],
                r = n[1];
                if (o !== l || i !== r) {
                    var s = l ? this.resolveEditorById(l) : null,
                    p = o ? this.resolveEditorById(o) : null;
                    this.dropId = o,
                    this.dropRegion = r,
                    s && (s.editorWillUpdate(o, l, "drop"), s !== p && s.updateHighlight()),
                    p && (p.editorWillUpdate(o, l, "drop"), p.updateHighlight()),
                    this.setState({
                        dropId: o,
                        dropRegion: r
                    })
                }
            },
            t.prototype.getDropRegion = function() {
                return this.dropRegion
            },
            t.prototype.getDragId = function() {
                return this.dragId
            },
            t.prototype.setDragId = function(e) {
                this.dragId = e
            },
            t.prototype.handleEditorHover = function(e) {
                var t = (e || "").split("-region-"),
                a = t[0],
                l = t[1],
                i = this.hoverId,
                n = this.hoverRegion;
                if (a !== i || l !== n) {
                    this.hoverId = a,
                    this.hoverRegion = l;
                    var o = i ? this.resolveEditorById(i) : null,
                    r = a ? this.resolveEditorById(a) : null;
                    o && (o.updateHighlight(), n && o.updateRegion(n)),
                    r && (r.updateHighlight(), l && r.updateRegion(l))
                }
            },
            t.prototype.activeEditor = function(e, t, a) {
                var i = this;
                void 0 === a && (a = !1);
                var n = this.settings && this.settings.id ? this.settings.id: "",
                o = this.props.onActive,
                r = this.state.settings,
                s = function() {
                    var e = i.settings && i.settings.id ? i.settings.id: "",
                    t = "";
                    if (o && (t = e ? o(e, i.getSettings(e), (function(t) {
                        return i.updateSettings(e, t, !0)
                    })) : o(n)), !1 === t) return i.setState({
                        settings: i.settings = r
                    });
                    var a = n ? i.resolveEditorById(n) : null,
                    l = e ? i.resolveEditorById(e) : null;
                    a && !1 !== a.editorWillUpdate(e, n, "select") && a.updateHighlight(),
                    l && !1 !== l.editorWillUpdate(e, n, "select") && l.updateHighlight()
                };
                e ? t && (a || !this.settings || e !== this.settings.id) && this.setState({
                    settings: this.settings = l.__assign({
                        id: e
                    },
                    t)
                },
                s) : this.setState({
                    settings: this.settings = null
                },
                s)
            },
            t.prototype.getRendererCandidates = function(e, t, a) {
                var l = [],
                i = o.editors.filter((function(a) {
                    if (!a.name || !a.type) return ! 1;
                    if ("function" == typeof t) {
                        if (!t(a.type, e)) return ! 1
                    } else if (t && !~t.indexOf(a.type) || ~l.indexOf(a.type)) return ! 1;
                    var i = p.resolveRenderer(e + "/" + (a.affixPath || a.type));
                    return ! (!i || i.component !== a.renderer) && (l.push(a.type), !0)
                })).map((function(e) {
                    return {
                        label: e.name,
                        value: e.scaffold || {
                            type: e.type
                        },
                        image: e.image,
                        docLink: e.docLink,
                        previewSchema: e.previewSchema,
                        description: e.description,
                        icon: e.icon,
                        tags: Array.isArray(e.tags) ? e.tags.concat() : e.tags ? [e.tags] : []
                    }
                }));
                return a && (i = i.sort(d.sortByList(a, (function(e) {
                    return e.value.type
                })))),
                i
            },
            t.prototype.pickRenderer = function(e, t, a, l, i, n) {
                var o = this.props.onAdd;
                if (!o || !1 !== o(e, t, a, l)) {
                    var r = this.getRendererCandidates(e, i, n);
                    if (r.length) {
                        if (1 === r.length) return l(r[0].value);
                        this.openDialog("è¯·é€‰æ‹©æ¸²æŸ“å™¨ç±»åž‹", {
                            type: "form",
                            mode: "normal",
                            className: "ae-RendereresPicker-form",
                            data: {
                                renderers: r.concat()
                            },
                            controls: [{
                                name: "type",
                                required: !0,
                                validationErrors: {
                                    isRequired: "è¯·ç‚¹å‡»é€‰æ‹©æ¸²æŸ“å™¨ç±»åž‹"
                                },
                                component: S.
                            default
                            }]
                        },
                        (function(e) {
                            return l(e.type)
                        }), "md", "drawer", !0)
                    }
                }
            },
            t.prototype.openDialog = function(e, t, a, n, o, r, s) {
                void 0 === n && (n = "full"),
                void 0 === o && (o = "dialog"),
                void 0 === r && (r = !1),
                t && "form" === t.type && (t = l.__assign(l.__assign({},
                t), {
                    wrapperComponent: "div"
                }));
                var p = [{
                    children: i.
                default.createElement("div", {
                        id: "toolbar-" + this.id,
                        className: "ae-DialogToolbar"
                    })
                },
                {
                    type: "submit",
                    label: "ç¡®è®¤",
                    level: "primary"
                },
                {
                    type: "button",
                    label: "å–æ¶ˆ",
                    actionType: "close"
                }];
                this.setState("drawer" === o ? {
                    drawer: {
                        title: e,
                        body: t,
                        onConfirm: a,
                        onCancel: s,
                        size: n,
                        closeOnEsc: r,
                        actions: p
                    }
                }: {
                    dialog: {
                        title: e,
                        body: t,
                        onConfirm: a,
                        onCancel: s,
                        size: n,
                        closeOnEsc: r,
                        actions: p
                    }
                })
            },
            t.prototype.syncOutline = function() {
                this.mounted && this.setState({
                    outline: this.outline = this.nodes.map(_)
                })
            },
            t.prototype.handleDialogClose = function() {
                var e = this.state.dialog;
                this.setState({
                    dialog: void 0
                },
                (function() {
                    var t;
                    return null === (t = e.onCancel) || void 0 === t ? void 0 : t.call(e)
                }))
            },
            t.prototype.handleDialogConfirm = function(e) {
                var t = e[0],
                a = this.state.dialog;
                this.setState({
                    dialog: void 0
                },
                (function() {
                    return a.onConfirm(t)
                }))
            },
            t.prototype.handleDrawerClose = function() {
                var e = this.state.drawer;
                this.setState({
                    drawer: void 0
                },
                (function() {
                    var t;
                    return null === (t = e.onCancel) || void 0 === t ? void 0 : t.call(e)
                }))
            },
            t.prototype.handleDrawerConfirm = function(e) {
                var t = e[0],
                a = this.state.drawer;
                this.setState({
                    drawer: void 0
                },
                (function() {
                    return a.onConfirm(t)
                }))
            },
            t.prototype.handleOutlineSelect = function(e, t) {
                var a = (e || "").split("-region-"),
                l = a[0];
                a[1];
                this.selectEditor(l, t)
            },
            t.prototype.handleSettingsSizeToggle = function() {
                this.setState({
                    seetingsSize: "large" === this.state.seetingsSize ? "normal": "large"
                })
            },
            t.prototype.getDragElement = function() {
                return this.dragEl
            },
            t.prototype.setDragElement = function(e) {
                this.dragEl = e
            },
            t.prototype.handleDragStart = function(e, t) {
                var a = this;
                void 0 === t && (t = e.target);
                var l = t.getAttribute("data-editor-id");
                if (!l) return e.preventDefault(),
                !1;
                if (this.getDragId()) e.dataTransfer.effectAllowed = "move";
                else {
                    for (var i; t && (l = t.getAttribute("data-editor-id"), !1 === (i = this.resolveEditorById(l)).draggable);) t = t.parentElement.closest("[data-editor-id]");
                    if (!t) return e.preventDefault(),
                    !1;
                    this.dragElRaw = e.target,
                    this.dragEl = t,
                    this.setDragId(l);
                    var n = this.dragImage = document.createElement("div");
                    n.classList.add("ae-DragImage"),
                    n.textContent = null == i ? void 0 : i.tipName,
                    document.body.appendChild(n),
                    e.dataTransfer.setDragImage(n, 0, 0),
                    this.dragData = this.getSettings(l),
                    this.dragRendererId = null == i ? void 0 : i.rendererName,
                    setTimeout((function() {
                        a.handleEditorHover(null),
                        d.addDragingClass(t);
                        var e = a.getActiveId();
                        if (e) {
                            var l = a.resolveEditorById(e);
                            l && l.updateHighlight()
                        }
                        var i = t.parentNode.closest("[data-region-host]");
                        if (i) {
                            var n = i.getAttribute("data-region-host");
                            a.setDropId(n + "-region-" + i.getAttribute("data-region"))
                        }
                        a.setState({
                            draging: !0
                        })
                    }), 4)
                }
            },
            t.prototype.handleDragEnter = function(e) {
                var t = this.dragEl;
                if (delete this.dragCallback, this.lastX = e.clientX, this.lastY = e.clientY, this.lastMoveAt = 0, !t) for (var a = e.dataTransfer.types,
                l = a.length - 1; l >= 0; l--) if (/^dnd\/(.*)$/.test(a[l])) {
                    var i = RegExp.$1;
                    if (n = document.querySelector('[data-dnd-id="' + i + '"]')) {
                        t = n,
                        this.dragRendererId = i.replace(/^ae\-editor\-[^\-]+\-/, "");
                        break
                    }
                }
                if (t) {
                    var n;
                    if (!this.dragEl) if (this.handleEditorHover(null), this.setState({
                        draging: !0
                    }), this.dragData = JSON.parse(t.getAttribute("data-dnd-data")), !this.dropId) if (this.getActiveId()) this.setDropId(this.getActiveId());
                    else(n = e.target.closest("[data-region-host]")) && this.setDropId(n.getAttribute("data-region-host") + "-region-" + n.getAttribute("data-region"));
                    this.dragEl = t,
                    (this.dragElRaw || t).addEventListener("dragend", this.handleDragEnd);
                    var o = this.dragGhost = document.createElement("div");
                    o.classList.add("ae-DragGhost"),
                    o.classList.add("is-ghost"),
                    this.dragCache = {}
                }
            },
            t.prototype.handleDragOver = function(e, t, a) {
                var l, i, n, o, r;
                if (void 0 === t && (t = e.target), void 0 === a && (a = !1), t && this.dragEl && this.dropId && this.state.draging) {
                    e.preventDefault();
                    var s = e.clientX - this.lastX,
                    p = e.clientY - this.lastY,
                    c = Math.max(Math.abs(s), Math.abs(p)),
                    d = Date.now();
                    if (c < 5 && !a) 0 === this.lastMoveAt || (d - this.lastMoveAt > 2e3 ? this.switchRegion(e) : d - this.lastMoveAt > 200 && this.highlightRegion(e));
                    else {
                        this.unhighlightRegion(),
                        this.lastMoveAt = d,
                        this.lastX = e.clientX,
                        this.lastY = e.clientY;
                        for (var m = Math.abs(p) > Math.abs(s), u = t.closest("[data-region]"); u && u.getAttribute("data-region-host") !== this.dropId;) u = u.parentNode.closest("[data-region]");
                        if (u && this.dragGhost) {
                            var h = this.dropRegion,
                            b = u.getAttribute("data-region-host"),
                            f = u.getAttribute("data-region"),
                            y = "editor_" + b,
                            g = this.dragCache[y] ? this.dragCache[y] : this.dragCache[y] = this.resolveEditorById(b);
                            if (g && g.acceptChild(null === (l = this.dragData) || void 0 === l ? void 0 : l.type, f, this.dragRendererId)) {
                                this.setDropId(b + "-region-" + f);
                                var v = g.regions;
                                if (v) {
                                    h && h !== f && v[h].entered && (null === (n = (i = v[h]).handleDragLeave) || void 0 === n || n.call(i, e, this.dragGhost, this.dragData, this.dragRendererId), v[h].entered = !1);
                                    var N = v[f];
                                    N && (N.entered || (N.entered = !0, null === (o = N.handleDragEnter) || void 0 === o || o.call(N, e, this.dragGhost, this.dragData, this.dragRendererId)), null === (r = N.handleDragOver) || void 0 === r || r.call(N, e, this.dragGhost, this.dragData, this.dragRendererId, m), null == g || g.updateHighlight(!0))
                                }
                            }
                        }
                    }
                }
            },
            t.prototype.handleDrop = function(e) {
                var t, a = this,
                l = this.dropId,
                i = this.dropRegion;
                if (l && i) {
                    var n = "editor_" + l,
                    o = this.dragCache[n] ? this.dragCache[n] : this.dragCache[n] = this.resolveEditorById(l),
                    r = o.regions,
                    s = r[i];
                    if (r && s && s.getDropIndex && o.acceptChild(null === (t = this.dragData) || void 0 === t ? void 0 : t.type, i, this.dragRendererId)) {
                        var p = s.getDropIndex(),
                        c = this.dragId,
                        d = this.props,
                        m = d.onAccept,
                        u = d.onMove;
                        if (c) this.dragCallback = function() {
                            u && !1 === u(l, i, p, c) || o.moveTo && o.moveTo(i, c, p, a.dragRendererId)
                        };
                        else {
                            var h = this.dragData;
                            this.dragCallback = function() {
                                m && !1 === m(l, i, p, h) || o.add && o.add(i, p, h, a.dragRendererId)
                            }
                        }
                    }
                }
            },
            t.prototype.handleDragLeave = function(e) {
                var t, a;
                if (this.dragGhost) {
                    var l = this.dropId,
                    i = this.dropRegion;
                    if (l && i) {
                        var n = "editor_" + l,
                        o = this.dragCache[n] ? this.dragCache[n] : this.dragCache[n] = this.resolveEditorById(l),
                        r = o.regions;
                        r[i].entered && (null === (a = (t = r[i]).handleDragLeave) || void 0 === a || a.call(t, e, this.dragGhost, this.dragData, this.dragRendererId), r[i].entered = !1),
                        null == o || o.updateHighlight()
                    }
                    var s = this.dragGhost;
                    s && s.parentNode && s.parentNode.removeChild(s),
                    delete this.dragGhost
                }
            },
            t.prototype.handleDragEnd = function(e) {
                var t, a, l, i = this;
                e.target.removeEventListener("dragend", this.handleDragEnd);
                var n = this.dragId,
                o = n && document.querySelector('[data-editor-id="' + n + '"]');
                o && d.removeDragingClass(o),
                this.setDragId(null);
                var r = this.dropId,
                s = this.dropRegion;
                if (r && s) {
                    var p = "editor_" + r,
                    c = (this.dragCache[p] ? this.dragCache[p] : this.dragCache[p] = this.resolveEditorById(r)).regions;
                    c[s].entered && (null === (a = (t = c[s]).handleDragLeave) || void 0 === a || a.call(t, e, this.dragGhost, this.dragData, this.dragRendererId), c[s].entered = !1)
                }
                this.setDropId("");
                var m = this.dragGhost;
                m && m.parentNode && m.parentNode.removeChild(m),
                delete this.dragEl,
                delete this.dragElRaw,
                delete this.dragGhost,
                this.dragImage && (this.dragImage.remove(), delete this.dragImage),
                null === (l = this.previewInstance) || void 0 === l || l.reset(),
                this.unhighlightRegion(),
                this.setState({
                    draging: !1
                },
                (function() {
                    i.dragCallback && i.dragCallback(),
                    delete i.dragCallback;
                    var e = i.getActiveId();
                    if (e) {
                        var t = "editor_" + e,
                        a = i.dragCache[t] ? i.dragCache[t] : i.dragCache[t] = i.resolveEditorById(e);
                        a && setTimeout((function() {
                            return a.updateHighlight()
                        }), 250)
                    }
                }))
            },
            t.prototype.highlightRegion = function(e) {
                var t = e.target.closest("[data-region-host]");
                this.unhighlightRegion(),
                t && (t.classList.add("is-entering"), this.highlightedRegion = t)
            },
            t.prototype.unhighlightRegion = function() {
                this.highlightedRegion && (this.highlightedRegion.classList.remove("is-entering"), delete this.highlightedRegion)
            },
            t.prototype.switchRegion = function(e) {
                var t = e.target.closest("[data-region-host]");
                t && (this.setDropId(t.getAttribute("data-region-host") + "-region-" + t.getAttribute("data-region")), this.handleDragOver(e, t, !0))
            },
            t.prototype.handleContextMenu = function(e) {
                var t = "",
                a = e.target.closest("[data-editor-id]");
                if (this.getActiveId() && e.target.closest('[data-editor-id="' + this.getActiveId() + '"]')) t = this.getActiveId();
                else if (a) t = this.getHoverId() || a.getAttribute("data-editor-id");
                else {
                    var l = e.target.closest("[data-node-id]");
                    l && (t = l.getAttribute("data-node-id"))
                }
                if (t) {
                    var i = this.resolveEditorById(t);
                    if (i && i.getContextMenus) {
                        var n = i.getContextMenus();
                        Array.isArray(n) && (e.preventDefault(), e.stopPropagation(), n.push("|"), n.push({
                            label: "å…³äºŽå¯è§†åŒ–ç¼–è¾‘å™¨",
                            onSelect: function() {
                                return s.alert("æ¬¢è¿Žä½¿ç”¨ AMIS å¯è§†åŒ–ç¼–è¾‘å™¨ï¼Œåªæƒ³è¯´æ˜Žè¿™ä¸æ˜¯ç³»ç»Ÿèœå•ï¼")
                            }
                        }), s.openContextMenus({
                            x: window.scrollX + e.clientX,
                            y: window.scrollY + e.clientY
                        },
                        n))
                    }
                }
            },
            t.prototype.handleKeyDown = function(e) {
                var t;
                if (! (e.defaultPrevented || this.state.dialog || this.state.drawer)) return "BODY" === e.target.tagName && 90 === e.keyCode && (e.metaKey || e.ctrlKey) && e.shiftKey ? (e.preventDefault(), void this.redo()) : "BODY" === e.target.tagName && 90 === e.keyCode && (e.metaKey || e.ctrlKey) ? (e.preventDefault(), void this.undo()) : void(!this.getActiveId() || !e.target.matches("[data-editor-id]") && (null === (t = this.getEditorLayout()) || void 0 === t ? void 0 : t.contains(e.target)) || (27 === e.keyCode ? (e.preventDefault(), this.unSelectEditor()) : 37 === e.keyCode || 38 == e.keyCode ? (e.preventDefault(), e.metaKey || e.ctrlKey ? this.moveBackward() : e.shiftKey ? this.selectOutside() : this.selectBackward()) : 39 === e.keyCode || 40 == e.keyCode ? (e.preventDefault(), e.metaKey || e.ctrlKey ? this.moveForward() : e.shiftKey ? this.selectInside() : this.selectForward()) : 88 === e.keyCode ? (e.preventDefault(), this.cutActive()) : 86 === e.keyCode ? (e.preventDefault(), this.pasteOnActive()) : 8 === e.keyCode ? this.deleteActive() : 188 === e.keyCode && (e.metaKey || e.ctrlKey) ? (e.preventDefault(), this.openActiveSetting()) : 190 === e.keyCode && (e.metaKey || e.ctrlKey) ? (e.preventDefault(), this.openActiveCode()) : 68 === e.keyCode && (e.metaKey || e.ctrlKey) && (e.preventDefault(), this.duplicateActive())))
            },
            t.prototype.moveBackward = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.moveUp && t.moveUp()
                }
            },
            t.prototype.moveForward = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.moveUp && t.moveDown()
                }
            },
            t.prototype.selectBackward = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.selectBackward && t.selectBackward()
                }
            },
            t.prototype.selectForward = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.selectForward && t.selectForward()
                }
            },
            t.prototype.selectOutside = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.selectOutside && t.selectOutside()
                }
            },
            t.prototype.selectInside = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.selectInside && t.selectInside()
                }
            },
            t.prototype.cutActive = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.cutSelf()
                }
            },
            t.prototype.pasteOnActive = function() {},
            t.prototype.deleteActive = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.deleteSelf()
                }
            },
            t.prototype.openActiveSetting = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.openEditForm && t.openEditForm()
                }
            },
            t.prototype.openActiveCode = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.openEditCode && t.openEditCode(!0)
                }
            },
            t.prototype.duplicateActive = function() {
                var e = this.getActiveId();
                if (e) {
                    var t = this.resolveEditorById(e);
                    t && t.duplicateSelf && t.duplicateSelf()
                }
            },
            t.prototype.renderToolbar = function() {
                var e = this,
                t = this.context.editor;
                if (t) {
                    var a = g.
                default(this.history, (function(t) {
                        return t.versionId === e.versionId
                    }));
                    return i.
                default.createElement(v.Portal, {
                        container: function() {
                            return document.querySelector("#toolbar-" + t.id)
                        }
                    },
                    i.
                default.createElement("button", {
                        type: "button",
                        "data-tooltip": "æ’¤é”€",
                        "data-position": "bottom",
                        onClick: this.undo,
                        disabled: 0 === a
                    },
                    i.
                default.createElement("i", {
                        className: "fa fa-undo"
                    })), i.
                default.createElement("button", {
                        type: "button",
                        "data-tooltip": "é‡åš",
                        "data-position": "bottom",
                        onClick: this.redo,
                        disabled: a >= this.history.length - 1
                    },
                    i.
                default.createElement("i", {
                        className: "fa fa-rotate-right"
                    })))
                }
                return null
            },
            t.prototype.render = function() {
                var e = this.props,
                t = e.preview,
                a = e.pathPrefix,
                n = e.previewClassName,
                c = (e.onChange, e.value, e.className),
                d = e.previewProps,
                u = e.theme,
                h = (e.autoFocus, l.__rest(e, ["preview", "pathPrefix", "previewClassName", "onChange", "value", "className", "previewProps", "theme", "autoFocus"])),
                b = this.state,
                f = b.settings,
                y = b.dialog,
                g = b.drawer,
                v = b.value,
                S = b.seetingsSize,
                _ = b.clipboard;
                return i.
            default.createElement("div", {
                    className: m.
                default("ae-Editor", {
                        preview: t,
                        "ae-Editor-lg": "large" === S
                    },
                    c),
                    onContextMenu: this.handleContextMenu
                },
                i.
            default.createElement("div", {
                    className: "ae-Editor-inner"
                },
                t ? null: i.
            default.createElement(r.
            default, {
                    ref: this.settingsRef,
                    settings: f,
                    onHover: this.handleEditorHover,
                    onSelect: this.handleOutlineSelect,
                    activeId: this.state.draging ? this.state.dropId + (this.state.dropRegion ? "-region-" + this.state.dropRegion: "") : this.getActiveId(),
                    outline: this.state.outline,
                    onSizeToggle: this.handleSettingsSizeToggle,
                    size: S,
                    showDropableNodesOnly: this.state.draging,
                    theme: this.props.theme,
                    $schemaUrl: this.props.$schemaUrl
                }), i.
            default.createElement("div", {
                    className: "ae-Main"
                },
                t ? null: i.
            default.createElement(N.
            default, {
                    activeId: this.getActiveId(),
                    outline: this.state.outline,
                    onSelect: this.handleOutlineSelect,
                    onHover: this.handleEditorHover
                }), i.
            default.createElement(o.
            default, l.__assign({
                    onResize: this.handlePreviewResize,
                    onMouseLeave: this.handleMouseLeave,
                    onMouseMove: this.handleMouseMove,
                    onDragEnter: this.handleDragEnter,
                    onDragOver: this.handleDragOver,
                    onDragLeave: this.handleDragLeave,
                    onDrop: this.handleDrop,
                    onClick: this.handleClick,
                    ref: this.previewRef,
                    editable: !t,
                    getSchema: this.getSchema,
                    schema: v,
                    widgetsLayerRef: this.widgetsLayerRef,
                    pathPrefix: a,
                    className: n,
                    clipboard: _,
                    theme: u
                },
                h, d, {
                    key: v.$$id
                })))), i.
            default.createElement(s.ContextMenu, {
                    theme: u
                }), this.renderToolbar(), p.render({
                    type: "dialog"
                },
                {
                    show: !!y,
                    size: "full",
                    title: null == y ? void 0 : y.title,
                    onClose: this.handleDialogClose,
                    onConfirm: this.handleDialogConfirm,
                    body: null == y ? void 0 : y.body,
                    actions: null == y ? void 0 : y.actions,
                    closeOnEsc: null == y ? void 0 : y.closeOnEsc,
                    bodyClassName: "ae-dialog"
                },
                {
                    seesion: "editor-dialog",
                    theme: u
                }), p.render({
                    type: "drawer",
                    position: "left"
                },
                {
                    show: !!g,
                    title: null == g ? void 0 : g.title,
                    onClose: this.handleDrawerClose,
                    onConfirm: this.handleDrawerConfirm,
                    body: null == g ? void 0 : g.body,
                    actions: null == y ? void 0 : y.actions,
                    closeOnEsc: null == g ? void 0 : g.closeOnEsc
                },
                {
                    seesion: "editor-dialog",
                    theme: u
                }))
            },
            t.defaultProps = {
                value: {
                    title: "æ ‡é¢˜",
                    body: "å†…å®¹"
                },
                pathPrefix: "",
                previewClassName: "",
                theme: "default",
                autoFocus: !0
            },
            t.childContextTypes = {
                editor: u.
            default.object,
                editorNode: u.
            default.object,
                theme: u.
            default.string
            },
            t.contextTypes = {
                editor: u.
            default.object
            },
            t
        } (i.
    default.PureComponent);
        t.
    default = C
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = a(3),
        n = l.__importDefault(a(16)),
        o = a(15),
        r = a(20),
        s = l.__importDefault(a(13)),
        p = a(26),
        c = a(27),
        d = a(4),
        m = a(44),
        u = a(22),
        h = a(5),
        b = r.Portal,
        f = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                a.isRegion = !0,
                a.nodes = [],
                a.entered = !1,
                a.dropPosition = -1,
                a.lastX = 0,
                a.lastY = 0,
                a.addNode = a.addNode.bind(a),
                a.removeTo = a.removeTo.bind(a),
                a.handleAdd = a.handleAdd.bind(a);
                var l = a.addBtn = document.createElement("a");
                return l.className = "ae-AddBtn",
                l.innerHTML = '<svg viewBox="0 0 12 12" class=" icon-plus"><g id="é¡µé¢-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="plus" fill="currentColor" fill-rule="nonzero"><polygon id="path-1" points="6.6 6.6 6.6 12 5.4 12 5.4 6.6 0 6.6 0 5.4 5.4 5.4 5.4 0 6.6 0 6.6 5.4 12 5.4 12 6.6"></polygon></g></g></svg>',
                l.addEventListener("click", a.handleAdd),
                a
            }
            return l.__extends(t, e),
            t.prototype.getChildContext = function() {
                var e = this.props;
                return {
                    editorNode: {
                        isRegion: !0,
                        id: e.hostId + "-region-" + e.name,
                        add: this.addNode,
                        remove: this.removeTo,
                        getNodes: this.getNodes,
                        component: this,
                        parent: this.context.editorNode
                    }
                }
            },
            t.prototype.componentWillMount = function() {
                var e = this.context.editorNode;
                e && e.add(this)
            },
            t.prototype.componentDidMount = function() {
                this.updateHlbox()
            },
            t.prototype.componentDidUpdate = function() {
                this.updateHlbox()
            },
            t.prototype.componentWillUnmount = function() {
                var e = this.context.editorNode;
                e && e.remove(this),
                this.addBtn.removeEventListener("click", this.handleAdd)
            },
            t.prototype.hlDomRef = function(e) {
                this.hlDom = e,
                this.updateHlbox()
            },
            t.prototype.getWrapper = function() {
                var e = o.findDOMNode(this),
                t = this.props.wrapperResolve,
                a = null == e ? void 0 : e.parentElement;
                return e && "function" == typeof t ? a = t(e) : e && "string" == typeof t && (a = e.querySelector(t)),
                a
            },
            t.prototype.updateHlbox = function() {
                var e = this.getWrapper();
                if (e) {
                    var t = this.props,
                    a = t.name,
                    l = t.hostId,
                    i = this.context.editor,
                    n = this.context.editorNode.component,
                    o = i.getActiveId(),
                    r = i.getHoverId(),
                    s = i.getHoverRegion(),
                    d = i.getDropId(),
                    m = i.getDropRegion(),
                    u = i.getDragId();
                    if (!n.disabledContainers || !~n.disabledContainers.indexOf(a)) {
                        var h = l === r && a === s || n.dropable && l === d && m === a,
                        b = l === o && !u || n.dropable && l === d || h;
                        n.disabledContainers && ~n.disabledContainers.indexOf(a) && (b = !1);
                        var f = b && a === m,
                        y = e;
                        if (y.setAttribute("data-region", a), y.setAttribute("data-region-host", l), y.setAttribute("data-renderer", n.rendererName), b ? y.classList.remove("not-active") : y.classList.add("not-active"), f ? y.classList.add("is-dragenter") : y.classList.remove("is-dragenter"), b && !f) {
                            var g = [].slice.call(y.children),
                            v = g.indexOf(this.addBtn);~v && v === g.length - 1 || y.appendChild(this.addBtn)
                        } else this.addBtn.parentElement === y && y.removeChild(this.addBtn)
                    }
                }
                if (this.hlDom && e) {
                    var N = this.context.editor.getWidgetsLayer(),
                    S = e,
                    _ = p(S, N),
                    x = S.getBoundingClientRect(),
                    C = x.height,
                    T = c(S),
                    B = parseInt(T.marginLeft, 10) || 0,
                    O = parseInt(T.marginTop, 10) || 0;
                    this.hlDom.style.cssText += "\n        display: block;\n        width: " + x.width + "px;\n        height: " + C + "px;\n        left: " + (_.left + B) + "px;\n        top: " + (_.top + O) + "px;\n    "
                }
            },
            t.prototype.addNode = function(e) {~this.nodes.indexOf(e) || (this.nodes.push(e), this.context.editor.syncOutline())
            },
            t.prototype.removeTo = function(e) {
                var t = this.nodes.indexOf(e);~t && (this.nodes.splice(t, 1), this.context.editor.syncOutline())
            },
            t.prototype.getNodes = function() {
                return this.nodes.concat()
            },
            t.prototype.getContextMenus = function() {
                var e = this,
                t = this.context.editorNode,
                a = this.context.editor,
                l = t.component,
                i = l.props.clipboard,
                n = this.props.hostId,
                o = this.props.name,
                r = [];
                return r.push({
                    label: "æ’å…¥ç»„ä»¶",
                    onSelect: function() {
                        return l.pickChild(e.props.name)
                    },
                    onHighlight: function(e) {
                        return a.hover(e ? n + "-region-" + o: "")
                    }
                }),
                i && r.push({
                    label: "æ¸…ç©ºå‰ªåˆ‡æ¿",
                    onSelect: function() {
                        return a.clearClipBoard()
                    }
                }),
                r.push({
                    label: "ç²˜è´´",
                    disabled: !(i && l.acceptChild(i.type, this.props.name)),
                    onSelect: function() {
                        return l.addChild(e.props.name, i)
                    }
                }),
                r.push({
                    label: "æ¸…ç©º",
                    onSelect: function() {
                        return l.emptyChild(e.props.name)
                    }
                }),
                r
            },
            t.prototype.handleDragEnter = function(e, t, a) {
                var l = this.context.editorNode;
                m.renderToDom(t, l, this.props.name, a),
                this.wrapper = this.getWrapper();
                var i = this.context.editor;
                this.schema = d.JSONGetById(i.getSchema(), this.props.hostId)
            },
            t.prototype.handleDragLeave = function(e, t, a) {
                m.unRender(t)
            },
            t.prototype.handleAdd = function() {
                this.context.editorNode.component.pickChild(this.props.name)
            },
            t.prototype.handleDragOver = function(e, t, a, l, i) {
                var n = e.clientX,
                o = e.clientY,
                r = this.wrapper,
                s = this.getTarget(e, r),
                p = this.schema,
                c = this.props.name,
                d = Array.isArray(p[c]) ? p[c] : [];
                if (s) {
                    var m = s.getAttribute("data-editor-id"),
                    b = this.getChild(r, s),
                    f = u(d, (function(e) {
                        return e.$$id === m
                    })),
                    y = s.getBoundingClientRect(),
                    g = Array.prototype.indexOf.call(r.children, t),
                    v = Array.prototype.indexOf.call(r.children, b);~g && g > v && (i ? o < y.top + y.height / 2 : n < y.left + y.width / 2) ? (g !== v - 1 && (h.animation.capture(r), r.insertBefore(t, b), h.animation.animateAll(), this.update()), this.dropPosition = f) : (~g && g < v && i ? o > y.top + y.height / 2 : n > y.left + y.width / 2) && (this.dropPosition = f + 1, g !== v + 1 && (h.animation.capture(r), r.insertBefore(t, b.nextSibling), h.animation.animateAll(), this.update()))
                }
                t.parentNode !== r && (this.dropPosition = d.length, h.animation.capture(r), r.appendChild(t), h.animation.animateAll(), this.update()),
                this.lastX = e.clientX,
                this.lastY = e.clientY
            },
            t.prototype.getTarget = function(e, t) {
                for (var a, l, i = e.target.closest("[data-editor-id]"); i;) {
                    if ((null === (a = i.parentElement) || void 0 === a ? void 0 : a.closest("[data-region]")) === t) return i;
                    i = (null === (l = i.parentElement) || void 0 === l ? void 0 : l.closest("[data-editor-id]")) || null
                }
                return null
            },
            t.prototype.getChild = function(e, t) {
                for (var a = t; a && a.parentElement !== e;) a = a.parentElement;
                return a
            },
            t.prototype.getDropIndex = function() {
                return this.dropPosition
            },
            t.prototype.update = function() {
                this.updateHlbox()
            },
            t.prototype.render = function() {
                var e = this.props,
                t = e.name,
                a = e.hostId,
                l = e.children,
                n = e.label,
                o = (e.className, this.context.editor),
                r = this.context.editorNode.component,
                p = o.getActiveId(),
                c = o.getHoverId(),
                d = o.getHoverRegion(),
                m = o.getDropId(),
                u = o.getDropRegion(),
                h = o.getDragId();
                if (r.disabledContainers && ~r.disabledContainers.indexOf(t)) return l;
                var f = a === c && t === d || r.dropable && a === m && u === t,
                y = a === p && !h || r.dropable && a === m || f;
                r.disabledContainers && ~r.disabledContainers.indexOf(t) && (y = !1);
                var g = y && t === u;
                return i.createElement(i.Fragment, null, l, i.createElement("span", {
                    className: "ae-Region-Placeholder"
                }), i.createElement(b, {
                    container: o.getWidgetsLayer
                },
                y ? i.createElement("div", {
                    ref: this.hlDomRef,
                    "data-renderer": r.rendererName,
                    "data-region": t,
                    className: s.
                default("ae-Editor-rhlbox", g ? "is-dragenter": "", f ? "is-highlight": "")
                },
                i.createElement("div", {
                    "data-node-id": a + "-region-" + t,
                    className: "region-tip"
                },
                n)) : null))
            },
            t.contextTypes = {
                editor: n.
            default.object,
                editorNode: n.
            default.object
            },
            t.childContextTypes = {
                editorNode: n.
            default.object
            },
            l.__decorate([d.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "hlDomRef", null),
            t
        } (i.Component);
        t.
    default = f
    },
    function(e, t) {
        e.exports = require("a2c664a")
    },
    function(e, t) {
        e.exports = require("af1cc81")
    },
    function(e, t) {
        e.exports = require("345ea29")
    },
    function(e, t) {
        e.exports = require("3c5b02d")
    },
    function(e, t) {
        e.exports = require("210bd77")
    },
    function(e, t) {
        e.exports = require("c406116")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TextControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(4),
        r = a(12),
        s = a(7),
        p = a(6),
        c = {
            type: "text",
            label: "æ–‡æœ¬",
            name: "text"
        },
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Text",
                t.settingsSchema = {
                    title: "æ–‡æœ¬æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: p([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("hint"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("clearable"), {
                            name: "addOn",
                            label: "å¯ç”¨ addOn",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? o.JSONPipeIn({
                                    label: "æŒ‰é’®",
                                    type: "button"
                                }) : null
                            }
                        },
                        {
                            type: "combo",
                            multiLine: !0,
                            name: "addOn",
                            visibleOn: "data.addOn",
                            controls: [{
                                name: "type",
                                label: "ç±»åž‹",
                                type: "button-group",
                                size: "xs",
                                options: [{
                                    label: "æ–‡æœ¬",
                                    value: "text"
                                },
                                {
                                    label: "æŒ‰é’®",
                                    value: "button"
                                },
                                {
                                    label: "æäº¤",
                                    value: "submit"
                                }]
                            },
                            {
                                name: "label",
                                label: "æ–‡å­—",
                                type: "text",
                                visibleOn: 'this.type === "text"'
                            },
                            {
                                name: "icon",
                                label: "Icon",
                                type: "icon-picker",
                                visibleOn: 'this.type === "text"'
                            },
                            n.getSchemaTplByName("className", {
                                visibleOn: 'this.type === "text"'
                            }), {
                                name: "position",
                                label: "ä½ç½®",
                                type: "button-group",
                                size: "xs",
                                pipeIn: n.defaultValue("right"),
                                options: [{
                                    label: "å·¦è¾¹",
                                    value: "left"
                                },
                                {
                                    label: "å³è¾¹",
                                    value: "right"
                                }]
                            }]
                        }])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [{
                            name: "autoComplete",
                            label: "è‡ªåŠ¨å¡«å……",
                            mode: "inline",
                            className: "w-full",
                            type: "switch",
                            pipeIn: function(e) {
                                return ! 1 !== e
                            },
                            pipeOut: function(e) {
                                return !! e && ""
                            }
                        },
                        n.getSchemaTplByName("options", {
                            visibleOn: "data.autoComplete !== false",
                            description: "è®¾ç½®é€‰é¡¹åŽï¼Œè¾“å…¥æ—¶ä¼šä¸‹æ‹‰è¿™äº›é€‰é¡¹ä¾›ç”¨æˆ·å‚è€ƒã€‚"
                        }), n.getSchemaTplByName("api", {
                            name: "source",
                            label: "é€‰é¡¹èŽ·å–æŽ¥å£",
                            description: "å¯ä»¥é€šè¿‡æŽ¥å£èŽ·å–åŠ¨æ€é€‰é¡¹ï¼Œä¸€æ¬¡æ‹‰å–å…¨éƒ¨ã€‚",
                            visibleOn: "data.autoComplete !== false"
                        }), n.getSchemaTplByName("api", {
                            name: "autoComplete",
                            label: "è‡ªåŠ¨å®ŒæˆæŽ¥å£",
                            description: "æ¯æ¬¡è¾“å…¥æ–°å†…å®¹åŽï¼Œå°†è°ƒç”¨æŽ¥å£ï¼Œæ ¹æ®æŽ¥å£è¿”å›žæ›´æ–°é€‰é¡¹ã€‚å½“å‰ç”¨æˆ·è¾“å…¥å€¼åœ¨ `\\${term}` ä¸­ã€‚",
                            visibleOn: "data.autoComplete !== false"
                        }), n.getSchemaTplByName("multiple", {
                            visibleOn: "data.options || data.source || data.autoComplete"
                        }), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "switch",
                            name: "readOnly",
                            label: "æ˜¯å¦åªè¯»",
                            mode: "inline",
                            className: "w-full"
                        },
                        n.getSchemaTplByName("required"), {
                            type: "switch",
                            name: "trimContents",
                            label: "åŽ»é™¤é¦–å°¾ç©ºç™½",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽï¼Œå°†ä¸å…è®¸ç”¨æˆ·è¾“å…¥å‰åŽç©ºæ ¼"
                        },
                        n.getSchemaTplByName("validations"), n.getSchemaTplByName("validationErrors"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.getSettingsValue = function() {
                var t = e.prototype.getSettingsValue.call(this);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.setSettingsValue = function(t) {
                return e.prototype.setSettingsValue.call(this, r(t, ["formHorizontal", "$$formMode"]))
            },
            t = l.__decorate([i.Editor("text-control", {
                name: "æ–‡æœ¬æ¡†",
                description: "é…ç½®<code>options</code>å¯ä»¥å®žçŽ°é€‰æ‹©é€‰é¡¹ï¼Œæ•ˆæžœåŒ<code>select</code>",
                type: "text",
                tags: ["è¡¨å•é¡¹"],
                scaffold: c,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    c)
                },
                $schema: "https://isuda.baidu.com/schemas/TextControlSchema.json"
            })], t)
        } (s.FormItemEditor);
        t.TextControlEditor = d
    },
    function(e, t) {
        e.exports = require("70cb05e")
    },
    function(e, t) {
        e.exports = require("bcd4f30")
    },
    function(e, t) {
        e.exports = require("7f33406")
    },
    function(e, t) {
        e.exports = require("833ad00")
    },
    function(e, t) {
        e.exports = require("a2d3c6a")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.getEnv = t.extendsEnv = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(5),
        o = l.__importDefault(a(13)),
        r = {
            session: "settings",
            notify: function() {
                for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                return console.log.apply(console, e)
            }
        };
        t.extendsEnv = function(e) {
            e && Object.keys(e).forEach((function(t) {
                return r[t] = e[t]
            }))
        },
        t.getEnv = function() {
            return r
        };
        var s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.handleSubmit = function(e) {
                    return t.props.onChange(e),
                    !1
                },
                t.scopeRef = function(e) {
                    t.scope = e
                },
                t.flush = function() {
                    var e = t.scope.getComponents()[0];
                    e && e.flush()
                },
                t.getValue = function() {
                    var e = t.scope.getComponents()[0];
                    return e ? l.__assign({},
                    e.props.store.data) : {}
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.render = function() {
                var e = this.props,
                t = e.value,
                a = e.schema,
                s = e.popOverContainer,
                p = e.theme;
                return i.
            default.createElement("div", {
                    className: o.
                default("ae-Settings-content", "padder p-t-sm")
                },
                n.render(l.__assign(l.__assign({},
                a), {
                    className: "ae-Settings-form",
                    wrapperComponent: "div",
                    type: "form",
                    title: "",
                    mode: "normal",
                    wrapWithPanel: !1,
                    submitOnChange: !0
                }), {
                    onSubmit: this.handleSubmit,
                    data: t,
                    popOverContainer: s,
                    scopeRef: this.scopeRef
                },
                l.__assign(l.__assign({},
                r), {
                    theme: p
                })))
            },
            t
        } (i.
    default.PureComponent);
        t.
    default = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        a(40),
        a(45),
        a(18),
        a(46),
        a(47),
        a(48),
        a(49),
        a(50),
        a(51),
        a(52),
        a(53),
        a(54),
        a(55),
        a(56),
        a(57),
        a(58),
        a(59),
        a(60),
        a(61),
        a(62),
        a(63),
        a(64),
        a(65),
        a(66),
        a(67),
        a(68),
        a(69),
        a(70),
        a(71),
        a(72),
        a(73),
        a(74),
        a(75),
        a(76),
        a(77),
        a(78),
        a(79),
        a(80),
        a(81),
        a(82),
        a(28),
        a(83),
        a(29),
        a(84),
        a(85),
        a(86),
        a(87),
        a(89),
        a(90),
        a(32),
        a(91),
        a(92),
        a(93),
        a(94),
        a(95),
        a(96),
        a(97),
        a(98),
        a(99),
        a(100),
        a(101),
        a(102),
        a(103),
        a(107),
        a(108),
        a(109),
        a(110),
        a(111),
        a(112),
        a(113),
        a(114),
        a(115),
        a(116),
        a(117),
        a(118),
        a(119),
        a(120),
        a(121),
        a(122),
        a(123),
        a(124),
        a(125),
        a(126),
        a(127),
        a(128),
        a(129),
        a(130),
        a(131),
        a(132),
        a(133),
        a(134),
        a(135),
        a(136),
        a(137),
        a(33),
        a(31),
        a(138),
        a(139),
        a(140),
        a(141),
        a(143)
    },
    function(e, t) {
        e.exports = require("2906347")
    },
    function(e, t) {
        e.exports = require("6d61b6d")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ButtonEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(12),
        s = a(5),
        p = a(2),
        c = l.__importDefault(a(10)),
        d = a(6),
        m = a(4),
        u = {
            type: "button",
            label: "æŒ‰é’®"
        },
        h = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Button",
                t.isInDialog = /(?:\/|^)dialog\/.+$/.test(t.props.$path),
                t.isInDropdown = /(?:\/|^)dropdown-button\/.+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "æŒ‰é’®é…ç½®",
                    controls: [p.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: d([{
                            label: "åç§°",
                            type: "text",
                            name: "label"
                        },
                        {
                            label: "ç±»åž‹",
                            type: "button-group",
                            name: "type",
                            size: "sm",
                            options: [{
                                label: "æŒ‰é’®",
                                value: "button"
                            },
                            {
                                label: "æäº¤",
                                value: "submit"
                            },
                            {
                                label: "é‡ç½®",
                                value: "reset"
                            }]
                        },
                        {
                            label: "æŒ‰é’®è¡Œä¸º",
                            type: "select",
                            name: "actionType",
                            options: [{
                                label: "å¼¹æ¡†",
                                value: "dialog"
                            },
                            {
                                label: "æŠ½å‡ºå¼å¼¹æ¡†ï¼ˆDrawerï¼‰",
                                value: "drawer"
                            },
                            {
                                label: "å‘é€è¯·æ±‚",
                                value: "ajax"
                            },
                            {
                                label: "é¡µé¢è·³è½¬(å•é¡µæ¨¡å¼)",
                                value: "link"
                            },
                            {
                                label: "é¡µé¢è·³è½¬",
                                value: "url"
                            },
                            {
                                label: "åˆ·æ–°ç›®æ ‡",
                                value: "reload"
                            },
                            {
                                label: "å¤åˆ¶å†…å®¹",
                                value: "copy"
                            },
                            {
                                label: "æäº¤",
                                value: "submit"
                            },
                            {
                                label: "é‡ç½®",
                                value: "reset"
                            },
                            {
                                label: "ç¡®è®¤",
                                value: "confirm"
                            },
                            {
                                label: "å–æ¶ˆ",
                                value: "cancel"
                            },
                            {
                                label: "è·³è½¬ä¸‹ä¸€æ¡",
                                value: "next"
                            },
                            {
                                label: "è·³è½¬ä¸Šä¸€æ¡",
                                value: "prev"
                            }]
                        },
                        {
                            type: "text",
                            name: "content",
                            visibleOn: 'data.actionType == "copy"',
                            label: "å¤åˆ¶å†…å®¹æ¨¡æ¿"
                        },
                        {
                            type: "text",
                            name: "target",
                            visibleOn: 'data.actionType == "reload"',
                            label: "æŒ‡å®šåˆ·æ–°ç›®æ ‡",
                            required: !0
                        },
                        {
                            type: "button-group",
                            name: "tooltipPlacement",
                            visibleOn: "data.tooltip || data.disabledTip",
                            label: "æç¤ºä¿¡æ¯ä½ç½®",
                            size: "sm",
                            mode: "inline",
                            className: "w-full",
                            value: "bottom",
                            options: [{
                                label: "ä¸Š",
                                value: "top"
                            },
                            {
                                label: "å³",
                                value: "right"
                            },
                            {
                                label: "ä¸‹",
                                value: "bottom"
                            },
                            {
                                label: "å·¦",
                                value: "left"
                            }]
                        },
                        {
                            visibleOn: 'data.actionType == "dialog"',
                            name: "dialog",
                            value: {
                                title: "å¼¹æ¡†æ ‡é¢˜",
                                body: "<p>å¯¹ï¼Œä½ åˆšåˆšç‚¹å‡»äº†</p>"
                            },
                            children: i.
                        default.createElement(s.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                onClick: t.handleEditDialog.bind(t),
                                block: !0
                            },
                            "é…ç½®å¼¹æ¡†å†…å®¹")
                        },
                        {
                            visibleOn: 'data.actionType == "drawer"',
                            name: "drawer",
                            value: {
                                title: "å¼¹æ¡†æ ‡é¢˜",
                                body: "<p>å¯¹ï¼Œä½ åˆšåˆšç‚¹å‡»äº†</p>"
                            },
                            children: i.
                        default.createElement(s.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                onClick: t.handleEditDrawer.bind(t),
                                block: !0
                            },
                            "é…ç½®æŠ½å‡ºå¼å¼¹æ¡†å†…å®¹")
                        },
                        p.getSchemaTplByName("api", {
                            label: "ç›®æ ‡API",
                            visibleOn: 'data.actionType == "ajax"'
                        }), {
                            visibleOn: 'data.actionType == "ajax"',
                            name: "feedback",
                            children: function(e) {
                                var a = e.onChange,
                                l = e.value;
                                return i.
                            default.createElement("div", {
                                    className: "m-b"
                                },
                                i.
                            default.createElement(s.Button, {
                                    size: "sm",
                                    level: l ? "danger": "info",
                                    onClick: t.handleEditFeedback.bind(t)
                                },
                                "é…ç½®åé¦ˆå¼¹æ¡†å†…å®¹"), l ? i.
                            default.createElement(s.Button, {
                                    size: "sm",
                                    level: "link",
                                    className: "m-l",
                                    onClick: function() {
                                        return a("")
                                    }
                                },
                                "æ¸…ç©ºè®¾ç½®") : null)
                            }
                        },
                        {
                            name: "feedback.visibleOn",
                            label: "æ˜¯å¦å¼¹å‡ºè¡¨è¾¾å¼",
                            type: "text",
                            visibleOn: "this.feedback",
                            autoComplete: !1,
                            description: "è¯·ä½¿ç”¨ JS è¡¨è¾¾å¼å¦‚ï¼š`this.xxx == 1`"
                        },
                        {
                            type: "text",
                            label: "ç›®æ ‡åœ°å€",
                            name: "link",
                            visibleOn: 'data.actionType == "link"'
                        },
                        {
                            type: "text",
                            label: "ç›®æ ‡åœ°å€",
                            name: "url",
                            visibleOn: 'data.actionType == "url"',
                            placeholder: "http://"
                        },
                        {
                            type: "switch",
                            name: "blank",
                            visibleOn: 'data.actionType == "url"',
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¯å¦ç”¨æ–°çª—å£æ‰“å¼€",
                            pipeIn: p.defaultValue(!0)
                        },
                        t.isInDialog ? {
                            visibleOn: 'data.actionType == "submit" || data.type == "submit"',
                            name: "close",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: p.defaultValue(!0),
                            label: "æ˜¯å¦å…³é—­å½“å‰å¼¹æ¡†"
                        }: null, {
                            name: "confirmText",
                            type: "textarea",
                            label: "ç¡®è®¤ä¿¡æ¯",
                            description: "ç‚¹å‡»åŽä¼šå¼¹å‡ºæ­¤å†…å®¹ï¼Œç­‰ç”¨æˆ·ç¡®è®¤åŽæ‰è¿›è¡Œä¹‹åŽçš„æ“ä½œã€‚"
                        },
                        {
                            type: "text",
                            name: "reload",
                            label: "æŒ‡å®šåˆ·æ–°ç›®æ ‡",
                            visibleOn: 'data.actionType != "link" && data.actionType != "url"',
                            description: "æŒ‡å®šç›®æ ‡ç»„ä»¶çš„ <code>name</code> å±žæ€§å€¼ï¼Œå½“å‰åŠ¨ä½œå®ŒæˆåŽåˆ·æ–°ç›®æ ‡ç»„ä»¶ã€‚"
                        },
                        {
                            type: "text",
                            name: "target",
                            visibleOn: 'data.actionType != "reload"',
                            label: "æŒ‡å®šå“åº”ç›®æ ‡",
                            description: "æŒ‡å®šç›®æ ‡ç»„ä»¶çš„ <code>name</code> å±žæ€§å€¼ï¼ŒæŠŠå½“å‰çš„å€¼æäº¤ç»™ç›®æ ‡ç»„ä»¶ï¼Œé»˜è®¤ä¸ºå½“å‰ç»„ä»¶æ‰€åœ¨å®¹å™¨ã€‚"
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [p.getSchemaTplByName("icon"), p.getSchemaTplByName("size"), {
                            label: "å±•ç¤ºæ ·å¼",
                            type: "select",
                            name: "level",
                            hidden: t.isInDropdown,
                            clearable: !1,
                            btnActiveLevel: "",
                            options: [{
                                label: "é»˜è®¤",
                                value: "default",
                                level: "default"
                            },
                            {
                                label: "é“¾æŽ¥",
                                value: "link",
                                level: "link"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "primary",
                                level: "primary"
                            },
                            {
                                label: "æ·¡è‰²",
                                value: "light",
                                level: "light"
                            },
                            {
                                label: "æ·±è‰²",
                                value: "dark",
                                level: "dark"
                            },
                            {
                                label: "æç¤º",
                                value: "info",
                                level: "info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "success",
                                level: "success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "warning",
                                level: "warning"
                            },
                            {
                                label: "ä¸¥é‡",
                                value: "danger",
                                level: "danger"
                            }]
                        },
                        p.getSchemaTplByName("className", {
                            label: "æŒ‰é’® CSS ç±»å",
                            name: "inputClassName"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [p.getSchemaTplByName("ref"), {
                            type: "text",
                            name: "tooltip",
                            hidden: t.isInDropdown,
                            label: "æç¤ºä¿¡æ¯",
                            description: "é¼ æ ‡åœç•™æ—¶å¼¹å‡ºè¯¥æ®µæ–‡å­—"
                        },
                        p.getSchemaTplByName("disabled"), {
                            type: "text",
                            name: "disabledTip",
                            label: "ç¦ç”¨æç¤ºä¿¡æ¯",
                            hidden: t.isInDropdown,
                            description: "æŒ‰é’®è¢«ç¦ç”¨æ—¶ï¼Œé¼ æ ‡åœç•™å¼¹å‡ºè¯¥æ®µæ–‡å­—"
                        },
                        p.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.handleEditDialog = function() {
                var e = this.context.editor,
                t = this.props,
                a = t.$$id,
                n = t.data,
                o = m.JSONPipeOut(e.get(a).dialog);
                e.openDialog("é…ç½®å¼¹æ¡†å†…å®¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        dialog: o
                    },
                    controls: [{
                        name: "dialog",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "dialog"
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(t) {
                    return e.update(a, {
                        dialog: r(m.JSONPipeIn(t.dialog), ["$$edittingDialog"])
                    })
                }), "xl")
            },
            t.prototype.handleEditDrawer = function() {
                var e = this.context.editor,
                t = this.props,
                a = t.$$id,
                n = t.data,
                o = m.JSONPipeOut(e.get(a).drawer);
                e.openDialog("é…ç½®æŠ½å‡ºå¼å¼¹æ¡†å†…å®¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        drawer: o
                    },
                    controls: [{
                        name: "drawer",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "drawer"
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(t) {
                    return e.update(a, {
                        drawer: m.JSONPipeIn(t.drawer)
                    })
                }), "xl")
            },
            t.prototype.handleEditFeedback = function() {
                var e = this.context.editor,
                t = this.props,
                a = t.$$id,
                n = t.data,
                o = m.JSONPipeOut(e.get(a).feedback) || {
                    title: "æ ‡é¢˜",
                    body: "<p>å†…å®¹</p>"
                };
                e.openDialog("é…ç½®åé¦ˆå¼¹æ¡†è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        feedback: o
                    },
                    controls: [{
                        name: "feedback",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "dialog"
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(t) {
                    return e.update(a, {
                        feedback: r(m.JSONPipeIn(t.feedback), ["$$edittingDialog", "type"])
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("button-control", {
                name: "æŒ‰é’®",
                tags: ["è¡¨å•é¡¹"],
                description: "å¯é…ç½®ä¸åŒçš„ä¸»é¢˜å’Œå¤§å°ï¼Œä¹Ÿå¯ä»¥é€šè¿‡é…ç½®æŒ‰é’®è¡Œä¸ºï¼Œå¦‚å¼¹çª—ï¼Œè·³è½¬ï¼Œå‘èµ·è¯·æ±‚ç­‰",
                type: "button",
                scaffold: u,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    u)
                },
                $schema: "https://isuda.baidu.com/schemas/ButtonControlSchema.json"
            })], t)
        } (o.
    default);
        t.ButtonEditor = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ButtonToolbarControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(6),
        r = l.__importDefault(a(8)),
        s = {
            type: "button-toolbar",
            buttons: [{
                type: "button",
                label: "æŒ‰é’®1",
                actionType: "dialog",
                dialog: {
                    title: "ç³»ç»Ÿæç¤º",
                    body: "å¯¹ä½ ç‚¹å‡»äº†"
                }
            },
            {
                type: "button",
                label: "æŒ‰é’®2",
                actionType: "dialog",
                dialog: {
                    title: "ç³»ç»Ÿæç¤º",
                    body: "å¯¹ä½ ç‚¹å‡»äº†"
                }
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "æŒ‰é’®å·¥å…·æ ",
                t.settingsSchema = {
                    title: "å·¥å…·æ é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: o([n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t.containers = ["buttons"],
                t.containerLabels = ["æŒ‰é’®é›†åˆ"],
                t
            }
            return l.__extends(t, e),
            t.prototype.acceptChild = function(t, a, l) {
                return !! ~ ["button", "submit", "reset", "button-group"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.handleAdd = function() {
                this.pickChild("buttons")
            },
            t.prototype.getContextMenus = function() {
                var t = e.prototype.getContextMenus.call(this);
                return t.push({
                    label: "æ·»åŠ æŒ‰é’®",
                    onSelect: this.handleAdd.bind(this)
                }),
                t
            },
            t.prototype.renderRenderer = function(t) {
                return t.buttons && t.buttons.length ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t = l.__decorate([i.Editor("button-toolbar-control", {
                name: "æŒ‰é’®å·¥å…·æ ",
                tags: ["è¡¨å•é¡¹"],
                description: "å¤šä¸ªæŒ‰é’®çš„é›†åˆ",
                type: "button-toolbar",
                scaffold: s,
                icon: "fa fa-stop-circle",
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/ButtonToolbarControlSchema.json"
            })], t)
        } (r.
    default);
        t.ButtonToolbarControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TabEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(9)),
        n = a(3),
        o = a(2),
        r = l.__importDefault(a(11)),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "å¡ç‰‡" + (t.props.index + 1),
                t.containers = ["body"],
                t.containerLabels = ["å†…å®¹åŒº"],
                t.settingsSchema = {
                    title: "é€‰é¡¹å¡é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "title",
                            type: "text",
                            placeholder: "åç§°",
                            required: !0
                        },
                        o.getSchemaTplByName("icon"), {
                            label: "Hash",
                            name: "hash",
                            type: "text",
                            description: "è®¾ç½®åŽï¼Œä¼šåŒæ­¥æ›´æ–°åœ°å€æ çš„ Hashã€‚"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [{
                            type: "switch",
                            name: "unmountOnExit",
                            label: "éšè—æ—¶æ˜¯å¦é”€æ¯",
                            mode: "inline",
                            className: "block",
                            description: "è®¾ç½®ä»¥åŽè¯¥tabæ¯æ¬¡éƒ½ä¼šé‡æ–°æ¸²æŸ“ï¼Œå¯¹äºŽcrudçš„é‡æ–°æ‹‰å–å¾ˆæœ‰ç”¨"
                        },
                        {
                            type: "switch",
                            name: "unmountOnExit",
                            label: "éšè—æ—¶æ˜¯å¦é”€æ¯",
                            mode: "inline",
                            className: "block",
                            description: "è®¾ç½®ä»¥åŽæ‰€æœ‰å­tabæ¯æ¬¡åˆ‡æ¢æ—¶éƒ½ä¼šé‡æ–°æ¸²æŸ“"
                        },
                        o.getSchemaTplByName("visible"), o.getSchemaTplByName("disabled")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(e) {
                var t = this;
                return n.createElement("div", {
                    key: e.key,
                    ref: this.childRef,
                    "data-editor-id": this.props.$$id
                },
                n.createElement(r.
            default, {
                    name: "body",
                    ref: function(e) {
                        return t.regionRef("body", e)
                    },
                    label: "å†…å®¹åŒº",
                    hostId: this.props.$$id
                },
                e.children))
            },
            t.prototype.openEditForm = function() {
                e.prototype.openEditForm.call(this);
                var t = this.context.editorNode;
                t.component.switchTo && t.component.switchTo(this.props.index)
            },
            t
        } (i.
    default);
        t.TabEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TabsEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(4),
        s = l.__importDefault(a(8)),
        p = a(30),
        c = a(5),
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Tabs",
                t.containers = ["tabs"],
                t.settingsSchema = {
                    title: "é€‰é¡¹å¡é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(c.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: function() {
                                    return t.handleAdd()
                                }
                            },
                            "æ–°å¢žå¡ç‰‡"))
                        },
                        {
                            type: "switch",
                            name: "unmountOnExit",
                            label: "éšè—æ—¶æ˜¯å¦é”€æ¯",
                            mode: "inline",
                            className: "block",
                            description: "è®¾ç½®ä»¥åŽæ‰€æœ‰å­tabæ¯æ¬¡åˆ‡æ¢æ—¶éƒ½ä¼šé‡æ–°æ¸²æŸ“"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "tabsMode",
                            label: "æ ·å¼",
                            type: "button-group",
                            size: "sm",
                            mode: "inline",
                            className: "block",
                            pipeIn: o.defaultValue(""),
                            options: [{
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "æ ·å¼1",
                                value: "line"
                            },
                            {
                                label: "æ ·å¼2",
                                value: "card"
                            },
                            {
                                label: "æ ·å¼3",
                                value: "radio"
                            }]
                        },
                        o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            name: "tabClassName",
                            label: "é€‰é¡¹å¡æˆå‘˜ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.handleClick = function(e) {
                e.defaultPrevented || (e.target.closest("[role=tablist]>li") ? (e.preventDefault(), this.active()) : e.target.closest(this.clickIgnoreSelecor) ? e.preventDefault() : (e.stopPropagation(), e.preventDefault(), this.active()))
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    unmountOnExit: !0,
                    mountOnEnter: !0
                }))
            },
            t.prototype.switchTo = function(e) {
                this.renderer && this.renderer.switchTo && this.renderer.switchTo(e)
            },
            t.prototype.getContextMenus = function() {
                var t = this,
                a = e.prototype.getContextMenus.call(this);
                return a.push({
                    label: "æ–°å¢žå¡ç‰‡",
                    onSelect: function() {
                        return t.handleAdd()
                    }
                }),
                a
            },
            t.prototype.handleAdd = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = e.get(t).tabs;
                a = Array.isArray(a) ? a.concat() : a ? [a] : [];
                var l = r.JSONPipeIn({
                    title: "å¡ç‰‡åç§°",
                    body: [{
                        type: "tpl",
                        tpl: "å†…å®¹"
                    }]
                });
                a.push(l),
                e.update(t, {
                    tabs: a
                })
            },
            t = l.__decorate([n.Editor("tabs", {
                name: "é€‰é¡¹å¡(Tabs)",
                description: "é€‰é¡¹å¡ï¼Œå¯ä»¥å°†å†…å®¹åˆ†ç»„ç”¨é€‰é¡¹å¡çš„å½¢å¼å±•ç¤ºï¼Œé™ä½Žç”¨æˆ·ä½¿ç”¨æˆæœ¬ã€‚",
                tags: ["å®¹å™¨"],
                previewSchema: {
                    type: "tabs",
                    className: "text-left m-b-none",
                    tabs: [{
                        title: "åˆ†ç»„A",
                        body: "è¿™æ˜¯åˆ†ç»„Açš„å†…å®¹"
                    },
                    {
                        title: "åˆ†ç»„B",
                        body: "è¿™æ˜¯åˆ†ç»„Bçš„å†…å®¹"
                    },
                    {
                        title: "åˆ†ç»„C",
                        body: "è¿™æ˜¯åˆ†ç»„Cçš„å†…å®¹"
                    }]
                },
                type: "tabs",
                scaffold: {
                    type: "tabs",
                    tabs: [{
                        title: "é€‰é¡¹å¡1",
                        body: "å†…å®¹1"
                    },
                    {
                        title: "é€‰é¡¹å¡2",
                        body: "å†…å®¹2"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/TabsSchema.json"
            },
            {
                renderTabs: function() {
                    var e = this.super(),
                    t = e.props.children,
                    a = this.props.tabs;
                    return this.props.$editor && Array.isArray(t) && Array.isArray(a) && (t = t.map((function(e, t) {
                        return e ? i.
                    default.cloneElement(e, {
                            children: i.
                        default.createElement(p.TabEditor, l.__assign({},
                            a[t], {
                                $$replaceable: !1,
                                eventKey: e.props.eventKey,
                                index: t,
                                key: "outter-" + t
                            }), e.props.children)
                        }) : null
                    })), e = i.
                default.cloneElement(e, {
                        children: t
                    })),
                    e
                }
            })], t)
        } (s.
    default);
        t.TabsEditor = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ServiceEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(4),
        s = a(5),
        p = l.__importDefault(a(11)),
        c = l.__importDefault(a(9)),
        d = {
            type: "service",
            body: "å†…å®¹"
        },
        m = function(e) {
            function t(t, a) {
                var n = e.call(this, t, a) || this;
                n.tipName = "Service",
                n.dropable = !0,
                n.isFormItem = /\/control\/\w+$/.test(n.props.$path),
                n.settingsSchema = {
                    title: "æœåŠ¡é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [n.isFormItem ? {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "xs",
                            pipeIn: o.defaultValue("form"),
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }]
                        }: null, {
                            children: i.
                        default.createElement(s.Button, {
                                size: "sm",
                                level: "info",
                                className: "m-b",
                                onClick: function() {
                                    return "form" === n.state.$$mode ? n.pickChild("controls") : n.pickChild("body")
                                },
                                block: !0
                            },
                            "æ–°å¢žå†…å®¹")
                        },
                        {
                            type: "divider"
                        },
                        o.getSchemaTplByName("api", {
                            label: "æ•°æ®æŽ¥å£"
                        }), o.getSchemaTplByName("initFetch"), {
                            name: "interval",
                            label: "å®šæ—¶åˆ·æ–°é—´éš”",
                            visibleOn: "this.api",
                            type: "number",
                            step: 500,
                            description: "è®¾ç½®åŽå°†è‡ªåŠ¨å®šæ—¶åˆ·æ–°ï¼Œå•ä½ ms"
                        },
                        {
                            name: "silentPolling",
                            label: "é™é»˜åŠ è½½",
                            mode: "inline",
                            className: "block",
                            type: "switch",
                            visibleOn: "!!data.interval",
                            description: "è®¾ç½®è‡ªåŠ¨å®šæ—¶åˆ·æ–°æ˜¯å¦æ˜¾ç¤ºåŠ è½½åŠ¨ç”»"
                        },
                        {
                            name: "stopAutoRefreshWhen",
                            label: "åœæ­¢å®šæ—¶åˆ·æ–°æ£€æµ‹",
                            type: "text",
                            visibleOn: "!!data.interval",
                            description: "å®šæ—¶åˆ·æ–°ä¸€æ—¦è®¾ç½®ä¼šä¸€ç›´åˆ·æ–°ï¼Œé™¤éžç»™å‡ºè¡¨è¾¾å¼ï¼Œæ¡ä»¶æ»¡è¶³åŽåˆ™ä¸åˆ·æ–°äº†ã€‚"
                        },
                        {
                            type: "divider"
                        },
                        o.getSchemaTplByName("api", {
                            name: "schemaApi",
                            label: "å†…å®¹ Schema æŽ¥å£"
                        }), {
                            type: "divider"
                        },
                        o.getSchemaTplByName("initFetch", {
                            name: "initFetchSchema",
                            visibleOn: "data.schemaApi",
                            label: "åˆå§‹æ˜¯å¦æ‹‰å–å†…å®¹ Schema æŽ¥å£"
                        }), {
                            label: "é»˜è®¤æ¶ˆæ¯ä¿¡æ¯",
                            type: "combo",
                            name: "messages",
                            multiLine: !0,
                            description: "è®¾ç½® service é»˜è®¤æç¤ºä¿¡æ¯ï¼Œå½“ service æ²¡æœ‰è¿”å›ž msg ä¿¡æ¯æ—¶æœ‰ç”¨ï¼Œå¦‚æžœ service è¿”å›žæºå¸¦äº† msg å€¼ï¼Œåˆ™è¿˜æ˜¯ä»¥ service è¿”å›žä¸ºä¸»",
                            controls: [{
                                label: "èŽ·å–æˆåŠŸ",
                                type: "text",
                                name: "fetchSuccess"
                            },
                            {
                                label: "èŽ·å–å¤±è´¥",
                                type: "text",
                                name: "fetchFailed"
                            }]
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("name"), o.getSchemaTplByName("visible")]
                    }])
                },
                n.schemaCaches = {},
                n.containers = ["body", "controls"],
                n.containerLabels = ["å†…å®¹åŒº", "å­è¡¨å•"],
                n.regions2path = {
                    controls: "control"
                };
                var r = t.controls ? "form": "other";
                return n.disabledContainers = "form" === r ? ["body"] : ["controls"],
                n.state = l.__assign(l.__assign({},
                n.modifyProps(t, a, r)), {
                    $$mode: r
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                return t.body && (!Array.isArray(t.body) || t.body.length) || t.controls && (!Array.isArray(t.controls) || t.controls.length) || t.schemaApi ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.props.$$id,
                a = this.context.editor,
                i = l.__assign(l.__assign({},
                a.get(t)), e),
                n = i.$$mode;
                return delete i.$$mode,
                delete i.$$formMode,
                "form" === n ? (this.schemaCaches.other = i.body, delete i.body, this.state.$$mode !== n && (i.controls = this.schemaCaches[n] || [{
                    type: "text",
                    label: "æ–‡æœ¬",
                    name: "var1"
                }])) : (this.schemaCaches.form = i.controls, delete i.controls, this.state.$$mode !== n && (i.body = this.schemaCaches[n] || [{
                    type: "tpl",
                    tpl: "å†…å®¹",
                    inline: !1
                }])),
                this.disabledContainers = "form" === n ? ["body"] : ["controls"],
                this.mounted && this.setState({
                    $$mode: n
                }),
                a.update(t, r.JSONPipeIn(i), !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    $$mode: this.state.$$mode || "form",
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t = l.__decorate([n.Editor("service-control", {
                name: "æœåŠ¡(Service)",
                description: "åŠŸèƒ½åž‹å®¹å™¨ï¼Œè‡ªèº«ä¸è´Ÿè´£å±•ç¤ºå†…å®¹ï¼Œä¸»è¦èŒè´£åœ¨äºŽé€šè¿‡é…ç½®çš„ <code>api</code> æ‹‰å–æ•°æ®ï¼Œæ•°æ®å¯ç”¨äºŽå­ç»„ä»¶ã€‚é€šè¿‡<code>schemaApi</code>æ‹‰å–è¿œç¨‹<code>schema</code>æ¸²æŸ“åœ¨å½“å‰é¡µé¢",
                type: "service",
                tags: ["è¡¨å•é¡¹"],
                scaffold: d,
                $schema: "https://isuda.baidu.com/schemas/ServiceControlSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.controls,
                    n = this.super.apply(this, e),
                    o = this.props.regionRef;
                    return i.
                default.createElement(p.
                default, {
                        key: l ? "controls": "body",
                        ref: function(e) {
                            return o(l ? "controls": "body", e)
                        },
                        name: l ? "controls": "body",
                        label: l ? "å­è¡¨å•": "å†…å®¹",
                        hostId: a.props.$$id
                    },
                    n)
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (c.
    default);
        t.ServiceEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.mockValue = t.TableEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = a(4),
        p = a(4),
        c = a(104),
        d = l.__importDefault(a(9)),
        m = l.__importDefault(a(105)),
        u = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "è¡¨æ ¼",
                t.isCRUDBody = /\/crud\/body\/table$/.test(t.props.$path),
                t.dropable = !0,
                t.containers = ["header", "columns", "footer"],
                t.containerLabels = ["é¡¶éƒ¨", "åˆ—", "åº•éƒ¨"],
                t.childrenSortList = {
                    columns: ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"]
                },
                t.handleAdd = function() {
                    return t.pickChild("columns")
                },
                t.settingsSchema = {
                    title: "è¡¨æ ¼é…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isCRUDBody ? {
                            type: "alert",
                            body: "å½“å‰é€‰æ‹©ä¸ºã€Œå¢žåˆ æ”¹æŸ¥ã€ä¸‹é¢çš„ã€Œè¡¨æ ¼è®¾ç½®ã€ï¼Œåˆ‡æ¢åˆ°ä¸Šå±‚èŠ‚ç‚¹ã€Œå¢žåˆ æ”¹æŸ¥ã€è¿˜æœ‰æ›´å¤šé…ç½®ã€‚"
                        }: null, {
                            name: "title",
                            type: "text",
                            label: "æ ‡é¢˜"
                        },
                        t.isCRUDBody ? null: {
                            name: "source",
                            type: "text",
                            label: "æ•°æ®æº",
                            pipeIn: r.defaultValue("${items}"),
                            description: "ç»‘å®šå½“å‰çŽ¯å¢ƒå˜é‡"
                        },
                        {
                            name: "combineNum",
                            label: "è‡ªåŠ¨åˆå¹¶å•å…ƒæ ¼",
                            type: "number",
                            placeholder: "è®¾ç½®åˆ—æ•°",
                            description: "è®¾ç½®ä»Žå·¦åˆ°å³å¤šå°‘åˆ—å†…å¯ç”¨è‡ªåŠ¨åˆå¹¶å•å…ƒæ ¼ï¼Œæ ¹æ®å­—æ®µå€¼æ˜¯å¦ç›¸åŒæ¥å†³å®šæ˜¯å¦åˆå¹¶ã€‚"
                        },
                        {
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(o.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: t.handleAdd
                            },
                            "æ–°å¢žä¸€åˆ—"))
                        },
                        {
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(o.Button, {
                                level: "success",
                                size: "sm",
                                block: !0,
                                onClick: t.handleColumnsQuickEdit.bind(t)
                            },
                            "å¿«é€Ÿç¼–è¾‘åˆ—ä¿¡æ¯"))
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "columnsTogglable",
                            label: "å±•ç¤ºåˆ—æ˜¾ç¤ºå¼€å…³",
                            type: "button-group",
                            pipeIn: r.defaultValue("auto"),
                            mode: "inline",
                            className: "w-full",
                            size: "xs",
                            options: [{
                                label: "è‡ªåŠ¨",
                                value: "auto"
                            },
                            {
                                label: "å¼€å¯",
                                value: !0
                            },
                            {
                                label: "å…³é—­",
                                value: !1
                            }],
                            description: "è‡ªåŠ¨å³åˆ—æ•°é‡å¤§äºŽ5ä¸ªæ—¶è‡ªåŠ¨å¼€å¯"
                        },
                        {
                            name: "affixHeader",
                            type: "switch",
                            label: "æ˜¯å¦å›ºé¡¶è¡¨å¤´",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            name: "showHeader",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¯å¦æ˜¾ç¤ºå¤´éƒ¨",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            name: "showFooter",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¯å¦æ˜¾ç¤ºåº•éƒ¨",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            name: "footable",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¯å¦å¼€å¯å•æ¡åº•éƒ¨å±•ç¤º",
                            description: "å¦‚æžœåˆ—å¤ªå¤šæ˜¾ç¤ºä¼šå¾ˆè‡ƒè‚¿ï¼Œå¯ä»¥è€ƒè™‘æŠŠéƒ¨åˆ†åˆ—æ”¾åœ¨å½“å‰è¡Œçš„åº•éƒ¨å±•ç¤º",
                            pipeIn: function(e) {
                                return !! e
                            }
                        },
                        {
                            name: "footable.expand",
                            type: "button-group",
                            size: "xs",
                            visibleOn: "data.footable",
                            label: "åº•éƒ¨é»˜è®¤å±•å¼€",
                            pipeIn: r.defaultValue("none"),
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                label: "ç¬¬ä¸€æ¡",
                                value: "first"
                            },
                            {
                                label: "æ‰€æœ‰",
                                value: "all"
                            },
                            {
                                label: "ä¸å±•å¼€",
                                value: "none"
                            }]
                        },
                        {
                            name: "placeholder",
                            pipeIn: r.defaultValue("æš‚æ— æ•°æ®"),
                            type: "text",
                            label: "æ— æ•°æ®æç¤º"
                        },
                        r.getSchemaTplByName("className", {
                            label: "å¤–å±‚ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "tableClassName",
                            label: "è¡¨æ ¼ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "é¡¶éƒ¨å¤–å±‚ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "footerClassName",
                            label: "åº•éƒ¨å¤–å±‚ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "toolbarClassName",
                            label: "å·¥å…·æ  CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.handleColumnsQuickEdit = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = p.JSONPipeOut(e.get(t).columns),
                l = e.getRendererCandidates("table/cell/0/0", s.blackList(["form", "button", "submit", "reset", "table", "crud", "divider", "grid", "hbox", "page", "wizard"]), ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"]);
                l.push({
                    label: "çº¯æ–‡æœ¬",
                    value: {
                        type: "text"
                    }
                }),
                e.openDialog("å¿«é€Ÿç¼–è¾‘åˆ—ä¿¡æ¯", {
                    type: "form",
                    mode: "normal",
                    data: {
                        columns: a
                    },
                    controls: [{
                        name: "columns",
                        type: "combo",
                        multiple: !0,
                        label: !1,
                        addButtonText: "æ–°å¢žä¸€åˆ—",
                        draggable: !0,
                        controls: [{
                            type: "text",
                            name: "label",
                            placeholder: "æ ‡é¢˜"
                        },
                        {
                            type: "text",
                            name: "name",
                            placeholder: "ç»‘å®šå­—æ®µå"
                        },
                        {
                            type: "select",
                            name: "type",
                            placeholder: "ç±»åž‹",
                            value: "text",
                            options: l.map((function(e) {
                                return {
                                    label: e.label,
                                    value: e.value.type
                                }
                            }))
                        }]
                    }]
                },
                (function(a) {
                    return e.update(t, p.JSONPipeIn({
                        columns: p.JSONPipeIn(a.columns)
                    }))
                }))
            },
            t.prototype.handleHover = function(e) {
                e.preventDefault(),
                e.stopPropagation();
                var t = this.context.editor,
                a = e.target.closest("td");
                if (a) {
                    for (var l = a.closest("tbody").previousSibling.children[0], i = -1, n = 0, o = l.children.length; n < o; n++) {
                        var r = l.children[n].getBoundingClientRect();
                        if (r.left < e.clientX && e.clientX < r.right) {
                            i = n;
                            break
                        }
                    }
                    var s = l.children[i],
                    p = s ? s.getAttribute("data-editor-id") : "";
                    p ? t.hover(p) : t.hover(this.props.$$id)
                }
            },
            t.prototype.handleClick = function(t) {
                if (!t.defaultPrevented) {
                    var a = this.context.editor,
                    l = t.target.closest("td");
                    if (l) {
                        for (var i = l.closest("tbody").previousSibling.children[0], n = -1, o = 0, r = i.children.length; o < r; o++) {
                            var s = i.children[o].getBoundingClientRect();
                            if (s.left < t.clientX && t.clientX < s.right) {
                                n = o;
                                break
                            }
                        }
                        var p = i.children[n],
                        c = p ? p.getAttribute("data-editor-id") : "";
                        if (c) return t.preventDefault(),
                        t.stopPropagation(),
                        a.select(c)
                    }
                    e.prototype.handleClick.call(this, t)
                }
            },
            t.prototype.renderChild = function(t, a, l) {
                return "cell" === a.type && (a = p.JSONPipeOut(a, !0)),
                e.prototype.renderChild.call(this, t, a, l)
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    affixHeader: !1,
                    affixColumns: !1
                }))
            },
            t.prototype.getContextMenus = function() {
                var t = e.prototype.getContextMenus.call(this);
                return t.push({
                    label: "æ’å…¥ä¸€åˆ—",
                    onSelect: this.handleAdd
                }),
                t
            },
            t.prototype.emptyChild = function(e) {
                var t, a = this.props.$$id;
                this.context.editor.update(a, ((t = {})[e] = [], t))
            },
            t.prototype.onAddNode = function(e, t) {
                if ("columns" === e) return l.__assign(l.__assign({},
                t), {
                    label: "åˆ—è¯´æ˜Ž"
                })
            },
            t = l.__decorate([n.Editor("table", {
                name: "è¡¨æ ¼(Table)",
                description: "ç”¨æ¥å±•ç¤ºè¡¨æ ¼æ•°æ®ï¼Œå¯ä»¥é…ç½®åˆ—ä¿¡æ¯ï¼Œç„¶åŽå…³è”æ•°æ®ä¾¿èƒ½å®Œæˆå±•ç¤ºã€‚æ”¯æŒåµŒå¥—ã€è¶…çº§è¡¨å¤´ã€åˆ—å›ºå®šã€è¡¨å¤´å›ºé¡¶ã€åˆå¹¶å•å…ƒæ ¼ç­‰ç­‰ã€‚å½“å‰ç»„ä»¶éœ€è¦é…ç½®æ•°æ®æºï¼Œä¸è‡ªå¸¦æ•°æ®æ‹‰å–ï¼Œè¯·ä¼˜å…ˆä½¿ç”¨ ã€ŒCRUDã€ ç»„ä»¶ã€‚",
                previewSchema: {
                    type: "table",
                    className: "text-left m-b-none",
                    affixHeader: !1,
                    items: [{
                        a: 1,
                        b: 2
                    },
                    {
                        a: 3,
                        b: 4
                    },
                    {
                        a: 5,
                        b: 6
                    }],
                    columns: [{
                        label: "A",
                        name: "a"
                    },
                    {
                        label: "B",
                        name: "b"
                    }]
                },
                type: "table",
                icon: "fa fa-table",
                scaffold: {
                    type: "table",
                    columns: [{
                        label: "åˆ—ä¿¡æ¯"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/TableSchema.json"
            },
            {
                renderTableContent: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.super.apply(this, e),
                    l = this.props.$editor;
                    if (!l) return a;
                    var n = l.regionRef;
                    return i.
                default.createElement(m.
                default, {
                        ref: function(e) {
                            return n("columns", e)
                        },
                        name: "columns",
                        label: "åˆ—é›†åˆ",
                        hostId: l.props.$$id
                    },
                    this.super.apply(this, e))
                },
                renderHeadCell: function(e, t) {
                    var a = this.super(e, t);
                    return this.props.$editor && e.pristine.$$id ? i.
                default.createElement(c.TableCellEditor, l.__assign({
                        index: e.index
                    },
                    e.pristine, t, {
                        store: this.props.store,
                        column: e,
                        th: a,
                        key: e.pristine.$$id
                    })) : a
                }
            })], t)
        } (d.
    default);
        t.TableEditor = u;
        var h = Math.round(Date.now() / 1e3);
        t.mockValue = function(e, t) {
            return void 0 === e && (e = "å†…å®¹ç¤ºä¾‹", "image" === t ? e = "": ~ ["date", "datetime", "time"].indexOf(t) ? e = h: "progress" === t ? e = 85.6 : "status" === t ? e = !0 : "operation" === t && (e = "")),
            e
        }
    },
    function(e, t) {
        e.exports = require("a26dc27")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = l.__importDefault(a(146)),
        o = a(4),
        r = l.__importDefault(a(13)),
        s = a(5),
        p = a(1),
        c = a(21),
        d = a(147),
        m = /^https\:\/\/isuda\.baidu\.com\/schemas\/(.*).json$/;
        function u(e, t) {
            var a = p.getEditors(),
            l = [];
            var i = {};
            return a.forEach((function(e) {
                e.$schema && (i[e.$schema] = i[e.$schema] || [], i[e.$schema].push(e.type))
            })),
            Object.keys(i).forEach((function(a) {
                if (m.test(a)) {
                    var i = RegExp.$1,
                    n = e.Uri.parse("isuda://schemas/" + i + ".json"),
                    o = "https://isuda.baidu.com/schemas/" + i + ".json";
                    l.push({
                        uri: o,
                        fileMatch: [n.toString()],
                        schema: {
                            $schema: "http://json-schema.org/draft-07/schema#",
                            $ref: t + "#/definitions/" + i
                        }
                    })
                }
            })),
            {
                schemas: l
            }
        }
        var h = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    value: t.props.value,
                    contents: t.obj2str(t.props.value, t.props)
                },
                t.emitChange = c((function() {
                    var e = t.props,
                    a = e.onChange,
                    l = e.value,
                    i = t.str2obj(t.state.contents);
                    if (i) {
                        delete i.$schema,
                        i = o.JSONMerge(t.state.value, i),
                        i = o.JSONPipeIn(i);
                        var n = s.utils.difference(i, t.lastResult || l);
                        t.lastResult = i,
                        a(i, n)
                    }
                }), 250, {
                    trailing: !0,
                    leading: !1
                }),
                t.editorFactory = function(e, a, i) {
                    return t.model = a.editor.createModel(t.state.contents, "json", a.Uri.parse(t.getFileUri())),
                    a.editor.create(e, l.__assign(l.__assign({
                        autoIndent: !0,
                        formatOnType: !0,
                        formatOnPaste: !0,
                        selectOnLineNumbers: !0,
                        scrollBeyondLastLine: !1,
                        folding: !0,
                        minimap: {
                            enabled: !1
                        }
                    },
                    i), {
                        model: t.model
                    }))
                },
                t.editorDidMount = function(e, a) {
                    t.editor = e,
                    t.monaco = a;
                    var l = u(a, t.props.$schemaUrl || window.location.protocol + "//" + window.location.host + "/schema.json").schemas;
                    a.languages.json.jsonDefaults.setDiagnosticsOptions({
                        schemas: l,
                        validate: !0,
                        enableSchemaRequest: !0,
                        allowComments: !0
                    })
                },
                t.editorWillUnmount = function(e, a) {
                    var l;
                    null === (l = t.model) || void 0 === l || l.dispose()
                },
                t.handleChange = function(e) {
                    t.setState({
                        contents: e
                    },
                    t.emitChange)
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                t.$schema !== e.$schema && this.changeModel(e),
                o.isObjectShallowModified(t.value, e.value) && o.isObjectShallowModified(this.lastResult, e.value) && this.setState({
                    value: e.value,
                    contents: this.obj2str(e.value, e)
                })
            },
            t.prototype.obj2str = function(e, t) {
                return delete(e = l.__assign({
                    type: "page"
                },
                e)).$schema,
                e = o.JSONPipeOut(e),
                d.stringify(e)
            },
            t.prototype.str2obj = function(e) {
                try {
                    return d.parse(e)
                } catch(e) {
                    return null
                }
            },
            t.prototype.getFileUri = function(e) {
                void 0 === e && (e = this.props);
                var t = e.$schema,
                a = "isuda://schemas/PageSchema.json";
                return t && m.test(t) && (a = "isuda://schemas/" + RegExp.$1 + ".json"),
                a
            },
            t.prototype.changeModel = function(e) {
                void 0 === e && (e = this.props);
                var t = this.model,
                a = this.monaco,
                l = a.editor.createModel(t.getValue(), "json", a.Uri.parse(this.getFileUri(e)));
                this.model = l,
                t.dispose(),
                this.editor.setModel(l)
            },
            t.prototype.render = function() {
                var e = this.props,
                t = (e.value, e.onChange, e.disabled),
                a = e.className,
                l = e.theme;
                return i.
            default.createElement(n.
            default, {
                    className: r.
                default("amis-code-editor", a),
                    value: this.state.contents,
                    onChange: this.handleChange,
                    language: "json",
                    theme: l,
                    editorDidMount: this.editorDidMount,
                    editorFactory: this.editorFactory,
                    editorWillUnmount: this.editorWillUnmount,
                    options: {
                        automaticLayout: !0,
                        selectOnLineNumbers: !0,
                        scrollBeyondLastLine: !1,
                        folding: !0,
                        minimap: {
                            enabled: !1
                        },
                        readOnly: t
                    }
                })
            },
            t.defaultProps = {
                $schema: "https://isuda.baidu.com/schemas/PageSchema.json"
            },
            t
        } (i.
    default.Component);
        t.
    default = h
    },
    function(e, t, a) {
        e.exports = a(37)
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CodeEditor = t.MiniEditor = t.getSchemaTplByName = t.BasicContainerEditor = t.BasicEditor = t.RendererEditor = t.utils = t.Editor = void 0;
        var l = a(0);
        a(38),
        a(39);
        var i = l.__importDefault(a(10));
        t.Editor = i.
    default;
        var n = l.__importDefault(a(35));
        t.CodeEditor = n.
    default;
        var o = l.__importStar(a(4));
        t.utils = o;
        var r = a(1);
        Object.defineProperty(t, "RendererEditor", {
            enumerable: !0,
            get: function() {
                return r.Editor
            }
        });
        var s = l.__importDefault(a(8));
        t.BasicEditor = s.
    default;
        var p = l.__importDefault(a(9));
        t.BasicContainerEditor = p.
    default;
        var c = a(2);
        Object.defineProperty(t, "getSchemaTplByName", {
            enumerable: !0,
            get: function() {
                return c.getSchemaTplByName
            }
        });
        var d = l.__importDefault(a(153));
        t.MiniEditor = d.
    default,
        t.
    default = i.
    default
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.RendererThumb = void 0;
        var l = a(0),
        i = a(5),
        n = l.__importDefault(a(3)),
        o = a(5),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    scale: !0
                },
                t.env = {
                    session: "preview"
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.componentWillMount = function() {
                this.rootRef = this.rootRef.bind(this),
                this.syncHeight = this.syncHeight.bind(this),
                this.handleClick = this.handleClick.bind(this)
            },
            t.prototype.componentWillUnmount = function() {
                this.unSensor && this.unSensor()
            },
            t.prototype.rootRef = function(e) {
                this.ref = e,
                e && (this.syncHeight(), this.unSensor = o.resizeSensor(e.firstChild, this.syncHeight))
            },
            t.prototype.syncHeight = function() {
                if (this.ref) {
                    var e = this.state.scale,
                    t = this.ref.firstChild;
                    this.ref.style.cssText = "height: " + t.scrollHeight / (e ? 2 : 1) + "px;"
                }
            },
            t.prototype.handleClick = function(e) {
                e.preventDefault(),
                this.setState({
                    scale: !this.state.scale
                })
            },
            t.prototype.render = function() {
                var e = this,
                t = this.props,
                a = t.name,
                l = t.data,
                r = t.theme,
                s = l[a] || {
                    type: "tpl",
                    inline: !1,
                    className: "ae-Editor-rendererPlaceholder",
                    tpl: "æ²¡æœ‰é¢„è§ˆå›¾"
                };
                return n.
            default.createElement(i.LazyComponent, {
                    unMountOnHidden: !1,
                    schema: s,
                    component: function(t) {
                        var a = t.schema;
                        return n.
                    default.createElement("div", {
                            className: "ae-RenderersPicker-thumb " + (e.state.scale ? "is-scaled": "")
                        },
                        n.
                    default.createElement("div", {
                            className: "ae-Editor-rendererThumbWrap"
                        },
                        n.
                    default.createElement("div", {
                            className: "ae-Editor-rendererThumbIcon",
                            onClick: e.handleClick
                        },
                        n.
                    default.createElement(i.Icon, {
                            icon: e.state.scale ? "zoom-in": "zoom-out"
                        })), n.
                    default.createElement("div", {
                            ref: e.rootRef,
                            className: "ae-Editor-rendererThumb"
                        },
                        n.
                    default.createElement("div", {
                            className: "ae-Editor-rendererThumbInner"
                        },
                        o.render(a, {
                            theme: r
                        },
                        e.env)))))
                    }
                })
            },
            t = l.__decorate([i.Renderer({
                test: /(?:^|\/)ae\-renderer\-thumb$/i
            })], t)
        } (n.
    default.Component);
        t.RendererThumb = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ClassNameControl = void 0;
        var l = a(0),
        i = a(5),
        n = l.__importDefault(a(3)),
        o = a(15),
        r = [{
            label: "å¤–è¾¹è·",
            children: [{
                label: "æ•´ä½“",
                children: [{
                    label: "æžå°",
                    value: "m-xs"
                },
                {
                    label: "å°",
                    value: "m-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "m"
                },
                {
                    label: "ä¸­",
                    value: "m-md"
                },
                {
                    label: "å¤§",
                    value: "m-lg"
                }]
            },
            {
                label: "ä¸Šè¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "m-t-xs"
                },
                {
                    label: "å°",
                    value: "m-t-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "m-t"
                },
                {
                    label: "ä¸­",
                    value: "m-t-md"
                },
                {
                    label: "å¤§",
                    value: "m-t-lg"
                }]
            },
            {
                label: "å³è¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "m-r-xs"
                },
                {
                    label: "å°",
                    value: "m-r-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "m-r"
                },
                {
                    label: "ä¸­",
                    value: "m-r-md"
                },
                {
                    label: "å¤§",
                    value: "m-r-lg"
                }]
            },
            {
                label: "ä¸‹è¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "m-b-xs"
                },
                {
                    label: "å°",
                    value: "m-b-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "m-b"
                },
                {
                    label: "ä¸­",
                    value: "m-b-md"
                },
                {
                    label: "å¤§",
                    value: "m-b-lg"
                }]
            },
            {
                label: "å·¦è¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "m-l-xs"
                },
                {
                    label: "å°",
                    value: "m-l-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "m-l"
                },
                {
                    label: "ä¸­",
                    value: "m-l-md"
                },
                {
                    label: "å¤§",
                    value: "m-l-lg"
                }]
            },
            {
                label: "ç½®æ— ",
                children: [{
                    label: "å…¨éƒ¨",
                    value: "m-none"
                },
                "|", {
                    label: "ä¸Š",
                    value: "m-t-none"
                },
                {
                    label: "å³",
                    value: "m-r-none"
                },
                {
                    label: "ä¸‹",
                    value: "m-b-none"
                },
                {
                    label: "å·¦",
                    value: "m-l-none"
                }]
            }]
        },
        {
            label: "å†…è¾¹è·",
            children: [{
                label: "æ•´ä½“",
                children: [{
                    label: "æžå°",
                    value: "p-xs"
                },
                {
                    label: "å°",
                    value: "p-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "p"
                },
                {
                    label: "ä¸­",
                    value: "p-md"
                },
                {
                    label: "å¤§",
                    value: "p-lg"
                }]
            },
            {
                label: "ä¸Šè¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "p-t-xs"
                },
                {
                    label: "å°",
                    value: "p-t-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "p-t"
                },
                {
                    label: "ä¸­",
                    value: "p-t-md"
                },
                {
                    label: "å¤§",
                    value: "p-t-lg"
                }]
            },
            {
                label: "å³è¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "p-r-xs"
                },
                {
                    label: "å°",
                    value: "p-r-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "p-r"
                },
                {
                    label: "ä¸­",
                    value: "p-r-md"
                },
                {
                    label: "å¤§",
                    value: "p-r-lg"
                }]
            },
            {
                label: "ä¸‹è¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "p-b-xs"
                },
                {
                    label: "å°",
                    value: "p-b-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "p-b"
                },
                {
                    label: "ä¸­",
                    value: "p-b-md"
                },
                {
                    label: "å¤§",
                    value: "p-b-lg"
                }]
            },
            {
                label: "å·¦è¾¹è·",
                children: [{
                    label: "æžå°",
                    value: "p-l-xs"
                },
                {
                    label: "å°",
                    value: "p-l-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "p-l"
                },
                {
                    label: "ä¸­",
                    value: "p-l-md"
                },
                {
                    label: "å¤§",
                    value: "p-l-lg"
                }]
            },
            {
                label: "ç½®æ— ",
                children: [{
                    label: "å…¨éƒ¨",
                    value: "p-none"
                },
                "|", {
                    label: "ä¸Š",
                    value: "p-t-none"
                },
                {
                    label: "å³",
                    value: "p-r-none"
                },
                {
                    label: "ä¸‹",
                    value: "p-b-none"
                },
                {
                    label: "å·¦",
                    value: "p-l-none"
                }]
            }]
        },
        {
            label: "è¾¹æ¡†",
            className: "w2x",
            children: [{
                label: "ä½ç½®",
                children: [{
                    label: "å…¨éƒ¨",
                    value: "b-a"
                },
                "|", {
                    label: "ä¸Š",
                    value: "b-t"
                },
                {
                    label: "å³",
                    value: "b-r"
                },
                {
                    label: "ä¸‹",
                    value: "b-b"
                },
                {
                    label: "å·¦",
                    value: "b-l"
                },
                "|", {
                    label: "ç½®æ— ",
                    value: "no-border"
                }]
            },
            {
                label: "å¤§å°",
                children: [{
                    label: "2x",
                    value: "b-2x"
                },
                {
                    label: "3x",
                    value: "b-3x"
                },
                {
                    label: "4x",
                    value: "b-4x"
                },
                {
                    label: "5x",
                    value: "b-5x"
                }]
            },
            {
                label: "é¢œè‰²",
                children: [{
                    label: "ä¸»è‰²",
                    value: "b-primary",
                    className: "bg-primary"
                },
                {
                    label: "ä¿¡æ¯",
                    value: "b-info",
                    className: "bg-info"
                },
                {
                    label: "è­¦å‘Š",
                    value: "b-warning",
                    className: "bg-warning"
                },
                {
                    label: "å±é™©",
                    value: "b-danger",
                    className: "bg-danger"
                },
                {
                    label: "æˆåŠŸ",
                    value: "b-success",
                    className: "bg-success"
                },
                {
                    label: "ç™½è‰²",
                    value: "b-white",
                    className: "bg-white"
                },
                {
                    label: "æš—è‰²",
                    value: "b-dark",
                    className: "bg-dark"
                },
                {
                    label: "æµ…è‰²",
                    value: "b-light",
                    className: "bg-light"
                }]
            }]
        },
        {
            label: "å…¶ä»–",
            className: "w2x",
            children: [{
                label: "åœ†è§’",
                children: [{
                    label: "å…¨éƒ¨",
                    value: "r"
                },
                "|", {
                    label: "ä¸Š",
                    value: "r-t"
                },
                {
                    label: "å³",
                    value: "r-r"
                },
                {
                    label: "ä¸‹",
                    value: "r-b"
                },
                {
                    label: "å·¦",
                    value: "r-l"
                },
                "|", {
                    label: "2x",
                    value: "r-2x"
                },
                {
                    label: "3x",
                    value: "r-3x"
                }]
            },
            {
                label: "å­—ä½“",
                children: [{
                    label: "æ­£å¸¸",
                    value: "font-normal"
                },
                {
                    label: "ç»†",
                    value: "font-thin"
                },
                {
                    label: "ç²—",
                    value: "font-bold"
                },
                "|", {
                    label: "æžå°",
                    value: "text-xs"
                },
                {
                    label: "å°",
                    value: "text-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "text-base"
                },
                {
                    label: "ä¸­",
                    value: "text-md"
                },
                {
                    label: "å¤§",
                    value: "text-lg"
                }]
            },
            {
                label: "é¢œè‰²",
                children: [{
                    label: "ä¸»è‰²",
                    value: "text-primary",
                    className: "text-primary"
                },
                {
                    label: "ä¿¡æ¯",
                    value: "text-info",
                    className: "text-info"
                },
                {
                    label: "è­¦å‘Š",
                    value: "text-warning",
                    className: "text-warning"
                },
                {
                    label: "å±é™©",
                    value: "text-danger",
                    className: "text-danger"
                },
                {
                    label: "æˆåŠŸ",
                    value: "text-success",
                    className: "text-success"
                },
                {
                    label: "ç™½è‰²",
                    value: "text-white",
                    className: "text-white bg-dark"
                },
                {
                    label: "æš—è‰²",
                    value: "text-dark",
                    className: "text-dark"
                },
                {
                    label: "æ·¡è‰²",
                    value: "text-muted",
                    className: "text-muted"
                }]
            },
            {
                label: "èƒŒæ™¯",
                children: [{
                    label: "ä¸»è‰²",
                    value: "bg-primary",
                    className: "bg-primary"
                },
                {
                    label: "ä¿¡æ¯",
                    value: "bg-info",
                    className: "bg-info"
                },
                {
                    label: "è­¦å‘Š",
                    value: "bg-warning",
                    className: "bg-warning"
                },
                {
                    label: "å±é™©",
                    value: "bg-danger",
                    className: "bg-danger"
                },
                {
                    label: "æˆåŠŸ",
                    value: "bg-success",
                    className: "bg-success"
                },
                {
                    label: "ç™½è‰²",
                    value: "bg-white",
                    className: "bg-white"
                },
                {
                    label: "æš—è‰²",
                    value: "bg-dark",
                    className: "bg-dark"
                },
                {
                    label: "æµ…è‰²",
                    value: "bg-light",
                    className: "bg-light"
                },
                "|", {
                    label: "ç½®æ— ",
                    value: "no-bg"
                }]
            },
            {
                label: "å®½åº¦",
                children: [{
                    label: "ç‰¹å°",
                    value: "w-xxs"
                },
                {
                    label: "æžå°",
                    value: "w-xs"
                },
                {
                    label: "å°",
                    value: "w-sm"
                },
                {
                    label: "æ­£å¸¸",
                    value: "w"
                },
                {
                    label: "ä¸­",
                    value: "w-md"
                },
                {
                    label: "å¤§",
                    value: "w-lg"
                },
                {
                    label: "åŠ å¤§",
                    value: "w-xl"
                },
                {
                    label: "ç‰¹å¤§",
                    value: "w-xxl"
                },
                {
                    label: "å æ»¡",
                    value: "w-full"
                }]
            }]
        }];
        var s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    isFocused: !1,
                    isOpened: !1
                },
                t.values = [],
                t
            }
            return l.__extends(t, e),
            t.prototype.open = function() {
                this.setState({
                    isOpened: !0
                })
            },
            t.prototype.close = function() {
                this.setState({
                    isOpened: !1
                })
            },
            t.prototype.toggle = function() {
                this.setState({
                    isOpened: !this.state.isOpened
                })
            },
            t.prototype.handleFocus = function(e) {
                this.setState({
                    isFocused: !0
                }),
                this.props.onFocus && this.props.onFocus(e)
            },
            t.prototype.handleBlur = function(e) {
                this.setState({
                    isFocused: !1
                }),
                this.props.onBlur && this.props.onBlur(e)
            },
            t.prototype.handleChange = function(e) { (0, this.props.onChange)(e.currentTarget.value)
            },
            t.prototype.getParent = function() {
                return o.findDOMNode(this)
            },
            t.prototype.getTarget = function() {
                return o.findDOMNode(this).firstChild
            },
            t.prototype.handlePopOverChange = function(e) {
                var t = this.props.value || "",
                a = t.replace(/\s+/g, " ").split(/\s+/),
                l = a.indexOf(e.value),
                i = this.props.onChange;
                if (~l) a.splice(l, 1),
                t = a.join(" ");
                else {
                    if (/(?:^|\s)(m|p)\-(t|r|b|l)(?:\-(?:xs|sm|md|lg))?(?:$|\s)/.test(e.value)) {
                        var n = new RegExp("(?:^|\\s)" + RegExp.$1 + "\\-" + RegExp.$2 + "(?:\\-(?:xs|sm|md|lg))?(?=(\\s|$))", "ig");
                        t = t.replace(n, "")
                    } else if (/(?:^|\s)(m|p)(?:\-(xs|sm|md|lg))?(?:$|\s)/.test(e.value)) {
                        n = new RegExp("(?:^|\\s)" + RegExp.$1 + "(?:\\-(?:xs|sm|md|lg))?(?=(\\s|$))", "ig");
                        t = t.replace(n, "")
                    } else if (/(?:^|\s)(m|p)(?:\-(t|r|b|l))?\-none(?:$|\s)/.test(e.value)) {
                        n = new RegExp(RegExp.$2 ? "(?:^|\\s)" + RegExp.$1 + "(?:(?:\\-" + RegExp.$2 + "(?:\\-(?:xs|sm|md|lg)))|\\-none)?(?=(\\s|$))": "(?:^|\\s)" + RegExp.$1 + "(?:[^\\s$]+)?(?=(\\s|$))", "ig");
                        t = t.replace(n, "$1")
                    } else / ( ? :^|\s) w( ? :\ - \w + ) ? ( ? :$ | \s) / .test(e.value) ? t = t.replace(/(?:^|\s)w(?:\-\w+)?(?=(\s|$))/g, "") : "b-a" === e.value ? t = (t = t.replace(/(?:^|\s)b\-(?:t|r|b|l)(?=(\s|$))/g, "")).replace(/(?:^|\s)no\-border(?=(\s|$))/g, "") : /(?:^|\s)b\-(?:t|r|b|l)?(?:$|\s)/.test(e.value) ? t = (t = t.replace(/(?:^|\s)b\-a(?=(\s|$))/g, "")).replace(/(?:^|\s)no\-border(?=(\s|$))/g, "") : /(?:^|\s)b\-\dx(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)b\-\dx(?=(\s|$))/g, "") : "no-border" === e.value ? t = t.replace(/(?:^|\s)b\-(?:\dx|\w+)(?=(\s|$))/g, "") : /(?:^|\s)b\-(?:primary|info|warning|danger|success|white|dark|light)(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)b\-(?:primary|info|warning|danger|success|white|dark|light)(?=(\s|$))/g, "") : "r" === e.value ? t = t.replace(/(?:^|\s)r\-(?:t|r|b|l)(?=(\s|$))/g, "") : /(?:^|\s)r\-(?:t|r|b|l)?(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)r(?=(\s|$))/g, "") : /(?:^|\s)r\-\dx(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)r\-\dx(?=(\s|$))/g, "") : /(?:^|\s)text\-(?:xs|sm|base|md|lg)(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)text\-(?:xs|sm|base|md|lg)(?=(\s|$))/g, "") : /(?:^|\s)font\-(?:normal|thin|bold)(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)font\-(?:normal|thin|bold)(?=(\s|$))/g, "") : /(?:^|\s)text\-(?:primary|info|warning|danger|success|white|dark|light)(?:$|\s)/.test(e.value) ? t = t.replace(/(?:^|\s)text\-(?:primary|info|warning|danger|success|white|dark|light)(?=(\s|$))/g, "") : /(?:^|\s)bg\-(?:primary|info|warning|danger|success|white|dark|light)(?:$|\s)/.test(e.value) ? t = (t = t.replace(/(?:^|\s)bg\-(?:primary|info|warning|danger|success|white|dark|light)(?=(\s|$))/g, "")).replace(/(?:^|\s)no\-bg(?=(\s|$))/g, "") : "no-bg" === e.value && (t = t.replace(/(?:^|\s)bg\-(?:primary|info|warning|danger|success|white|dark|light)(?=(\s|$))/g, ""));
                    t = t.replace(/\s+/g, " ").trim(),
                    t += (t ? " ": "") + e.value
                }
                i(t)
            },
            t.prototype.renderGroup = function(e, t) {
                var a = this,
                l = this.props.classnames;
                return n.
            default.createElement("div", {
                    key: t,
                    className: l("ClassNameControl-group", e.className)
                },
                n.
            default.createElement("label", {
                    className: l("ClassNameControl-groupLabel", e.labelClassName)
                },
                e.label), e.children && e.children.length ? e.children[0].value ? this.renderOptions(e.children, t) : e.children.map((function(e, t) {
                    return a.renderGroup(e, t)
                })) : null)
            },
            t.prototype.renderOptions = function(e, t) {
                var a = this,
                l = this.props.classnames;
                return function(e) {
                    for (var t = [], a = t[0] = [], l = 0, i = e.length; l < i; l++) {
                        var n = e[l];
                        "|" === n ? (a = [], t.push(a)) : a.push(n)
                    }
                    return t
                } (e).map((function(e, t) {
                    return n.
                default.createElement("div", {
                        className: l("ButtonGroup"),
                        key: t
                    },
                    e.map((function(e, t) {
                        return n.
                    default.createElement("div", {
                            key: t,
                            onClick: function() {
                                return a.handlePopOverChange(e)
                            },
                            className: l("Button Button--xs", e.className, ~a.values.indexOf(e.value) ? "Button--primary": "Button--default")
                        },
                        e.label)
                    })))
                }))
            },
            t.prototype.renderPopover = function() {
                var e = this,
                t = this.props.value;
                return this.values = t ? t.split(" ") : [],
                n.
            default.createElement("div", null, r.map((function(t, a) {
                    return e.renderGroup(t, a)
                })))
            },
            t.prototype.render = function() {
                var e, t = this.props,
                a = t.classnames,
                l = t.readOnly,
                o = t.disabled,
                r = t.value,
                s = t.className,
                p = t.popOverContainer;
                return n.
            default.createElement("div", {
                    className: a(s, "TextControl", (e = {},
                    e["TextControl--withAddOn"] = !0, e["is-focused"] = this.state.isFocused, e["is-disabled"] = o, e))
                },
                n.
            default.createElement("div", {
                    className: a("TextControl-input")
                },
                n.
            default.createElement("input", {
                    name: name,
                    placeholder: "è¯·è¾“å…¥ css ç±»å",
                    disabled: o,
                    readOnly: l,
                    type: "text",
                    autoComplete: "off",
                    onChange: this.handleChange,
                    onFocus: this.handleFocus,
                    onBlur: this.handleBlur,
                    value: null == r ? "": "string" == typeof r ? r: JSON.stringify(r)
                })), n.
            default.createElement("div", {
                    className: a("TextControl-button")
                },
                n.
            default.createElement(i.Button, {
                    onClick: this.toggle
                },
                n.
            default.createElement("i", {
                    className: "fa fa-cog"
                }))), n.
            default.createElement(i.Overlay, {
                    placement: "left-bottom-left-top  left-top-left-bottom left-bottom-left-top",
                    target: this.getTarget,
                    container: p || this.getParent,
                    rootClose: !1,
                    show: this.state.isOpened
                },
                n.
            default.createElement(i.PopOver, {
                    className: a("ClassNamePicker-popover"),
                    onHide: this.close,
                    overlay: !0
                },
                this.renderPopover())))
            },
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "open", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "close", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "toggle", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleFocus", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleBlur", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleChange", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "getParent", null),
            l.__decorate([i.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "getTarget", null),
            t = l.__decorate([i.FormItem({
                type: "ae-classname"
            })], t)
        } (n.
    default.Component);
        t.ClassNameControl = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FormEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(9)),
        r = a(2),
        s = a(6),
        p = l.__importDefault(a(11)),
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {},
                t.isCRUDFilter = /\/crud\/filter\/form$/.test(t.props.$path),
                t.isInDialog = /(?:\/|^)dialog\/.+$/.test(t.props.$path),
                t.childrenSortList = {
                    controls: ["static", "text", "textarea", "number", "checkboxes", "select", "list", "switch", "date", "datetime", "time", "image", "file", "tree", "rich-text"]
                },
                t.settingsSchema = {
                    title: "è¡¨å•é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([{
                            label: "æ ‡é¢˜",
                            name: "title",
                            visibleOn: "this.wrapWithPanel !== false",
                            pipeIn: r.defaultValue("è¡¨å•"),
                            type: "text"
                        },
                        {
                            name: "submitText",
                            type: "text",
                            label: "æäº¤æŒ‰é’®åç§°",
                            pipeIn: r.defaultValue("æäº¤"),
                            visibleOn: "this.wrapWithPanel !== false && !this.actions && (!Array.isArray(this.controls) || !this.controls.some(function(item) {return !!~['submit','button','reset','button-group'].indexOf(item.type);}))",
                            description: "å½“æ²¡æœ‰è‡ªå®šä¹‰æŒ‰é’®æ—¶æœ‰æ•ˆã€‚"
                        },
                        {
                            name: "autoFocus",
                            type: "switch",
                            label: "è‡ªåŠ¨èšç„¦",
                            mode: "inline",
                            className: "block",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "è®¾ç½®åŽå°†è®©è¡¨å•çš„ç¬¬ä¸€ä¸ªå¯è¾“å…¥çš„è¡¨å•é¡¹èŽ·å¾—ç„¦ç‚¹",
                                placement: "right"
                            }
                        },
                        r.getSchemaTplByName("submitOnChange"), {
                            label: "æäº¤å®ŒåŽé‡ç½®è¡¨å•",
                            type: "switch",
                            name: "resetAfterSubmit",
                            mode: "inline",
                            className: "block",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å³è¡¨å•æäº¤å®ŒåŽï¼Œè®©æ‰€æœ‰è¡¨å•é¡¹çš„å€¼è¿˜åŽŸæˆåˆå§‹å€¼",
                                placement: "right"
                            }
                        },
                        t.isCRUDFilter ? null: {
                            label: "åˆå§‹åŒ–åŽæäº¤ä¸€æ¬¡",
                            type: "switch",
                            name: "submitOnInit",
                            mode: "inline",
                            className: "block",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¼€å¯åŽï¼Œè¡¨å•åˆå§‹å®Œæˆä¾¿ä¼šè§¦å‘ä¸€æ¬¡æäº¤ã€‚",
                                placement: "right"
                            }
                        },
                        t.isInDialog ? {
                            label: "æäº¤åŽæ˜¯å¦å…³é—­å¯¹è¯æ¡†",
                            type: "switch",
                            name: "closeDialogOnSubmit",
                            mode: "inline",
                            className: "block",
                            pipeIn: function(e) {
                                return ! 1 !== e
                            }
                        }: null, t.isCRUDFilter ? null: {
                            label: "æäº¤ç»™å…¶ä»–ç»„ä»¶",
                            name: "target",
                            type: "text",
                            description: "å¯ä»¥é€šè¿‡è®¾ç½®æ­¤å±žæ€§ï¼ŒæŠŠå½“å‰è¡¨å•çš„å€¼æäº¤ç»™ç›®æ ‡ç»„ä»¶ï¼Œè€Œä¸æ˜¯è‡ªå·±æ¥é€šè¿‡æŽ¥å£ä¿å­˜ï¼Œè¯·å¡«å†™ç›®æ ‡ç»„ä»¶çš„ <code>name</code> å±žæ€§ï¼Œå¤šä¸ªç»„ä»¶è¯·ç”¨é€—å·éš”å¼€ã€‚å½“ <code>target</code> ä¸º <code>window</code> æ—¶ï¼Œåˆ™æŠŠè¡¨å•æ•°æ®é™„å±žåˆ°åœ°å€æ ã€‚"
                        },
                        r.getSchemaTplByName("reload", {
                            test: !t.isCRUDFilter
                        }), t.isCRUDFilter ? null: {
                            label: "è·³è½¬",
                            name: "redirect",
                            type: "text",
                            description: "å½“è®¾ç½®æ­¤å€¼åŽï¼Œè¡¨å•æäº¤å®ŒåŽè·³è½¬åˆ°ç›®æ ‡åœ°å€ã€‚"
                        },
                        {
                            name: "persistData",
                            label: "æ˜¯å¦å¼€å¯æœ¬åœ°ç¼“å­˜",
                            type: "switch",
                            pipeIn: r.defaultValue(!1),
                            mode: "inline",
                            className: "block",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¼€å¯åŽï¼Œè¡¨å•çš„æ•°æ®ä¼šç¼“å­˜åœ¨æµè§ˆå™¨ä¸­ï¼Œåˆ‡æ¢é¡µé¢æˆ–å…³é—­å¼¹æ¡†ä¸ä¼šæ¸…ç©ºå½“å‰è¡¨å•å†…çš„æ•°æ®",
                                placement: "right"
                            }
                        },
                        {
                            name: "clearPersistDataAfterSubmit",
                            label: "æäº¤æˆåŠŸåŽæ¸…ç©ºæœ¬åœ°ç¼“å­˜",
                            type: "switch",
                            pipeIn: r.defaultValue(!1),
                            mode: "inline",
                            className: "block",
                            visibleOn: "data.persistData",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¼€å¯æœ¬åœ°ç¼“å­˜å¹¶å¼€å¯æœ¬é…ç½®é¡¹åŽï¼Œè¡¨å•æäº¤æˆåŠŸåŽï¼Œä¼šè‡ªåŠ¨æ¸…é™¤æµè§ˆå™¨ä¸­å½“å‰è¡¨å•çš„ç¼“å­˜æ•°æ®",
                                placement: "right"
                            }
                        }])
                    },
                    {
                        title: "æŽ¥å£",
                        controls: s([r.getSchemaTplByName("api", {
                            label: "ä¿å­˜æŽ¥å£",
                            description: "ç”¨æ¥ä¿å­˜è¡¨å•æ•°æ®",
                            test: !t.isCRUDFilter
                        }), {
                            label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼?",
                            remark: {
                                trigger: "click",
                                rootClose: !0,
                                title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                placement: "right"
                            },
                            type: "switch",
                            name: "asyncApi",
                            visibleOn: "data.api",
                            pipeIn: function(e) {
                                return null != e
                            },
                            pipeOut: function(e) {
                                return e ? "": void 0
                            },
                            mode: "inline",
                            className: "block"
                        },
                        r.getSchemaTplByName("api", {
                            name: "asyncApi",
                            label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                            visibleOn: "data.asyncApi != null",
                            description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•æäº¤å‘é€ä¿å­˜æŽ¥å£åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                        }), {
                            type: "divider"
                        },
                        r.getSchemaTplByName("api", {
                            name: "initApi",
                            label: "åˆå§‹åŒ–æŽ¥å£",
                            description: "ç”¨æ¥åˆå§‹åŒ–è¡¨å•æ•°æ®"
                        }), {
                            label: "å¼€å¯å®šæ—¶åˆ·æ–°",
                            type: "switch",
                            name: "interval",
                            visibleOn: "data.initApi",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? 3e3: void 0
                            },
                            mode: "inline"
                        },
                        {
                            name: "interval",
                            type: "number",
                            visibleOn: "data.interval",
                            step: 500,
                            className: "m-t-n-sm",
                            description: "è®¾ç½®åŽå°†è‡ªåŠ¨å®šæ—¶åˆ·æ–°ï¼Œå•ä½ ms"
                        },
                        {
                            name: "silentPolling",
                            label: "é™é»˜åˆ·æ–°",
                            type: "switch",
                            mode: "inline",
                            visibleOn: "!!data.interval",
                            description: "è®¾ç½®è‡ªåŠ¨å®šæ—¶åˆ·æ–°æ—¶æ˜¯å¦æ˜¾ç¤ºloading"
                        },
                        {
                            name: "stopAutoRefreshWhen",
                            label: "åœæ­¢å®šæ—¶åˆ·æ–°æ£€æµ‹è¡¨è¾¾å¼",
                            type: "text",
                            visibleOn: "!!data.interval",
                            description: "å®šæ—¶åˆ·æ–°ä¸€æ—¦è®¾ç½®ä¼šä¸€ç›´åˆ·æ–°ï¼Œé™¤éžç»™å‡ºè¡¨è¾¾å¼ï¼Œæ¡ä»¶æ»¡è¶³åŽåˆ™ä¸åˆ·æ–°äº†ã€‚"
                        },
                        {
                            label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                            remark: {
                                trigger: "click",
                                rootClose: !0,
                                title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                placement: "right"
                            },
                            type: "switch",
                            name: "initAsyncApi",
                            visibleOn: "data.initApi",
                            pipeIn: function(e) {
                                return null != e
                            },
                            pipeOut: function(e) {
                                return e ? "": void 0
                            },
                            mode: "inline"
                        },
                        r.getSchemaTplByName("api", {
                            name: "initAsyncApi",
                            label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                            visibleOn: "data.initAsyncApi != null",
                            description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•è¯·æ±‚ initApi åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                        }), {
                            type: "divider"
                        },
                        t.isCRUDFilter ? {
                            name: "messages",
                            pipeIn: r.defaultValue({
                                fetchFailed: "åˆå§‹åŒ–å¤±è´¥"
                            }),
                            label: "é»˜è®¤æ¶ˆæ¯ä¿¡æ¯",
                            type: "combo",
                            multiLine: !0,
                            description: "å¯ä»¥ä¸è®¾ç½®ï¼ŒæŽ¥å£è¿”å›žçš„ msg å­—æ®µï¼Œä¼˜å…ˆçº§æ›´é«˜",
                            controls: [{
                                label: "èŽ·å–æˆåŠŸæç¤º",
                                name: "fetchSuccess",
                                type: "text"
                            },
                            {
                                label: "èŽ·å–å¤±è´¥æç¤º",
                                name: "fetchFailed",
                                type: "text"
                            }]
                        }: {
                            name: "messages",
                            pipeIn: r.defaultValue({
                                fetchFailed: "åˆå§‹åŒ–å¤±è´¥",
                                saveSuccess: "ä¿å­˜æˆåŠŸ",
                                saveFailed: "ä¿å­˜å¤±è´¥"
                            }),
                            label: "é»˜è®¤æ¶ˆæ¯æç¤º",
                            type: "combo",
                            multiLine: !0,
                            description: "å¯ä»¥ä¸è®¾ç½®ï¼ŒæŽ¥å£è¿”å›žçš„ msg å­—æ®µï¼Œä¼˜å…ˆçº§æ›´é«˜",
                            controls: [{
                                label: "èŽ·å–æˆåŠŸæç¤º",
                                name: "fetchSuccess",
                                type: "text"
                            },
                            {
                                label: "èŽ·å–å¤±è´¥æç¤º",
                                name: "fetchFailed",
                                type: "text"
                            },
                            {
                                label: "ä¿å­˜æˆåŠŸæç¤º",
                                name: "saveSuccess",
                                type: "text"
                            },
                            {
                                label: "ä¿å­˜å¤±è´¥æç¤º",
                                name: "saveFailed",
                                type: "text"
                            },
                            {
                                label: "éªŒè¯å¤±è´¥æç¤º",
                                name: "validateFailed",
                                type: "text"
                            }]
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: s([{
                            name: "wrapWithPanel",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "ç”¨ Panel åŒ…è£¹",
                            pipeIn: r.defaultValue(!0),
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å…³é—­åŽï¼Œè¡¨å•åªä¼šå±•ç¤ºè¡¨å•é¡¹ï¼Œæ ‡é¢˜å’Œæ“ä½œæ å°†ä¸ä¼šæ˜¾ç¤ºã€‚",
                                placement: "right"
                            }
                        },
                        {
                            name: "panelClassName",
                            label: "Panel æ ·å¼",
                            type: "button-group",
                            size: "sm",
                            visibleOn: "this.wrapWithPanel !== false",
                            pipeIn: function(e) {
                                return "string" == typeof e && /(?:^|\s)(Panel\-\-(\w+))(?:$|\s)/.test(e) ? RegExp.$1: "Panel--default"
                            },
                            pipeOut: function(e, t) {
                                return t ? (t.replace(/(?:^|\s)(Panel\-\-(\w+))(?=($|\s))/g, "") + " " + e).replace(/\s+/g, " ").trim() : e
                            },
                            options: [{
                                label: "é»˜è®¤",
                                value: "Panel--default"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "Panel--primary"
                            },
                            {
                                label: "æç¤º",
                                value: "Panel--info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "Panel--success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "Panel--warning"
                            },
                            {
                                label: "å±é™©",
                                value: "Panel--danger"
                            }]
                        },
                        {
                            name: "mode",
                            label: "å±•ç¤ºæ¨¡å¼",
                            type: "button-group",
                            size: "sm",
                            pipeIn: r.defaultValue("normal", !1),
                            options: [{
                                label: "é»˜è®¤",
                                value: "normal"
                            },
                            {
                                label: "å·¦å³æ‘†æ”¾",
                                value: "horizontal"
                            },
                            {
                                label: "å†…è”",
                                value: "inline"
                            }]
                        },
                        r.getSchemaTplByName("horizontal", {
                            visibleOn: 'this.mode == "horizontal"'
                        }), r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            name: "panelClassName",
                            visibleOn: "this.wrapWithPanel !== false",
                            label: "Panel çš„ CSS ç±»å",
                            description: "å¯ä»¥è®¾ç½® Panel--info ä¹‹ç±»çš„"
                        })])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("name", {
                            test: !t.isCRUDFilter
                        }), {
                            name: "debug",
                            label: "å¼€å¯è°ƒè¯•",
                            type: "switch",
                            mode: "inline",
                            labelRemark: "æ˜¾ç¤ºå½“å‰è¡¨å•çš„æ•°æ®åœ¨è¡¨å•é¡¶éƒ¨"
                        },
                        r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                t.tipName = t.isCRUDFilter ? "æŸ¥è¯¢æ¡ä»¶": "è¡¨å•",
                t.dropable = !0,
                t.containers = ["controls", "actions"],
                t.containerLabels = ["è¡¨å•é›†åˆ", "æŒ‰é’®é›†åˆ"],
                t.regions2path = {
                    controls: "control"
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.acceptChild = function(t, a, l) {
                return ! ("actions" === a && !~ ["button", "submit", "reset"].indexOf(t)) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    autoFocus: !1,
                    wrapperComponent: "div"
                }))
            },
            t.prototype.onChildDelete = function(e, t) {
                if ("actions" === t) {
                    var a = this.props.$$id,
                    l = this.context.editor,
                    i = l.get(a).actions.concat();
                    i.length || (i = void 0),
                    l.update(a, {
                        actions: i
                    })
                }
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "actions" === t ? e.prototype.pickChild.call(this, "action", "actions", void 0, ["button", "reset", "submit", "button-group", "dropdown-button"], !0) : "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t = l.__decorate([n.Editor("form", {
                name: "è¡¨å•(Form)",
                description: "å¯ç”¨äºŽæ–°å»ºã€ç¼–è¾‘æˆ–è€…å±•ç¤ºæ•°æ®ï¼Œé…ç½®åˆå§‹åŒ–æŽ¥å£å¯ä»Žè¿œç«¯åŠ è½½æ•°æ®ï¼Œé…ç½®æäº¤æŽ¥å£å¯å°†æ•°æ®å‘é€è¿œç«¯ã€‚å¦å¤–ä¹Ÿå¯ä»¥å°†æ•°æ®æäº¤ç»™å…¶ä»–ç»„ä»¶ï¼Œä¸Žå…¶ä»–ç»„ä»¶é€šä¿¡ã€‚",
                type: "form",
                previewSchema: {
                    type: "form",
                    panelClassName: "Panel--default text-left m-b-none",
                    controls: [{
                        label: "æ–‡æœ¬",
                        name: "a",
                        type: "text"
                    }]
                },
                tags: ["åŠŸèƒ½"],
                icon: "fa fa-list-alt",
                scaffold: {
                    type: "form",
                    title: "è¡¨å•",
                    controls: [{
                        label: "æ–‡æœ¬æ¡†",
                        type: "text",
                        name: "text"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/FormSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor,
                    l = this.super.apply(this, e);
                    if (!a || "form" !== a.props.type) return l;
                    var n = this.props.controls;
                    n && n.length || (l = i.
                default.createElement("div", {
                        className: "text-muted"
                    },
                    "æš‚æ— è¡¨å•é¡¹"));
                    var o = this.props.regionRef;
                    return i.
                default.createElement(p.
                default, {
                        ref: function(e) {
                            return o("controls", e)
                        },
                        name: "controls",
                        label: "è¡¨å•é›†åˆ",
                        hostId: a.props.$$id,
                        wrapperResolve: function(e) {
                            return e
                        }
                    },
                    l)
                }
            })], t)
        } (o.
    default);
        t.FormEditor = c
    },
    function(e, t) {
        e.exports = require("a5149e9")
    },
    function(e, t) {
        e.exports = require("ed60a53")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(20),
        o = l.__importDefault(a(13)),
        r = a(26),
        s = a(27),
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.domRef = function(e) {
                    t.dom = e,
                    t.setView()
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.componentDidMount = function() {
                this.setView()
            },
            t.prototype.componentDidUpdate = function() {
                this.setView()
            },
            t.prototype.setView = function() {
                var e, t = this.props,
                a = t.getTarget,
                l = t.editor,
                i = t.id,
                n = l.getHoverId() === i,
                o = l.getActiveId() === i;
                if (!l.getDragId() && (n || o) && (e = a()) && this.dom) {
                    var p = l.getWidgetsLayer(),
                    c = r(e, p),
                    d = e.getBoundingClientRect(),
                    m = d.height;
                    if ("TH" === e.tagName && (m = e.closest("table").getBoundingClientRect().height), m) {
                        var u = s(e),
                        h = parseInt(u.marginLeft, 10) || 0,
                        b = parseInt(u.marginTop, 10) || 0;
                        this.dom.style.cssText += "\n            display: block;\n            width: " + d.width + "px;\n            height: " + m + "px;\n            left: " + (c.left + h) + "px;\n            top: " + (c.top + b) + "px;\n        "
                    } else this.dom.style.cssText += "display:none;"
                }
            },
            t.prototype.update = function() {
                this.setView()
            },
            t.prototype.render = function() {
                var e = this.props,
                t = e.children,
                a = e.className,
                l = e.editor,
                r = e.id,
                s = l.getHoverId(),
                p = l.getActiveId(),
                c = s === r,
                d = p === r,
                m = l.getDragId(),
                u = l.getDropId();
                return i.
            default.createElement(n.Portal, {
                    container: l.getWidgetsLayer
                },
                u || m || !c && !d ? null: i.
            default.createElement("div", {
                    className: o.
                default("ae-Editor-hlbox", {
                        selected: p === r,
                        hover: c
                    },
                    a),
                    ref: this.domRef
                },
                "function" == typeof t ? t() : t))
            },
            t
        } (i.
    default.PureComponent);
        t.
    default = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.unRender = t.renderToDom = void 0;
        var l = a(0),
        i = a(15),
        n = a(5),
        o = a(4);
        t.renderToDom = function(e, t, a, r, s) {
            void 0 === s && (s = {});
            var p = t.component,
            c = p.props,
            d = /form$/.test(c.$path);
            i.render(n.render({
                children: function(e) {
                    var t = e.render;
                    return d ? p.ref.renderControl(o.JSONPipeOut(r)) : t(p.regions2path[a] || a, o.JSONPipeOut(r), s)
                }
            },
            {},
            l.__assign(l.__assign({},
            c.env), {
                theme: c.theme
            })), e);
            var m = e.innerHTML;
            setTimeout((function() {
                e.innerHTML && (i.unmountComponentAtNode(e), e.innerHTML = m)
            }), 20)
        },
        t.unRender = function(e) {
            e && i.unmountComponentAtNode(e)
        }
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.StaticControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = a(7),
        p = a(12),
        c = l.__importDefault(a(10)),
        d = a(6),
        m = a(4),
        u = {
            type: "static",
            label: "æè¿°"
        },
        h = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                return a.tipName = "Static",
                a.settingsSchema = {
                    title: "é™æ€å±•ç¤ºé…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: d([r.getSchemaTplByName("formItemName", {}), r.getSchemaTplByName("label"), r.getSchemaTplByName("description"), r.getSchemaTplByName("placeholder"), r.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        r.getSchemaTplByName("remark"), r.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é«˜çº§",
                        controls: [{
                            name: "quickEdit",
                            label: "å¯ç”¨å¿«é€Ÿç¼–è¾‘",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "block"
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.mode",
                            type: "button-group",
                            value: "popOver",
                            label: "å¿«é€Ÿç¼–è¾‘æ¨¡å¼",
                            size: "sm",
                            mode: "inline",
                            className: "block",
                            options: [{
                                label: "ä¸‹æ‹‰",
                                value: "popOver"
                            },
                            {
                                label: "å†…åµŒ",
                                value: "inline"
                            }]
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.saveImmediately",
                            label: "æ˜¯å¦ç«‹å³ä¿å­˜",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            description: "å¼€å¯åŽä¿®æ”¹å³æäº¤ï¼Œéœ€é…ç½®ç«‹å³ä¿å­˜æŽ¥å£ã€‚",
                            descriptionClassName: "help-block m-b-none",
                            pipeIn: function(e) {
                                return !! e
                            }
                        },
                        r.getSchemaTplByName("api", {
                            label: "ç«‹å³ä¿å­˜æŽ¥å£",
                            name: "quickEdit.saveImmediately.api",
                            visibleOn: "quickEdit.saveImmediately"
                        }), {
                            visibleOn: "data.quickEdit",
                            children: i.
                        default.createElement(o.Button, {
                                level: "info",
                                className: "m-b",
                                block: !0,
                                onClick: a.handleQuickEditSetting.bind(a)
                            },
                            "é…ç½®å¿«é€Ÿç¼–è¾‘æ–¹å¼")
                        },
                        {
                            name: "popOver",
                            label: "å¯ç”¨æŸ¥çœ‹æ›´å¤šå±•ç¤º",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "block"
                        },
                        {
                            visibleOn: "data.popOver",
                            children: i.
                        default.createElement(o.Button, {
                                level: "info",
                                className: "m-b",
                                onClick: a.handlePopOverSetting.bind(a),
                                block: !0
                            },
                            "é…ç½®æŸ¥çœ‹æ›´å¤šå†…å®¹")
                        },
                        {
                            name: "copyable",
                            label: "å¯ç”¨å†…å®¹å¤åˆ¶åŠŸèƒ½",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "block"
                        },
                        {
                            visibleOn: "data.copyable",
                            name: "copyable.content",
                            type: "textarea",
                            label: "å¤åˆ¶å†…å®¹æ¨¡æ¿",
                            description: "é»˜è®¤ä¸ºå½“å‰å­—æ®µå€¼ï¼Œå¯å®šåˆ¶ã€‚"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])]
                },
                a.childrenOrder = ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"],
                a.handleQuickEditSetting = a.handleQuickEditSetting.bind(a),
                a.handlePopOverSetting = a.handlePopOverSetting.bind(a),
                a
            }
            return l.__extends(t, e),
            t.prototype.onChildSettingsGet = function(e, t) {
                return e = e.replace(/^static\-/, ""),
                l.__assign(l.__assign({},
                t), {
                    className: t.inputClassName,
                    type: e
                })
            },
            t.prototype.onChildSettingsSet = function(e, t, a) {
                return e = e.replace(/^static\-/, ""),
                l.__assign(l.__assign(l.__assign({},
                a), t), {
                    inputClassName: t.className,
                    className: a.className,
                    type: "static-" + e
                })
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !~ ["form", "button", "submit", "reset", "table", "crud", "divider", "grid", "hbox", "page", "wizard"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.handleQuickEditSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = m.JSONPipeOut(e.get(t).quickEdit),
                n = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    type: "text",
                    name: this.props.name
                },
                a),
                e.openDialog("é…ç½®å¿«é€Ÿç¼–è¾‘ç±»åž‹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        quickEdit: a
                    },
                    controls: [{
                        name: "quickEdit",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "/page/body/form/0/control",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        quickEdit: p(m.JSONPipeIn(a.quickEdit), ["$$replaceable"])
                    })
                }), "xl")
            },
            t.prototype.handlePopOverSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = m.JSONPipeOut(e.get(t).popOver),
                n = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    title: "æŸ¥çœ‹è¯¦æƒ…",
                    body: "å†…å®¹è¯¦æƒ…"
                },
                a),
                e.openDialog("é…ç½®æŸ¥çœ‹æ›´å¤šå±•ç¤ºå†…å®¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        popOver: a
                    },
                    controls: [{
                        name: "popOver",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "panel",
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        popOver: p(m.JSONPipeIn(a.popOver), ["$$replaceable", "type"])
                    })
                }), "xl")
            },
            t.prototype.renderChild = function(t, a, i) {
                var n = this.props.$$id;
                return "field" === t && a.field ? e.prototype.renderChild.call(this, t, l.__assign(l.__assign({},
                a), {
                    field: l.__assign(l.__assign({},
                    a.field), {
                        $$id: n.replace(/\-.*$/, "") + "-" + t
                    })
                }), i) : e.prototype.renderChild.call(this, t, a, i)
            },
            t = l.__decorate([n.Editor("static-control", {
                name: "é™æ€å±•ç¤ºæ¡†",
                description: "çº¯ç”¨æ¥å±•ç¤ºæ•°æ®ï¼Œå¯ç”¨æ¥å±•ç¤º<code>jsonã€dateã€imageã€progress</code>ç­‰æ•°æ®",
                type: "static",
                tags: ["è¡¨å•é¡¹"],
                scaffold: u,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign(l.__assign({},
                    u), {
                        value: "é™æ€å€¼"
                    })
                },
                $schema: "https://isuda.baidu.com/schemas/StaticControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object])], t)
        } (s.FormItemEditor);
        t.StaticControlEditor = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.PasswordControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(18),
        o = a(4),
        r = a(2),
        s = a(6),
        p = a(12),
        c = a(14),
        d = a(5),
        m = {
            type: "password",
            label: "å¯†ç ",
            name: "password"
        },
        u = function(e) {
            function t() {
                var t, a, l = null !== e && e.apply(this, arguments) || this;
                return l.tipName = "Password",
                l.settingsSchema = {
                    title: "æ–‡æœ¬æ¡†é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([r.getSchemaTplByName("formItemName", {
                            required: !0
                        }), r.getSchemaTplByName("label"), r.getSchemaTplByName("description"), r.getSchemaTplByName("placeholder"), r.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        r.getSchemaTplByName("hint"), r.getSchemaTplByName("remark"), r.getSchemaTplByName("labelRemark"), r.getSchemaTplByName("clearable"), {
                            type: "text",
                            name: "resetValue",
                            label: "æ¸…é™¤åŽçš„é»˜è®¤å€¼",
                            visibleOn: "this.clearable"
                        },
                        {
                            name: "addOn",
                            label: "å¯ç”¨ addOn",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? o.JSONPipeIn({
                                    label: "æŒ‰é’®",
                                    type: "button"
                                }) : null
                            }
                        },
                        {
                            type: "combo",
                            multiLine: !0,
                            name: "addOn",
                            visibleOn: "data.addOn",
                            controls: [{
                                name: "type",
                                label: "ç±»åž‹",
                                type: "button-group",
                                size: "xs",
                                options: [{
                                    label: "æ–‡æœ¬",
                                    value: "text"
                                },
                                {
                                    label: "æŒ‰é’®",
                                    value: "button"
                                },
                                {
                                    label: "æäº¤",
                                    value: "submit"
                                }]
                            },
                            {
                                name: "label",
                                label: "æ–‡å­—",
                                type: "text",
                                visibleOn: 'this.type === "text"'
                            },
                            {
                                name: "icon",
                                label: "Icon",
                                type: "icon-picker",
                                visibleOn: 'this.type === "text"'
                            },
                            r.getSchemaTplByName("className", {
                                visibleOn: 'this.type === "text"'
                            }), {
                                name: "position",
                                label: "ä½ç½®",
                                type: "button-group",
                                size: "xs",
                                pipeIn: r.defaultValue("right"),
                                options: [{
                                    label: "å·¦è¾¹",
                                    value: "left"
                                },
                                {
                                    label: "å³è¾¹",
                                    value: "right"
                                }]
                            }]
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), r.getSchemaTplByName("formItemSize"), r.getSchemaTplByName("fontItemInline"), r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), {
                            type: "switch",
                            name: "readOnly",
                            label: "æ˜¯å¦åªè¯»",
                            mode: "inline",
                            className: "w-full"
                        },
                        r.getSchemaTplByName("required"), {
                            type: "switch",
                            name: "trimContents",
                            label: "åŽ»é™¤é¦–å°¾ç©ºç™½",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽï¼Œå°†ä¸å…è®¸ç”¨æˆ·è¾“å…¥å‰åŽç©ºæ ¼"
                        },
                        (t = [{
                            label: "æ•°å­—",
                            value: "isNumeric"
                        },
                        {
                            label: "å­—æ¯",
                            value: "isAlpha"
                        },
                        {
                            label: "å­—æ¯å’Œæ•°å­—",
                            value: "isAlphanumeric"
                        },
                        {
                            label: "æ•´åž‹æ•°å­—",
                            value: "isInt"
                        },
                        {
                            label: "æµ®ç‚¹åž‹æ•°å­—",
                            value: "isFloat"
                        },
                        {
                            label: "å›ºå®šé•¿åº¦",
                            value: "isLength"
                        },
                        {
                            label: "æœ€å¤§é•¿åº¦",
                            value: "maxLength"
                        },
                        {
                            label: "æœ€å°é•¿åº¦",
                            value: "minLength"
                        },
                        {
                            label: "æœ€å¤§å€¼",
                            value: "maximum"
                        },
                        {
                            label: "æœ€å°å€¼",
                            value: "minimum"
                        },
                        {
                            label: "ä¸ä¸ºç©º",
                            value: "notEmptyString"
                        },
                        {
                            label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                            value: "equals"
                        },
                        {
                            label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                            value: "equalsField"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™",
                            value: "matchRegexp"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™2",
                            value: "matchRegexp1"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™3",
                            value: "matchRegexp2"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™4",
                            value: "matchRegexp3"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™5",
                            value: "matchRegexp4"
                        }], a = ["isNumeric", "isAlpha", "isAlphanumeric", "isInt", "isFloat"], {
                            type: "combo",
                            syncDefaultValue: !1,
                            name: "validations",
                            label: "éªŒè¯è§„åˆ™",
                            addButtonText: "æ–°å¢žè§„åˆ™",
                            multiple: !0,
                            pipeIn: function(e) {
                                if ("string" == typeof e && e && (e = d.str2rules(e)), !o.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    var l;
                                    /^\$\$/.test(a) || t.push(((l = {
                                        type: a
                                    })[a] = Array.isArray(e[a]) ? e[a][0] : e[a], l))
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var l = {};
                                return e.forEach((function(e) {
                                    var i, n = e.type || ((i = c(t, (function(e) {
                                        return ! l[e.value]
                                    }))) ? i.value: "") || t[0].value;
                                    l[n] = e[n] || !!~a.indexOf(n) || ""
                                })),
                                l
                            },
                            controls: [{
                                type: "select",
                                unique: !0,
                                name: "type",
                                options: t,
                                columnClassName: "w-sm"
                            },
                            {
                                type: "number",
                                name: "isLength",
                                visibleOn: 'data.type == "isLength"',
                                placeholder: "è®¾ç½®é•¿åº¦",
                                value: "1"
                            },
                            {
                                type: "number",
                                name: "maximum",
                                visibleOn: 'data.type == "maximum"',
                                placeholder: "è®¾ç½®æœ€å¤§å€¼"
                            },
                            {
                                type: "number",
                                name: "minimum",
                                visibleOn: 'data.type == "minimum"',
                                placeholder: "è®¾ç½®æœ€å¤§å€¼"
                            },
                            {
                                type: "number",
                                name: "maxLength",
                                visibleOn: 'data.type == "maxLength"',
                                placeholder: "è®¾ç½®æœ€å¤§é•¿åº¦å€¼"
                            },
                            {
                                type: "number",
                                name: "minLength",
                                visibleOn: 'data.type == "minLength"',
                                placeholder: "è®¾ç½®æœ€å°é•¿åº¦å€¼"
                            },
                            {
                                type: "text",
                                name: "equals",
                                visibleOn: 'data.type == "equals"',
                                placeholder: "è®¾ç½®å€¼",
                                value: ""
                            },
                            {
                                type: "text",
                                name: "equalsField",
                                visibleOn: 'data.type == "equalsField"',
                                placeholder: "è®¾ç½®å­—æ®µå",
                                value: ""
                            },
                            {
                                type: "text",
                                name: "matchRegexp",
                                visibleOn: 'data.type == "matchRegexp"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp1",
                                visibleOn: 'data.type == "matchRegexp1"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp2",
                                visibleOn: 'data.type == "matchRegexp2"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp3",
                                visibleOn: 'data.type == "matchRegexp3"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp4",
                                visibleOn: 'data.type == "matchRegexp4"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            }]
                        }),
                        function() {
                            var e = [{
                                label: "æ•°å­—",
                                value: "isNumeric"
                            },
                            {
                                label: "å­—æ¯",
                                value: "isAlpha"
                            },
                            {
                                label: "å­—æ¯å’Œæ•°å­—",
                                value: "isAlphanumeric"
                            },
                            {
                                label: "æ•´åž‹æ•°å­—",
                                value: "isInt"
                            },
                            {
                                label: "æµ®ç‚¹åž‹æ•°å­—",
                                value: "isFloat"
                            },
                            {
                                label: "å›ºå®šé•¿åº¦",
                                value: "isLength"
                            },
                            {
                                label: "æœ€å¤§é•¿åº¦",
                                value: "maxLength"
                            },
                            {
                                label: "æœ€å°é•¿åº¦",
                                value: "minLength"
                            },
                            {
                                label: "æœ€å¤§å€¼",
                                value: "maximum"
                            },
                            {
                                label: "æœ€å°å€¼",
                                value: "minimum"
                            },
                            {
                                label: "ä¸ä¸ºç©º",
                                value: "notEmptyString"
                            },
                            {
                                label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                                value: "equals"
                            },
                            {
                                label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                                value: "equalsField"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™",
                                value: "matchRegexp"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™2",
                                value: "matchRegexp1"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™3",
                                value: "matchRegexp2"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™4",
                                value: "matchRegexp3"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™5",
                                value: "matchRegexp4"
                            }],
                            t = {
                                isRequired: "è¿™æ˜¯å¿…å¡«é¡¹",
                                isInt: "è¯·è¾“å…¥æ•´å½¢æ•°å­—",
                                isAlpha: "è¯·è¾“å…¥å­—æ¯",
                                isNumeric: "è¯·è¾“å…¥æ•°å­—",
                                isAlphanumeric: "è¯·è¾“å…¥å­—æ¯æˆ–è€…æ•°å­—",
                                isFloat: "è¯·è¾“å…¥æµ®ç‚¹åž‹æ•°å€¼",
                                isWords: "è¯·è¾“å…¥å­—æ¯",
                                matchRegexp: "æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚",
                                minLength: "è¯·è¾“å…¥æ›´å¤šçš„å†…å®¹ï¼Œè‡³å°‘è¾“å…¥ $1 ä¸ªå­—ç¬¦ã€‚",
                                maxLength: "è¯·æŽ§åˆ¶å†…å®¹é•¿åº¦, è¯·ä¸è¦è¾“å…¥ $1 ä¸ªå­—ç¬¦ä»¥ä¸Š",
                                maximum: "å½“å‰è¾“å…¥å€¼è¶…å‡ºæœ€å¤§å€¼ $1ï¼Œè¯·æ£€æŸ¥",
                                minimum: "å½“å‰è¾“å…¥å€¼ä½ŽäºŽæœ€å°å€¼ $1ï¼Œè¯·æ£€æŸ¥",
                                isLength: "è¯·è¾“å…¥é•¿åº¦ä¸º $1 çš„å†…å®¹",
                                notEmptyString: "è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦",
                                equalsField: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´",
                                equals: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´"
                            };
                            return {
                                type: "combo",
                                syncDefaultValue: !1,
                                name: "validationErrors",
                                label: "è‡ªå®šä¹‰éªŒè¯æç¤º",
                                description: "è‡ªå¸¦æç¤ºä¸æ»¡è¶³æ—¶ï¼Œå¯ä»¥è‡ªå®šä¹‰ã€‚",
                                addButtonText: "æ–°å¢žæç¤º",
                                multiple: !0,
                                pipeIn: function(e) {
                                    if (!o.isObject(e)) return e;
                                    var t = [];
                                    return Object.keys(e).forEach((function(a) { / ^\$\$ / .test(a) || t.push({
                                            type: a,
                                            msg: e[a]
                                        })
                                    })),
                                    t
                                },
                                pipeOut: function(a) {
                                    if (!Array.isArray(a)) return a;
                                    var l = {};
                                    return a.forEach((function(a) {
                                        var i, n = a.type || ((i = c(e, (function(e) {
                                            return ! l[e.value]
                                        }))) ? i.value: "") || e[0].value;
                                        l[n] = a.msg || t[n] || ""
                                    })),
                                    l
                                },
                                controls: [{
                                    type: "select",
                                    unique: !0,
                                    name: "type",
                                    options: e,
                                    columnClassName: "w-sm"
                                },
                                {
                                    type: "text",
                                    name: "msg",
                                    placeholder: "æç¤ºä¿¡æ¯"
                                },
                                {
                                    type: "formula",
                                    name: "msg",
                                    initSet: !1,
                                    formula: "({\n                                            isRequired: 'è¿™æ˜¯å¿…å¡«é¡¹',\n                                            isInt: 'è¯·è¾“å…¥æ•´å½¢æ•°å­—',\n                                            isAlpha: 'è¯·è¾“å…¥å­—æ¯',\n                                            isNumeric: 'è¯·è¾“å…¥æ•°å­—',\n                                            isAlphanumeric: 'è¯·è¾“å…¥å­—æ¯æˆ–è€…æ•°å­—',\n                                            isFloat: 'è¯·è¾“å…¥æµ®ç‚¹åž‹æ•°å€¼',\n                                            isWords: 'è¯·è¾“å…¥å­—æ¯',\n                                            matchRegexp: 'æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚',\n                                            minLength: 'è¯·è¾“å…¥æ›´å¤šçš„å†…å®¹ï¼Œè‡³å°‘è¾“å…¥ $1 ä¸ªå­—ç¬¦ã€‚',\n                                            maxLength: 'è¯·æŽ§åˆ¶å†…å®¹é•¿åº¦, è¯·ä¸è¦è¾“å…¥ $1 ä¸ªå­—ç¬¦ä»¥ä¸Š',\n                                            maximum: 'å½“å‰è¾“å…¥å€¼è¶…å‡ºæœ€å¤§å€¼ $1ï¼Œè¯·æ£€æŸ¥',\n                                            minimum: 'å½“å‰è¾“å…¥å€¼ä½ŽäºŽæœ€å°å€¼ $1ï¼Œè¯·æ£€æŸ¥',\n                                            isLength: 'è¯·è¾“å…¥é•¿åº¦ä¸º $1 çš„å†…å®¹',\n                                            notEmptyString: 'è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦',\n                                            equalsField: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´',\n                                            equals: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´'\n                                        })[data.type] || ''"
                                }]
                            }
                        } (), r.getSchemaTplByName("validateOnChange"), r.getSchemaTplByName("submitOnChange"), r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                l
            }
            return l.__extends(t, e),
            t.prototype.getSettingsValue = function() {
                var t = e.prototype.getSettingsValue.call(this);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.setSettingsValue = function(t) {
                return e.prototype.setSettingsValue.call(this, p(t, ["formHorizontal", "$$formMode"]))
            },
            t = l.__decorate([i.Editor("password-control", {
                name: "å¯†ç è¾“å…¥æ¡†",
                description: "å¯†ç è¾“å…¥æ¡†",
                type: "password",
                tags: ["è¡¨å•é¡¹"],
                scaffold: m,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    m)
                },
                $schema: "https://isuda.baidu.com/schemas/TextControlSchema.json"
            })], t)
        } (n.TextControlEditor);
        t.PasswordControlEditor = u
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.EmailControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(18),
        r = a(4),
        s = a(6),
        p = a(4),
        c = a(14),
        d = a(5),
        m = {
            type: "email",
            label: "é‚®ç®±",
            name: "email"
        },
        u = function(e) {
            function t() {
                var t, a, l = null !== e && e.apply(this, arguments) || this;
                return l.tipName = "Email",
                l.settingsSchema = {
                    title: "é‚®ç®±é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("hint"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable"), {
                            type: "text",
                            name: "resetValue",
                            label: "æ¸…é™¤åŽçš„é»˜è®¤å€¼",
                            visibleOn: "this.clearable"
                        },
                        {
                            name: "addOn",
                            label: "å¯ç”¨ addOn",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? p.JSONPipeIn({
                                    label: "æŒ‰é’®",
                                    type: "button"
                                }) : null
                            }
                        },
                        {
                            type: "combo",
                            multiLine: !0,
                            name: "addOn",
                            visibleOn: "data.addOn",
                            controls: [{
                                name: "type",
                                label: "ç±»åž‹",
                                type: "button-group",
                                size: "xs",
                                options: [{
                                    label: "æ–‡æœ¬",
                                    value: "text"
                                },
                                {
                                    label: "æŒ‰é’®",
                                    value: "button"
                                },
                                {
                                    label: "æäº¤",
                                    value: "submit"
                                }]
                            },
                            {
                                name: "label",
                                label: "æ–‡å­—",
                                type: "text",
                                visibleOn: 'this.type === "text"'
                            },
                            {
                                name: "icon",
                                label: "Icon",
                                type: "text",
                                visibleOn: 'this.type === "text"'
                            },
                            {
                                name: "className",
                                label: "CSS ç±»å",
                                type: "text",
                                visibleOn: 'this.type === "text"'
                            },
                            {
                                name: "position",
                                label: "ä½ç½®",
                                type: "button-group",
                                size: "xs",
                                pipeIn: n.defaultValue("right"),
                                options: [{
                                    label: "å·¦è¾¹",
                                    value: "left"
                                },
                                {
                                    label: "å³è¾¹",
                                    value: "right"
                                }]
                            }]
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "switch",
                            name: "readOnly",
                            label: "æ˜¯å¦åªè¯»",
                            mode: "inline",
                            className: "w-full"
                        },
                        n.getSchemaTplByName("required"), {
                            type: "switch",
                            name: "trimContents",
                            label: "åŽ»é™¤é¦–å°¾ç©ºç™½",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽï¼Œå°†ä¸å…è®¸ç”¨æˆ·è¾“å…¥å‰åŽç©ºæ ¼"
                        },
                        (t = [{
                            label: "é‚®ç®±æ ¼å¼",
                            value: "isEmail"
                        },
                        {
                            label: "ä¸ä¸ºç©º",
                            value: "notEmptyString"
                        },
                        {
                            label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                            value: "equals"
                        },
                        {
                            label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                            value: "equalsField"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™",
                            value: "matchRegexp"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™2",
                            value: "matchRegexp1"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™3",
                            value: "matchRegexp2"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™4",
                            value: "matchRegexp3"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™5",
                            value: "matchRegexp4"
                        }], a = ["isEmail"], {
                            type: "combo",
                            syncDefaultValue: !1,
                            name: "validations",
                            label: "éªŒè¯è§„åˆ™",
                            addButtonText: "æ–°å¢žè§„åˆ™",
                            multiple: !0,
                            pipeIn: function(e) {
                                if ("string" == typeof e && e && (e = d.str2rules(e)), !r.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    var l;
                                    /^\$\$/.test(a) || t.push(((l = {
                                        type: a
                                    })[a] = Array.isArray(e[a]) ? e[a][0] : e[a], l))
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var l = {};
                                return e.forEach((function(e) {
                                    var i, n = e.type || ((i = c(t, (function(e) {
                                        return ! l[e.value]
                                    }))) ? i.value: "") || t[0].value;
                                    l[n] = e[n] || !!~a.indexOf(n) || ""
                                })),
                                l
                            },
                            controls: [{
                                type: "select",
                                unique: !0,
                                name: "type",
                                options: t,
                                columnClassName: "w-sm"
                            },
                            {
                                type: "text",
                                name: "equals",
                                visibleOn: 'data.type == "equals"',
                                placeholder: "è®¾ç½®å€¼",
                                value: ""
                            },
                            {
                                type: "text",
                                name: "equalsField",
                                visibleOn: 'data.type == "equalsField"',
                                placeholder: "è®¾ç½®å­—æ®µå",
                                value: ""
                            },
                            {
                                type: "text",
                                name: "matchRegexp",
                                visibleOn: 'data.type == "matchRegexp"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp1",
                                visibleOn: 'data.type == "matchRegexp1"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp2",
                                visibleOn: 'data.type == "matchRegexp2"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp3",
                                visibleOn: 'data.type == "matchRegexp3"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp4",
                                visibleOn: 'data.type == "matchRegexp4"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            }]
                        }),
                        function() {
                            var e = [{
                                label: "é‚®ç®±æ ¼å¼",
                                value: "isEmail"
                            },
                            {
                                label: "ä¸ä¸ºç©º",
                                value: "notEmptyString"
                            },
                            {
                                label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                                value: "equals"
                            },
                            {
                                label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                                value: "equalsField"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™",
                                value: "matchRegexp"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™2",
                                value: "matchRegexp1"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™3",
                                value: "matchRegexp2"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™4",
                                value: "matchRegexp3"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™5",
                                value: "matchRegexp4"
                            }],
                            t = {
                                isEmail: "Email æ ¼å¼ä¸æ­£ç¡®",
                                isRequired: "è¿™æ˜¯å¿…å¡«é¡¹",
                                matchRegexp: "æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚",
                                notEmptyString: "è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦",
                                equalsField: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´",
                                equals: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´"
                            };
                            return {
                                type: "combo",
                                syncDefaultValue: !1,
                                name: "validationErrors",
                                label: "è‡ªå®šä¹‰éªŒè¯æç¤º",
                                description: "è‡ªå¸¦æç¤ºä¸æ»¡è¶³æ—¶ï¼Œå¯ä»¥è‡ªå®šä¹‰ã€‚",
                                addButtonText: "æ–°å¢žæç¤º",
                                multiple: !0,
                                pipeIn: function(e) {
                                    if (!r.isObject(e)) return e;
                                    var t = [];
                                    return Object.keys(e).forEach((function(a) { / ^\$\$ / .test(a) || t.push({
                                            type: a,
                                            msg: e[a]
                                        })
                                    })),
                                    t
                                },
                                pipeOut: function(a) {
                                    if (!Array.isArray(a)) return a;
                                    var l = {};
                                    return a.forEach((function(a) {
                                        var i, n = a.type || ((i = c(e, (function(e) {
                                            return ! l[e.value]
                                        }))) ? i.value: "") || e[0].value;
                                        l[n] = a.msg || t[n] || ""
                                    })),
                                    l
                                },
                                controls: [{
                                    type: "select",
                                    unique: !0,
                                    name: "type",
                                    options: e,
                                    columnClassName: "w-sm"
                                },
                                {
                                    type: "text",
                                    name: "msg",
                                    placeholder: "æç¤ºä¿¡æ¯"
                                },
                                {
                                    type: "formula",
                                    name: "msg",
                                    initSet: !1,
                                    formula: "({\n                                            isEmail: 'Email æ ¼å¼ä¸æ­£ç¡®',\n                                            isRequired: 'è¿™æ˜¯å¿…å¡«é¡¹',\n                                            matchRegexp: 'æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚',\n                                            notEmptyString: 'è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦',\n                                            equalsField: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´',\n                                            equals: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´'\n                                        })[data.type] || ''"
                                }]
                            }
                        } (), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                l
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("email-control", {
                name: "é‚®ç®±è¾“å…¥æ¡†",
                description: "éªŒè¯è¾“å…¥æ˜¯å¦ç¬¦åˆé‚®ç®±çš„æ ¼å¼",
                type: "email",
                tags: ["è¡¨å•é¡¹"],
                scaffold: m,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    m)
                },
                $schema: "https://isuda.baidu.com/schemas/TextControlSchema.json"
            })], t)
        } (o.TextControlEditor);
        t.EmailControlEditor = u
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.UrlControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(18),
        r = a(4),
        s = a(6),
        p = a(4),
        c = a(14),
        d = a(5),
        m = {
            type: "url",
            label: "é“¾æŽ¥",
            name: "url"
        },
        u = function(e) {
            function t() {
                var t, a, l = null !== e && e.apply(this, arguments) || this;
                return l.tipName = "Url",
                l.settingsSchema = {
                    title: "é“¾æŽ¥è¾“å…¥é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("hint"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("clearable"), {
                            type: "text",
                            name: "resetValue",
                            label: "æ¸…é™¤åŽçš„é»˜è®¤å€¼",
                            visibleOn: "this.clearable"
                        },
                        {
                            name: "addOn",
                            label: "å¯ç”¨ addOn",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? p.JSONPipeIn({
                                    label: "æŒ‰é’®",
                                    type: "button"
                                }) : null
                            }
                        },
                        {
                            type: "combo",
                            multiLine: !0,
                            name: "addOn",
                            visibleOn: "data.addOn",
                            controls: [{
                                name: "type",
                                label: "ç±»åž‹",
                                type: "button-group",
                                size: "xs",
                                options: [{
                                    label: "æ–‡æœ¬",
                                    value: "text"
                                },
                                {
                                    label: "æŒ‰é’®",
                                    value: "button"
                                },
                                {
                                    label: "æäº¤",
                                    value: "submit"
                                }]
                            },
                            {
                                name: "label",
                                label: "æ–‡å­—",
                                type: "text",
                                visibleOn: 'this.type === "text"'
                            },
                            {
                                name: "icon",
                                label: "Icon",
                                type: "icon-picker",
                                visibleOn: 'this.type === "text"'
                            },
                            n.getSchemaTplByName("className", {
                                visibleOn: 'this.type === "text"'
                            }), {
                                name: "position",
                                label: "ä½ç½®",
                                type: "button-group",
                                size: "xs",
                                pipeIn: n.defaultValue("right"),
                                options: [{
                                    label: "å·¦è¾¹",
                                    value: "left"
                                },
                                {
                                    label: "å³è¾¹",
                                    value: "right"
                                }]
                            }]
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "switch",
                            name: "readOnly",
                            label: "æ˜¯å¦åªè¯»",
                            mode: "inline",
                            className: "w-full"
                        },
                        n.getSchemaTplByName("required"), {
                            type: "switch",
                            name: "trimContents",
                            label: "åŽ»é™¤é¦–å°¾ç©ºç™½",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽï¼Œå°†ä¸å…è®¸ç”¨æˆ·è¾“å…¥å‰åŽç©ºæ ¼"
                        },
                        (t = [{
                            label: "Urlæ ¼å¼",
                            value: "isUrl"
                        },
                        {
                            label: "ä¸ä¸ºç©º",
                            value: "notEmptyString"
                        },
                        {
                            label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                            value: "equals"
                        },
                        {
                            label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                            value: "equalsField"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™",
                            value: "matchRegexp"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™2",
                            value: "matchRegexp1"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™3",
                            value: "matchRegexp2"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™4",
                            value: "matchRegexp3"
                        },
                        {
                            label: "è‡ªå®šä¹‰æ­£åˆ™5",
                            value: "matchRegexp4"
                        }], a = ["isUrl"], {
                            type: "combo",
                            syncDefaultValue: !1,
                            name: "validations",
                            label: "éªŒè¯è§„åˆ™",
                            addButtonText: "æ–°å¢žè§„åˆ™",
                            multiple: !0,
                            pipeIn: function(e) {
                                if ("string" == typeof e && e && (e = d.str2rules(e)), !r.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    var l;
                                    /^\$\$/.test(a) || t.push(((l = {
                                        type: a
                                    })[a] = Array.isArray(e[a]) ? e[a][0] : e[a], l))
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var l = {};
                                return e.forEach((function(e) {
                                    var i, n = e.type || ((i = c(t, (function(e) {
                                        return ! l[e.value]
                                    }))) ? i.value: "") || t[0].value;
                                    l[n] = e[n] || !!~a.indexOf(n) || ""
                                })),
                                l
                            },
                            controls: [{
                                type: "select",
                                unique: !0,
                                name: "type",
                                options: t,
                                columnClassName: "w-sm"
                            },
                            {
                                type: "text",
                                name: "equals",
                                visibleOn: 'data.type == "equals"',
                                placeholder: "è®¾ç½®å€¼",
                                value: ""
                            },
                            {
                                type: "text",
                                name: "equalsField",
                                visibleOn: 'data.type == "equalsField"',
                                placeholder: "è®¾ç½®å­—æ®µå",
                                value: ""
                            },
                            {
                                type: "text",
                                name: "matchRegexp",
                                visibleOn: 'data.type == "matchRegexp"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp1",
                                visibleOn: 'data.type == "matchRegexp1"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp2",
                                visibleOn: 'data.type == "matchRegexp2"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp3",
                                visibleOn: 'data.type == "matchRegexp3"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            },
                            {
                                type: "text",
                                name: "matchRegexp4",
                                visibleOn: 'data.type == "matchRegexp4"',
                                placeholder: "è®¾ç½®æ­£åˆ™è§„åˆ™"
                            }]
                        }),
                        function() {
                            var e = [{
                                label: "Urlæ ¼å¼",
                                value: "isUrl"
                            },
                            {
                                label: "ä¸ä¸ºç©º",
                                value: "notEmptyString"
                            },
                            {
                                label: "ä¸ŽæŒ‡å®šå€¼ç›¸åŒ",
                                value: "equals"
                            },
                            {
                                label: "ä¸ŽæŒ‡å®šå­—æ®µå€¼ç›¸åŒ",
                                value: "equalsField"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™",
                                value: "matchRegexp"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™2",
                                value: "matchRegexp1"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™3",
                                value: "matchRegexp2"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™4",
                                value: "matchRegexp3"
                            },
                            {
                                label: "è‡ªå®šä¹‰æ­£åˆ™5",
                                value: "matchRegexp4"
                            }],
                            t = {
                                isRequired: "è¿™æ˜¯å¿…å¡«é¡¹",
                                isUrl: "Url æ ¼å¼ä¸æ­£ç¡®",
                                isUrlPath: "åªèƒ½è¾“å…¥å­—æ¯ã€æ•°å­—ã€`-` å’Œ `_`.",
                                matchRegexp: "æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚",
                                notEmptyString: "è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦",
                                equalsField: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´",
                                equals: "è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´"
                            };
                            return {
                                type: "combo",
                                syncDefaultValue: !1,
                                name: "validationErrors",
                                label: "è‡ªå®šä¹‰éªŒè¯æç¤º",
                                description: "è‡ªå¸¦æç¤ºä¸æ»¡è¶³æ—¶ï¼Œå¯ä»¥è‡ªå®šä¹‰ã€‚",
                                addButtonText: "æ–°å¢žæç¤º",
                                multiple: !0,
                                pipeIn: function(e) {
                                    if (!r.isObject(e)) return e;
                                    var t = [];
                                    return Object.keys(e).forEach((function(a) { / ^\$\$ / .test(a) || t.push({
                                            type: a,
                                            msg: e[a]
                                        })
                                    })),
                                    t
                                },
                                pipeOut: function(a) {
                                    if (!Array.isArray(a)) return a;
                                    var l = {};
                                    return a.forEach((function(a) {
                                        var i, n = a.type || ((i = c(e, (function(e) {
                                            return ! l[e.value]
                                        }))) ? i.value: "") || e[0].value;
                                        l[n] = a.msg || t[n] || ""
                                    })),
                                    l
                                },
                                controls: [{
                                    type: "select",
                                    unique: !0,
                                    name: "type",
                                    options: e,
                                    columnClassName: "w-sm"
                                },
                                {
                                    type: "text",
                                    name: "msg",
                                    placeholder: "æç¤ºä¿¡æ¯"
                                },
                                {
                                    type: "formula",
                                    name: "msg",
                                    initSet: !1,
                                    formula: "({\n                                            isRequired: 'è¿™æ˜¯å¿…å¡«é¡¹',\n                                            isUrl: 'Url æ ¼å¼ä¸æ­£ç¡®',\n                                            isUrlPath: 'åªèƒ½è¾“å…¥å­—æ¯ã€æ•°å­—ã€`-` å’Œ `_`.',\n                                            matchRegexp: 'æ ¼å¼ä¸æ­£ç¡®, è¯·è¾“å…¥ç¬¦åˆè§„åˆ™ä¸º `$1` çš„å†…å®¹ã€‚',\n                                            notEmptyString: 'è¯·ä¸è¦å…¨è¾“å…¥ç©ºç™½å­—ç¬¦',\n                                            equalsField: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 å€¼ä¸ä¸€è‡´',\n                                            equals: 'è¾“å…¥çš„æ•°æ®ä¸Ž $1 ä¸ä¸€è‡´'\n                                        })[data.type] || ''"
                                }]
                            }
                        } (), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                l
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("url-control", {
                name: "Urlè¾“å…¥æ¡†",
                description: "Urlè¾“å…¥æ¡†",
                type: "url",
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    m)
                },
                scaffold: m,
                $schema: "https://isuda.baidu.com/schemas/UrlControlSchema.json"
            })], t)
        } (o.TextControlEditor);
        t.UrlControlEditor = u
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.NumberControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "number",
            label: "æ•°å­—",
            name: "number"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Number",
                t.settingsSchema = {
                    title: "æ–‡æœ¬æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "number",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "text",
                            name: "min",
                            label: "æœ€å°å€¼",
                            description: "è¯·è¾“å…¥æ•°å­—æˆ–ä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡ï¼Œå¦åˆ™è¯¥é…ç½®ä¸ç”Ÿæ•ˆ"
                        },
                        {
                            type: "text",
                            name: "max",
                            label: "æœ€å¤§å€¼",
                            description: "è¯·è¾“å…¥æ•°å­—æˆ–ä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡ï¼Œå¦åˆ™è¯¥é…ç½®ä¸ç”Ÿæ•ˆ"
                        },
                        {
                            type: "number",
                            name: "step",
                            label: "æ­¥é•¿"
                        },
                        {
                            type: "number",
                            name: "precision",
                            label: "å°æ•°ç‚¹ç²¾åº¦",
                            min: 0,
                            max: 100
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("number-control", {
                name: "æ•°å­—æ¡†",
                description: "æ”¯æŒè®¾å®šæœ€å¤§å€¼å’Œæœ€å°å€¼ï¼Œä»¥åŠæ­¥é•¿ä¸Žç²¾åº¦",
                type: "number",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/NumberControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.NumberControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TagControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(12),
        r = a(7),
        s = a(6),
        p = {
            type: "tag",
            label: "æ ‡ç­¾",
            name: "tag",
            options: ["A", "B", "C"]
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Tag",
                t.settingsSchema = {
                    title: "æ ‡ç­¾é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("hint"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("clearable")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("options", {
                            visibleOn: "data.autoComplete !== false",
                            description: "è®¾ç½®é€‰é¡¹åŽï¼Œè¾“å…¥æ—¶ä¼šä¸‹æ‹‰è¿™äº›é€‰é¡¹ä¾›ç”¨æˆ·å‚è€ƒã€‚"
                        }), n.getSchemaTplByName("api", {
                            name: "source",
                            label: "é€‰é¡¹èŽ·å–æŽ¥å£",
                            description: "å¯ä»¥é€šè¿‡æŽ¥å£èŽ·å–åŠ¨æ€é€‰é¡¹ï¼Œä¸€æ¬¡æ‹‰å–å…¨éƒ¨ã€‚",
                            visibleOn: "data.autoComplete !== false"
                        }), {
                            type: "text",
                            name: "optionsTip",
                            label: "é€‰é¡¹æç¤º",
                            value: "æœ€è¿‘æ‚¨ä½¿ç”¨çš„æ ‡ç­¾"
                        },
                        n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validations"), n.getSchemaTplByName("validationErrors"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.getSettingsValue = function() {
                var t = e.prototype.getSettingsValue.call(this);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.setSettingsValue = function(t) {
                return e.prototype.setSettingsValue.call(this, o(t, ["formHorizontal", "$$formMode"]))
            },
            t = l.__decorate([i.Editor("tag-control", {
                name: "æ ‡ç­¾",
                description: "é…ç½®<code>options</code>å¯ä»¥å®žçŽ°é€‰æ‹©é€‰é¡¹",
                type: "tag",
                tags: ["è¡¨å•é¡¹"],
                scaffold: p,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/TagControlSchema.json"
            })], t)
        } (r.FormItemEditor);
        t.TagControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.SelectControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "select",
            label: "é€‰é¡¹",
            name: "select",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Select",
                t.settingsSchema = {
                    title: "é€‰æ‹©æ¡†",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "select",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            source: "${options}",
                            visibleOn: '!data.multiple && typeof this.value !== "undefined"'
                        },
                        {
                            type: "select",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            source: "${options}",
                            multiple: !0,
                            visibleOn: ' data.multiple && typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable"), {
                            label: "å¯æœç´¢ï¼Ÿ",
                            name: "searchable",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            label: "å¯åˆ›å»ºï¼Ÿ",
                            name: "creatable",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        }])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("multiple"), {
                            label: "å…¨é€‰",
                            name: "checkAll",
                            type: "switch",
                            mode: "inline",
                            value: !1,
                            className: "w-full"
                        },
                        {
                            label: "é»˜è®¤å…¨é€‰",
                            name: "defaultCheckAll",
                            type: "switch",
                            value: !1,
                            visibleOn: "this.checkAll",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            type: "text",
                            name: "checkAllLabel",
                            label: 'é»˜è®¤ä¸º "å…¨é€‰" çš„æ–‡å­—',
                            visibleOn: "this.checkAll",
                            value: "å…¨é€‰"
                        },
                        n.getSchemaTplByName("options"), n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), n.getSchemaTplByName("api", {
                            name: "autoComplete",
                            label: "è‡ªåŠ¨å®ŒæˆæŽ¥å£",
                            description: "æ¯æ¬¡è¾“å…¥æ–°å†…å®¹åŽï¼Œå°†è°ƒç”¨æŽ¥å£ï¼Œæ ¹æ®æŽ¥å£è¿”å›žæ›´æ–°é€‰é¡¹ã€‚å½“å‰ç”¨æˆ·è¾“å…¥å€¼åœ¨ <code>\\${term}</code> ä¸­ã€‚"
                        }), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validations"), n.getSchemaTplByName("validationErrors"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("select-control", {
                name: "ä¸‹æ‹‰æ¡†",
                tags: ["è¡¨å•é¡¹"],
                description: "æ”¯æŒå¤šé€‰ï¼Œè¾“å…¥æç¤ºï¼Œå¯ä½¿ç”¨<code>source</code>èŽ·å–é€‰é¡¹",
                type: "select",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/SelectControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.SelectControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CheckboxControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "checkbox",
            option: "å‹¾é€‰æ¡†",
            name: "checkbox"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Checkbox",
                t.settingsSchema = {
                    title: "å‹¾é€‰æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue", {
                            pipeOut: function(e, t, a) {
                                return e ? a.trueValue: void 0
                            }
                        }), {
                            type: "switch",
                            name: "value",
                            label: "é»˜è®¤å‹¾é€‰",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: 'typeof this.value !== "undefined"',
                            pipeOut: function(e, t, a) {
                                return e ? a.trueValue: a.falseValue
                            }
                        },
                        {
                            name: "option",
                            type: "text",
                            label: "é€‰é¡¹è¯´æ˜Ž"
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "text",
                            label: "å‹¾é€‰åŽçš„å€¼",
                            name: "trueValue",
                            value: !0,
                            pipeOut: n.valuePipeOut
                        },
                        {
                            type: "text",
                            label: "æœªå‹¾é€‰çš„å€¼",
                            name: "falseValue",
                            value: !1,
                            pipeOut: n.valuePipeOut
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("checkbox-control", {
                name: "å‹¾é€‰æ¡†",
                description: "å‹¾é€‰æ¡†",
                tags: ["è¡¨å•é¡¹"],
                type: "checkbox",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: !0
                    },
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/CheckboxControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.CheckboxControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.SwitchControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = function(e) {
            try {
                return JSON.parse(e)
            } catch(t) {
                return e
            }
        },
        p = {
            type: "switch",
            option: "å¼€å…³",
            name: "switch"
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Switch",
                t.settingsSchema = {
                    title: "å¼€å…³é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue", {
                            pipeOut: function(e, t, a) {
                                return e ? a.trueValue: void 0
                            }
                        }), {
                            type: "switch",
                            name: "value",
                            label: "é»˜è®¤å‹¾é€‰",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: 'typeof this.value !== "undefined"',
                            pipeOut: function(e, t, a) {
                                return e ? a.trueValue: a.falseValue
                            }
                        },
                        {
                            name: "option",
                            type: "text",
                            label: "é€‰é¡¹è¯´æ˜Ž"
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "é€‰é¡¹ä½ç½®",
                            name: "optionAtLeft",
                            type: "button-group",
                            size: "sm",
                            value: !1,
                            options: [{
                                label: "å·¦",
                                value: !0
                            },
                            {
                                label: "å³",
                                value: !1
                            }]
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "text",
                            label: "å‹¾é€‰åŽçš„å€¼",
                            name: "trueValue",
                            value: !0,
                            pipeOut: s
                        },
                        {
                            type: "text",
                            label: "æœªå‹¾é€‰çš„å€¼",
                            name: "falseValue",
                            value: !1,
                            pipeOut: s
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("switch-control", {
                name: "å¼€å…³",
                description: "å¼€å…³",
                tags: ["è¡¨å•é¡¹"],
                type: "switch",
                scaffold: p,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: !0
                    },
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/SwitchControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.SwitchControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CheckboxesControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "checkboxes",
            label: "å¤é€‰æ¡†",
            name: "checkboxes",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Checkboxes",
                t.settingsSchema = {
                    title: "å¤é€‰æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue", {
                            visibleOn: "!this.defaultCheckAll"
                        }), {
                            type: "checkboxes",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            source: "${options}",
                            visibleOn: 'typeof this.value !== "undefined"',
                            multiple: !0
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("options"), n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), {
                            name: "checkAll",
                            label: "æ˜¯å¦å¼€å¯å…¨é€‰åŠŸèƒ½",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "defaultCheckAll",
                            label: "æ˜¯å¦é»˜è®¤å…¨é€‰",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            description: "å‹¾é€‰åŽï¼Œé»˜è®¤å€¼çš„é…ç½®å°†æ— æ•ˆã€‚",
                            onChange: function(e, t, a, l) {
                                return e && l.setValueByName("value", void 0)
                            }
                        },
                        n.getSchemaTplByName("joinValues", {
                            visibleOn: !0
                        }), n.getSchemaTplByName("delimiter", {
                            hiddenOn: "data.joinValues === false"
                        }), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), {
                            label: "æ¯è¡Œæ˜¾ç¤ºå¤šå°‘åˆ—",
                            name: "columnsCount",
                            hiddenOn: "data.inline === true",
                            type: "range",
                            min: 1,
                            max: 6,
                            pipeIn: n.defaultValue(1)
                        },
                        n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "å•ä¸ª checkbox ç±»å",
                            name: "itemClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("checkboxes-control", {
                name: "å¤é€‰æ¡†",
                description: "é€šè¿‡<code>options</code>é…ç½®å¤šä¸ªå‹¾é€‰æ¡†ï¼Œä¹Ÿå¯ä»¥é€šè¿‡<code>source</code>æ‹‰å–é€‰é¡¹",
                type: "Checkboxes",
                scaffold: s,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: "A"
                    },
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/CheckboxesControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.CheckboxesControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.RadiosControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "radios",
            label: "å•é€‰æ¡†",
            name: "radios",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Radios",
                t.settingsSchema = {
                    title: "å•é€‰æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "radios",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            source: "${options}",
                            visibleOn: 'typeof this.value !== "undefined"',
                            multiple: !0
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("options"), n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), n.getSchemaTplByName("joinValues", {
                            visibleOn: !0
                        }), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), {
                            name: "inline",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "å†…è”æ¨¡å¼",
                            pipeIn: n.defaultValue(!1)
                        },
                        {
                            label: "æ¯è¡Œæ˜¾ç¤ºå¤šå°‘åˆ—",
                            name: "columnsCount",
                            hiddenOn: "data.inline === true",
                            type: "range",
                            min: 1,
                            max: 6,
                            pipeIn: n.defaultValue(1)
                        },
                        n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "å•ä¸ª Radio ç±»å",
                            name: "itemClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("radios-control", {
                name: "å•é€‰æ¡†",
                tags: ["è¡¨å•é¡¹"],
                description: "é€šè¿‡<code>options</code>é…ç½®é€‰é¡¹ï¼Œå¯é€šè¿‡<code>source</code>æ‹‰å–é€‰é¡¹",
                type: "radios",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: "A"
                    },
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/RadiosControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.RadiosControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ListControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(4),
        r = a(7),
        s = a(6),
        p = a(3),
        c = a(5),
        d = l.__importDefault(a(10)),
        m = a(12),
        u = {
            type: "list",
            label: "åˆ—è¡¨",
            name: "list",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        h = function(e) {
            function t(t, a) {
                var i = e.call(this, t) || this;
                return i.tipName = "List",
                i.settingsSchema = {
                    title: "åˆ—è¡¨é€‰æ‹©é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "list",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            description: "è¯·å¡«å…¥é€‰é¡¹ Options ä¸­ value å€¼",
                            source: "${options}",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable", {
                            label: "å¯ç”¨å¯æ¸…é™¤",
                            description: "å…³é—­æ­¤é€‰é¡¹åŽï¼Œä¸€æ—¦é€‰ä¸­ä¸€ä¸ªå€¼ï¼Œé™åˆ¶ä¸å¯ä»¥è¢«å–æ¶ˆã€‚"
                        })])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("multiple"), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue"), n.getSchemaTplByName("options"), n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        })]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        }), {
                            name: "itemSchema",
                            children: function(e) {
                                var t = e.onChange,
                                a = e.value;
                                return p.createElement("div", {
                                    className: "m-b"
                                },
                                p.createElement(c.Button, {
                                    size: "sm",
                                    level: a ? "danger": "info",
                                    onClick: i.handleEditItemSchema.bind(i)
                                },
                                "å®šåˆ¶å•æ¡å†…å®¹å½¢æ€"), a ? p.createElement(c.Button, {
                                    size: "sm",
                                    level: "link",
                                    className: "m-l",
                                    onClick: function() {
                                        return t(void 0)
                                    }
                                },
                                "æ¸…ç©ºè®¾ç½®") : null)
                            }
                        }]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                i.state = l.__assign({},
                i.modifyProps(t, a)),
                i
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                o.anyChanged(["itemSchema"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                void 0 === t && (t = this.context);
                var a = e.itemSchema;
                return {
                    itemSchema: a = a ? o.JSONPipeOut(a) : a
                }
            },
            t.prototype.handleEditItemSchema = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = o.JSONPipeOut(e.get(t)),
                i = a.itemSchema || {
                    type: "container",
                    body: "<p>Label: ${label}</p>"
                },
                n = Array.isArray(a.options) && a.options.length ? a.options[0] : {
                    label: "å‡æ•°æ®",
                    value: "mock"
                };
                e.openDialog("å•æ¡å†…å®¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        itemSchema: i
                    },
                    controls: [{
                        name: "itemSchema",
                        children: function(t) {
                            var a = t.value,
                            i = t.onChange;
                            return p.createElement(d.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "container"
                                }),
                                onChange: i,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        itemSchema: m(o.JSONPipeIn(a.itemSchema), ["$$edittingDialog"])
                    })
                }), "xl")
            },
            t = l.__decorate([i.Editor("list-control", {
                name: "åˆ—è¡¨é€‰æ‹©",
                description: "å•é€‰æˆ–è€…å¤šé€‰ï¼Œæ”¯æŒ<code>source</code>æ‹‰å–é€‰é¡¹ï¼Œé€‰é¡¹å¯é…ç½®å›¾ç‰‡ï¼Œä¹Ÿå¯ä»¥è‡ªå®šä¹‰<code>HTML</code>é…ç½®",
                type: "list",
                icon: "fa fa-list",
                scaffold: u,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: "A"
                    },
                    u)
                },
                $schema: "https://isuda.baidu.com/schemas/ListControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (r.FormItemEditor);
        t.ListControlEditor = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ChainedSelectControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "chained-select",
            label: "çº§è”é€‰æ‹©",
            name: "chained-select"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Chained Select",
                t.settingsSchema = {
                    title: "çº§è”é€‰æ‹©é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            description: "è¯·å¡«å…¥é€‰é¡¹ Options ä¸­ value å€¼"
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£",
                            description: "<div>å¯ç”¨å˜é‡è¯´æ˜Ž</div><ul>\n                                <li><code>value</code>å½“å‰å€¼</li>\n                                <li><code>level</code>æ‹‰å–çº§åˆ«ï¼Œä»Ž <code>1</code>å¼€å§‹ã€‚</li>\n                                <li><code>parentId</code>ä¸Šä¸€å±‚é€‰ä¸­çš„ <code>value</code> å€¼</li>\n                                <li><code>parent</code>ä¸Šä¸€å±‚é€‰ä¸­é€‰é¡¹ï¼ŒåŒ…å« <code>label</code> å’Œ <code>value</code> çš„å€¼ã€‚</li>\n                            </ul>"
                        }), n.getSchemaTplByName("joinValues", {
                            visibleOn: !0
                        }), n.getSchemaTplByName("delimiter", {
                            visibleOn: "data.joinValues"
                        }), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("chained-select-control", {
                name: "çº§è”ä¸‹æ‹‰æ¡†",
                description: "é€šè¿‡<code>source</code>æ‹‰å–é€‰é¡¹ï¼Œåªè¦æœ‰è¿”å›žç»“æžœï¼Œå°±å¯ä»¥æ— é™çº§åˆ«å¢žåŠ ",
                type: "chained-select",
                scaffold: s,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/ChainedSelectControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.ChainedSelectControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DateControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(5),
        s = a(6),
        p = {
            type: "date",
            label: "æ—¥æœŸ",
            name: "date"
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Date",
                t.settingsSchema = {
                    title: "æ—¥æœŸé…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder", {
                            pipeIn: n.defaultValue("è¯·é€‰æ‹©æ—¥æœŸ")
                        }), {
                            type: "text",
                            name: "format",
                            label: "å€¼æ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("X")
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            visibleOn: 'typeof this.value !== "undefined"',
                            controls: [{
                                type: "date",
                                name: "value",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable", {
                            pipeIn: n.defaultValue(!0)
                        })])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "text",
                            name: "inputFormat",
                            label: "æ˜¾ç¤ºæ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("YYYY-MM-DD")
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "text",
                            name: "minDate",
                            label: "æœ€å°æ—¥æœŸ",
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼ŒåŒæ—¶æ”¯æŒå˜é‡å¦‚<code>\\${start_date}</code>"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date",
                                name: "minDate",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        {
                            type: "text",
                            name: "maxDate",
                            label: "æœ€å¤§æ—¥æœŸ",
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼ŒåŒæ—¶æ”¯æŒå˜é‡å¦‚<code>\\${start_date}</code>"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date",
                                name: "maxDate",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.setSettingsValue = function(t) {
                e.prototype.setSettingsValue.call(this, t);
                var a = this.ref;
                a && a.props.formStore && t.name && a.props.formStore.setValueByName(t.name, t.value ? r.filterDate(t.value, t, t.format || "X").format(t.format || "X") : "")
            },
            t = l.__decorate([i.Editor("date-control", {
                name: "æ—¥æœŸæ¡†",
                description: "å¹´æœˆæ—¥é€‰æ‹©ï¼Œæ”¯æŒç›¸å¯¹å€¼è®¾å®šï¼Œå¦‚<code>+2days</code>ä¸¤å¤©åŽ",
                type: "date",
                tags: ["è¡¨å•é¡¹"],
                icon: "fa fa-calendar",
                scaffold: p,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/DateControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.DateControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DatetimeControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(5),
        s = a(6),
        p = {
            type: "datetime",
            label: "æ—¥æœŸæ—¶é—´",
            name: "datetime"
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Datetime",
                t.settingsSchema = {
                    title: "æ—¥æœŸæ—¶é—´é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder", {
                            pipeIn: n.defaultValue("è¯·é€‰æ‹©æ—¥æœŸæ—¶é—´")
                        }), {
                            type: "text",
                            name: "format",
                            label: "å€¼æ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("X")
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            visibleOn: 'typeof this.value !== "undefined"',
                            controls: [{
                                type: "datetime",
                                name: "value",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable", {
                            pipeIn: n.defaultValue(!0)
                        })])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "text",
                            name: "inputFormat",
                            label: "æ˜¾ç¤ºæ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("YYYY-MM-DD HH:mm")
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "text",
                            name: "minDate",
                            label: "æœ€å°æ—¥æœŸ",
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼ŒåŒæ—¶æ”¯æŒå˜é‡å¦‚<code>\\${start_date}</code>"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date",
                                name: "minDate",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        {
                            type: "text",
                            name: "maxDate",
                            label: "æœ€å¤§æ—¥æœŸ",
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼ŒåŒæ—¶æ”¯æŒå˜é‡å¦‚<code>\\${start_date}</code>"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date",
                                name: "maxDate",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.setSettingsValue = function(t) {
                e.prototype.setSettingsValue.call(this, t);
                var a = this.ref;
                a && a.props.formStore && t.name && a.props.formStore.setValueByName(t.name, t.value ? r.filterDate(t.value, t, t.format || "X").format(t.format || "X") : "")
            },
            t = l.__decorate([i.Editor("datetime-control", {
                name: "æ—¥æœŸæ—¶é—´æ¡†",
                description: "å¹´æœˆæ—¥æ—¶åˆ†é€‰æ‹©",
                type: "datetime",
                tags: ["è¡¨å•é¡¹"],
                scaffold: p,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/DateTimeControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.DatetimeControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TimeControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(5),
        s = a(6),
        p = {
            type: "time",
            label: "æ—¶é—´",
            name: "time"
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Time",
                t.settingsSchema = {
                    title: "æ—¶é—´æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder", {
                            pipeIn: n.defaultValue("è¯·é€‰æ‹©æ—¶é—´")
                        }), {
                            type: "text",
                            name: "format",
                            label: "å€¼æ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("X")
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            visibleOn: 'typeof this.value !== "undefined"',
                            controls: [{
                                type: "time",
                                name: "value",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable", {
                            pipeIn: n.defaultValue(!0)
                        })])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "text",
                            name: "inputFormat",
                            label: "æ˜¾ç¤ºæ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("HH:mm")
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.setSettingsValue = function(t) {
                e.prototype.setSettingsValue.call(this, t);
                var a = this.ref;
                a && a.props.formStore && t.name && a.props.formStore.setValueByName(t.name, t.value ? r.filterDate(t.value, t, t.format || "X").format(t.format || "X") : "")
            },
            t = l.__decorate([i.Editor("time-control", {
                name: "æ—¶é—´æ¡†",
                description: "æ—¶åˆ†è¾“å…¥",
                type: "time",
                tags: ["è¡¨å•é¡¹"],
                scaffold: p,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/TimeControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.TimeControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DateControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(5),
        s = a(6),
        p = {
            type: "date-range",
            label: "æ—¥æœŸèŒƒå›´",
            name: "date-range"
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Date Range",
                t.settingsSchema = {
                    title: "æ—¥æœŸèŒƒå›´é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder", {
                            pipeIn: n.defaultValue("è¯·é€‰æ‹©æ—¥æœŸèŒƒå›´")
                        }), {
                            type: "text",
                            name: "format",
                            label: "å€¼æ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("X")
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼Œç”±äºŽåŒ…å«å¼€å§‹å’Œç»“æŸæ—¶é—´ï¼Œè¯·ç”¨é€—å·éš”å¼€ã€‚"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            visibleOn: 'typeof this.value !== "undefined"',
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date-range",
                                name: "value",
                                pipeIn: function(e) {
                                    return e ? e.split(",").map((function(e) {
                                        return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                    })) : ""
                                }
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable", {
                            pipeIn: n.defaultValue(!0)
                        }), n.getSchemaTplByName("joinValues", {
                            visibleOn: !0
                        }), n.getSchemaTplByName("delimiter", {
                            hiddenOn: "this.joinValues === false"
                        })])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "text",
                            name: "inputFormat",
                            label: "æ˜¾ç¤ºæ ¼å¼",
                            description: 'è¯·å‚è€ƒ <a href="https://momentjs.com/" target="_blank">moment</a> ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚',
                            pipeIn: n.defaultValue("YYYY-MM-DD")
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            type: "text",
                            name: "minDate",
                            label: "æœ€å°æ—¥æœŸ",
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼ŒåŒæ—¶æ”¯æŒå˜é‡å¦‚<code>\\${start_date}</code>"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date",
                                name: "minDate",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        {
                            type: "text",
                            name: "maxDate",
                            label: "æœ€å¤§æ—¥æœŸ",
                            placeholder: "è¯·è¾“å…¥ç›¸å¯¹å€¼",
                            description: "æ”¯æŒ <code>nowã€+1dayã€-2weeks</code>è¿™ç§ç›¸å¯¹å€¼ç”¨æ³•ï¼ŒåŒæ—¶æ”¯æŒå˜é‡å¦‚<code>\\${start_date}</code>"
                        },
                        {
                            type: "fieldSet",
                            title: "å›ºå®šå€¼é€‰æ‹©",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "date",
                                name: "maxDate",
                                pipeIn: function(e) {
                                    return r.relativeValueRe.test(e) || ~ ["now", "today"].indexOf(e) ? "": e
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.setSettingsValue = function(t) {
                e.prototype.setSettingsValue.call(this, t);
                var a = this.ref;
                a && a.props.formStore && t.name && a.props.formStore.setValueByName(t.name, t.value ? t.value.split(",").map((function(e) {
                    return e ? r.filterDate(e, t, t.format || "X").format(t.format || "X") : ""
                })) : "")
            },
            t = l.__decorate([i.Editor("date-range-control", {
                name: "æ—¥æœŸèŒƒå›´",
                description: "æ—¥æœŸèŒƒå›´é€‰æ‹©ï¼Œå¯é€šè¿‡<code>minDate</code>ã€<code>maxDate</code>è®¾å®šæœ€å°ã€æœ€å¤§æ—¥æœŸ",
                type: "date-range",
                tags: ["è¡¨å•é¡¹"],
                scaffold: p,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/DateRangeControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.DateControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TextControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "color",
            label: "é¢œè‰²",
            name: "color"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Color",
                t.settingsSchema = {
                    title: "é¢œè‰²æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), {
                            label: "æ ¼å¼",
                            name: "format",
                            type: "button-group",
                            size: "sm",
                            pipeIn: n.defaultValue("hex"),
                            options: ["hex", "hls", "rgb", "rgba"]
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            type: "color",
                            name: "value",
                            visibleOn: 'typeof this.value !== "undefined"',
                            label: "é»˜è®¤å€¼"
                        },
                        n.getSchemaTplByName("switchDefaultValue", {
                            name: "presetColors",
                            label: "è®¾ç½®é€‰æ‹©å™¨ä¸­é¢œè‰²é»˜è®¤å€¼",
                            description: "ä¸ºç©ºæ—¶ä¸æ˜¾ç¤ºé€‰æ‹©å™¨ä¸­çš„é»˜è®¤å€¼"
                        }), {
                            type: "array",
                            name: "presetColors",
                            label: "é€‰æ‹©å™¨ä¸­é¢œè‰²é»˜è®¤å€¼",
                            addable: !0,
                            removable: !0,
                            visibleOn: 'typeof this.presetColors !== "undefined"',
                            items: {
                                type: "color"
                            },
                            value: ["#D0021B", "#F5A623", "#F8E71C", "#8B572A", "#7ED321", "#417505", "#BD10E0", "#9013FE", "#4A90E2", "#50E3C2", "#B8E986", "#000000", "#4A4A4A", "#9B9B9B", "#FFFFFF"]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("color-control", {
                name: "é¢œè‰²æ¡†",
                description: "æ”¯æŒ<code>hexã€hlsã€rgbã€rgba</code>æ ¼å¼ï¼Œé»˜è®¤ä¸º<code>hex</code>æ ¼å¼",
                type: "color",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/ColorControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.TextControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TextAreaControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "textarea",
            label: "å¤šè¡Œæ–‡æœ¬",
            name: "textarea"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Textarea",
                t.settingsSchema = {
                    title: "å¤šè¡Œæ–‡æœ¬é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "textarea",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("hint"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "number",
                            name: "minRows",
                            value: 3,
                            label: "æœ€å°è¡Œæ•°"
                        },
                        {
                            type: "number",
                            name: "maxRows",
                            value: 20,
                            label: "æœ€å¤§è¡Œæ•°"
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), {
                            type: "switch",
                            name: "trimContents",
                            label: "åŽ»é™¤é¦–å°¾ç©ºç™½",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽï¼Œå°†ä¸å…è®¸ç”¨æˆ·è¾“å…¥å‰åŽç©ºæ ¼"
                        },
                        n.getSchemaTplByName("validations"), n.getSchemaTplByName("validationErrors"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("textarea-control", {
                name: "å¤šè¡Œæ–‡æœ¬æ¡†",
                description: "å¤šè¡Œæ–‡æœ¬æ¡†",
                type: "textarea",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/TextareaControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.TextAreaControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.RichTextControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "rich-text",
            label: "å¯Œæ–‡æœ¬",
            name: "rich-text"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "RichText",
                t.settingsSchema = {
                    title: "å¯Œæ–‡æœ¬é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "textarea",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "fieldSet",
                            title: "é…ç½®æ ",
                            _name: "options",
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "combo",
                                name: "options",
                                noBorder: !0,
                                multiLine: !0,
                                controls: [{
                                    type: "select",
                                    name: "language",
                                    label: "è¯­è¨€",
                                    labelRemark: "é¼ æ ‡è¦†ç›–é…ç½®æ ä¸­é…ç½®æ—¶æ˜¾ç¤ºçš„æç¤ºè¯­è¨€",
                                    defaultValue: "zh_cn",
                                    options: [{
                                        label: "ä¸­æ–‡",
                                        value: "zh_cn"
                                    },
                                    {
                                        label: "è‹±æ–‡",
                                        value: "en_us"
                                    }]
                                },
                                {
                                    type: "textarea",
                                    name: "toolbarButtons",
                                    label: "å¤§å±æ—¶å±•ç¤ºçš„é…ç½®é¡¹",
                                    labelRemark: "å±å¹•å®½åº¦ â‰¥ 1200px",
                                    description: 'ä½¿ç”¨ç©ºæ ¼åˆ†å¼€é…ç½®ï¼Œä½¿ç”¨<code>|</code>å¯å°†é…ç½®æ åˆ†ç»„ï¼Œ<a target="_blank" href="https://www.froala.com/wysiwyg-editor/docs/options">å‚è€ƒæ–‡æ¡£</a>',
                                    minRows: 5,
                                    pipeIn: function(e) {
                                        return Array.isArray(e) ? e.join(" ") : ""
                                    },
                                    pipeOut: function(e) {
                                        return e.replace(/\s+/g, " ").split(" ")
                                    }
                                },
                                {
                                    type: "textarea",
                                    name: "toolbarButtonsMD",
                                    label: "ä¸­å±æ—¶å±•ç¤ºçš„é…ç½®é¡¹",
                                    labelRemark: "å±å¹•å®½åº¦ â‰¥ 992px",
                                    description: 'ä½¿ç”¨ç©ºæ ¼åˆ†å¼€é…ç½®ï¼Œä½¿ç”¨<code>|</code>å¯å°†é…ç½®æ åˆ†ç»„ï¼Œ<a target="_blank" href="https://www.froala.com/wysiwyg-editor/docs/options">å‚è€ƒæ–‡æ¡£</a>',
                                    minRows: 5,
                                    pipeIn: function(e) {
                                        return Array.isArray(e) ? e.join(" ") : ""
                                    },
                                    pipeOut: function(e) {
                                        return e.replace(/\s+/g, " ").split(" ")
                                    }
                                },
                                {
                                    type: "textarea",
                                    name: "toolbarButtonsSM",
                                    label: "å°å±æ—¶å±•ç¤ºçš„é…ç½®é¡¹",
                                    labelRemark: "å±å¹•å®½åº¦ â‰¥ 768px",
                                    description: 'ä½¿ç”¨ç©ºæ ¼åˆ†å¼€é…ç½®ï¼Œä½¿ç”¨<code>|</code>å¯å°†é…ç½®æ åˆ†ç»„ï¼Œ<a target="_blank" href="https://www.froala.com/wysiwyg-editor/docs/options">å‚è€ƒæ–‡æ¡£</a>',
                                    minRows: 5,
                                    pipeIn: function(e) {
                                        return Array.isArray(e) ? e.join(" ") : ""
                                    },
                                    pipeOut: function(e) {
                                        return e.replace(/\s+/g, " ").split(" ")
                                    }
                                }]
                            }]
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("api", {
                            name: "reciever",
                            label: "æ–‡ä»¶æŽ¥æ”¶æŽ¥å£",
                            value: "/api/upload/image"
                        }), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("rich-text-control", {
                name: "å¯Œæ–‡æœ¬",
                tags: ["è¡¨å•é¡¹"],
                description: "å¯è‡ªå®šä¹‰å¯Œæ–‡æœ¬çš„é…ç½®æ ",
                type: "rich-text",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/RichTextControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.RichTextControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FileControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "image",
            label: "å›¾ç‰‡ä¸Šä¼ ",
            name: "image",
            imageClassName: "r w-full",
            src: "https://fex.bdstatic.com/n/static/amis/renderers/crud/field/placeholder_cfad9b1.png"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Image",
                t.settingsSchema = {
                    title: "å›¾ç‰‡ä¸Šä¼ é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("multiple", {
                            value: !1
                        }), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            name: "maxSize",
                            type: "number",
                            label: "å›¾ç‰‡æœ€å¤§ä½“ç§¯",
                            description: "è¶…å‡ºå¤§å°ä¸å…è®¸ä¸Šä¼ ï¼Œå•ä½å­—èŠ‚"
                        },
                        {
                            name: "maxLength",
                            type: "number",
                            label: "å›¾ç‰‡æœ€å¤§æ•°é‡",
                            visibleOn: "data.multiple",
                            description: "è¶…å‡ºæ•°é‡ä¸å…è®¸ä¸Šä¼ "
                        },
                        n.getSchemaTplByName("apiString", {
                            label: "æ–‡ä»¶æŽ¥æ”¶æŽ¥å£",
                            name: "reciever",
                            description: "æ–‡ä»¶æŽ¥æ”¶æŽ¥å£ï¼Œé»˜è®¤ä¸å¡«åˆ™ä¸Šä¼ åˆ° hiphoto",
                            value: "/api/upload"
                        }), {
                            type: "text",
                            value: "image/jpeg, image/jpg, image/png, image/gif",
                            name: "accept",
                            label: "å›¾ç‰‡ç±»åž‹",
                            description: "è¯·å¡«å…¥å›¾ç‰‡çš„ <code>MimeType</code>ï¼Œå¤šä¸ªç±»åž‹ç”¨<code>,</code>éš”å¼€ã€‚"
                        },
                        {
                            type: "switch",
                            name: "hideUploadButton",
                            value: !1,
                            label: "éšè—ä¸Šä¼ æŒ‰é’®",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            type: "switch",
                            name: "autoUpload",
                            value: !1,
                            label: "è‡ªåŠ¨ä¸Šä¼ ",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "compress",
                            type: "switch",
                            label: "å¼€å¯åŽ‹ç¼©",
                            value: !0,
                            mode: "inline",
                            className: "w-full",
                            description: "ç”± hiphoto å®žçŽ°ï¼Œè‡ªå®šä¹‰æŽ¥å£å°†æ— æ•ˆã€‚"
                        },
                        {
                            type: "combo",
                            name: "compressOptions",
                            multiLine: !0,
                            label: "åŽ‹ç¼©é…ç½®",
                            visibleOn: "data.compress",
                            controls: [{
                                type: "number",
                                label: "æœ€å¤§å®½åº¦",
                                name: "maxWidth"
                            },
                            {
                                type: "number",
                                label: "æœ€å¤§é«˜åº¦",
                                name: "maxHeight"
                            }]
                        },
                        {
                            name: "showCompressOptions",
                            type: "switch",
                            label: "æ˜¯å¦æ˜¾ç¤ºåŽ‹ç¼©é€‰é¡¹",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "crop",
                            type: "switch",
                            label: "æ˜¯å¦å¼€å¯è£å‰ª",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: function(e) {
                                return !! e
                            }
                        },
                        {
                            name: "crop.aspectRatio",
                            type: "text",
                            label: "è£å‰ªæ¯”çŽ‡",
                            visibleOn: "data.crop",
                            pipeOut: n.valuePipeOut
                        },
                        {
                            type: "fieldSet",
                            title: "å›¾ç‰‡é™åˆ¶",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "number",
                                name: "limit.width",
                                label: "é™åˆ¶å®½åº¦"
                            },
                            {
                                type: "number",
                                name: "limit.height",
                                label: "é™åˆ¶é«˜åº¦"
                            },
                            {
                                type: "number",
                                name: "limit.maxWidth",
                                label: "é™åˆ¶æœ€å¤§å®½åº¦"
                            },
                            {
                                type: "number",
                                name: "limit.maxHeight",
                                label: "é™åˆ¶æœ€å¤§é«˜åº¦"
                            },
                            {
                                type: "number",
                                name: "limit.minWidth",
                                label: "é™åˆ¶æœ€å°å®½åº¦"
                            },
                            {
                                type: "number",
                                name: "limit.minHeight",
                                label: "é™åˆ¶æœ€å°é«˜åº¦"
                            },
                            {
                                type: "number",
                                name: "limit.aspectRatio",
                                label: "é™åˆ¶å®½é«˜æ¯”çŽ‡"
                            },
                            {
                                type: "text",
                                name: "limit.é™åˆ¶æœ€å°é«˜åº¦",
                                label: "å®½é«˜æ¯”æè¿°",
                                description: "å½“å®½é«˜æ¯”æ²¡æœ‰æ»¡è¶³æ¡ä»¶æ—¶ï¼Œæ­¤æè¿°å°†ä½œä¸ºæç¤ºä¿¡æ¯æ˜¾ç¤º"
                            }]
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("image-control", {
                name: "å›¾ç‰‡ä¸Šä¼ ",
                description: "å¯ä»¥å¯¹å›¾ç‰‡å®žçŽ°è£å‰ªï¼Œé™åˆ¶å›¾ç‰‡çš„å®½é«˜ä»¥åŠå¤§å°ï¼Œæ”¯æŒè‡ªåŠ¨ä¸Šä¼ åŠä¸Šä¼ å¤šå¼ å›¾ç‰‡",
                type: "image",
                scaffold: s,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/ImageControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.FileControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.RangeControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "range",
            label: "èŒƒå›´",
            name: "range"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Range",
                t.settingsSchema = {
                    title: "èŒƒå›´é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "number",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            validations: "isNumeric",
                            visibleOn: 'typeof data.value !== "undefined" && !data.multiple',
                            pipeIn: function(e) {
                                return "number" == typeof e ? e: 0
                            },
                            pipeOut: function(e, t, a) {
                                return e < a.min && a.min || e > a.max && a.max || e
                            }
                        },
                        {
                            type: "combo",
                            name: "value",
                            visibleOn: 'typeof data.value !== "undefined" && this.multiple',
                            controls: [{
                                type: "number",
                                validations: "isNumeric",
                                name: "min",
                                label: "å°å€¼"
                            },
                            {
                                type: "number",
                                validations: "isNumeric",
                                name: "max",
                                label: "å¤§å€¼"
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable"), n.getSchemaTplByName("multiple", {
                            pipeIn: n.defaultValue(!1)
                        }), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "text",
                            name: "unit",
                            label: "å•ä½",
                            value: ""
                        },
                        {
                            type: "switch",
                            name: "showInput",
                            mode: "inline",
                            label: "æ˜¯å¦æ˜¾ç¤ºè¾“å…¥æ¡†",
                            value: !1
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            label: "æœ€å°å€¼",
                            name: "min",
                            type: "number",
                            value: 0
                        },
                        {
                            label: "æœ€å¤§å€¼",
                            name: "max",
                            type: "number",
                            value: 100
                        },
                        {
                            label: "æ­¥ä¼",
                            name: "step",
                            type: "number",
                            value: 1
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("range-control", {
                name: "èŒƒå›´è¾“å…¥",
                tags: ["è¡¨å•é¡¹"],
                description: "é€‰æ‹©æŸä¸ªå€¼æˆ–è€…æŸä¸ªèŒƒå›´",
                type: "range",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/RangeControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.RangeControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FileControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "file",
            label: "æ–‡ä»¶ä¸Šä¼ ",
            name: "file"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "File",
                t.settingsSchema = {
                    title: "æ–‡ä»¶ä¸Šä¼ é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), {
                            type: "text",
                            name: "btnLabel",
                            label: "ä¸Šä¼ æŒ‰é’®åç§°",
                            value: "è¯·é€‰æ‹©æ–‡ä»¶"
                        },
                        n.getSchemaTplByName("description"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("apiString", {
                            label: "æ–‡ä»¶æŽ¥æ”¶å™¨",
                            name: "reciever",
                            description: "é»˜è®¤ä¸å¡«å†™å°†ä¸Šä¼ åˆ° bosï¼Œå¯ä»¥åœ¨ç³»ç»Ÿé…ç½®ä¸­è®¾ç½®ä¸ºè‡ªå·±çš„ bos åœ°å€ã€‚",
                            value: "/api/upload/file"
                        }), {
                            type: "fieldSet",
                            title: "åˆ†å—ä¸Šä¼ ç›¸å…³",
                            collapsed: !0,
                            collapsable: !0,
                            className: "fieldset",
                            controls: [{
                                type: "button-group",
                                name: "useChunk",
                                label: "å¯ç”¨åˆ†å—",
                                size: "xs",
                                pipeOut: n.valuePipeOut,
                                value: "auto",
                                options: [{
                                    label: "è‡ªåŠ¨",
                                    value: "auto"
                                },
                                {
                                    label: "å¯ç”¨",
                                    value: !0
                                },
                                {
                                    label: "å…³é—­",
                                    value: !1
                                }]
                            },
                            {
                                name: "chunkSize",
                                type: "number",
                                label: "åˆ†å—å¤§å°",
                                visibleOn: "data.useChunk != false",
                                value: 5242880
                            },
                            n.getSchemaTplByName("apiString", {
                                name: "startChunkApi",
                                label: "startChunkApi",
                                value: "/api/upload/startChunk"
                            }), n.getSchemaTplByName("apiString", {
                                name: "chunkApi",
                                label: "chunkApi",
                                value: "/api/upload/chunk"
                            }), n.getSchemaTplByName("apiString", {
                                name: "finishChunkApi",
                                label: "finishChunkApi",
                                value: "/api/upload/finishChunk"
                            })]
                        },
                        {
                            type: "text",
                            name: "accept",
                            label: "æ–‡ä»¶ç±»åž‹",
                            value: "text/plain",
                            description: "è¯·å¡«å†™æ–‡ä»¶çš„ <code>mime-types</code>ï¼Œå‚è€ƒ <code>input[type=file]</code> çš„ <code>accept</code> è¯´æ˜Ž"
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("multiple", {
                            pipeIn: n.defaultValue(!1)
                        }), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        }), n.getSchemaTplByName("className", {
                            name: "btnClassName",
                            label: "æŒ‰é’® CSS ç±»å",
                            pipeIn: n.defaultValue("btn-sm btn-info")
                        }), n.getSchemaTplByName("className", {
                            name: "btnUploadClassName",
                            label: "ä¸Šä¼ æŒ‰é’® CSS ç±»å",
                            pipeIn: n.defaultValue("btn-sm btn-success")
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            name: "maxSize",
                            type: "number",
                            label: "æ–‡ä»¶æœ€å¤§ä½“ç§¯",
                            description: "è¶…å‡ºå¤§å°ä¸å…è®¸ä¸Šä¼ ï¼Œå•ä½å­—èŠ‚"
                        },
                        {
                            name: "maxLength",
                            type: "number",
                            label: "æ–‡ä»¶æœ€å¤§æ•°é‡",
                            description: "è¶…å‡ºæ•°é‡ä¸å…è®¸ä¸Šä¼ "
                        },
                        {
                            name: "fileField",
                            type: "text",
                            label: "æ–‡ä»¶åŸŸåç§°",
                            value: "file"
                        },
                        {
                            name: "asBase64",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "ä½œä¸º Base64 æäº¤",
                            description: "å°æ–‡ä»¶æ—¶å¯ä»¥ä½¿ç”¨ï¼Œé»˜è®¤ç»™ Form æäº¤çš„æ˜¯æ–‡ä»¶ä¸‹è½½åœ°å€ï¼Œè®¾ç½®åŽç»™ Form æäº¤æ–‡ä»¶å†…å®¹çš„ base64 æ ¼å¼å­—ç¬¦ä¸²ã€‚"
                        },
                        {
                            name: "asBlob",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "ä½œä¸ºäºŒè¿›åˆ¶æäº¤",
                            description: "File æŽ§ä»¶ä¸æŽ¥ç®¡æ–‡ä»¶ä¸Šä¼ ï¼Œç›´æŽ¥ç”±è¡¨å•çš„ä¿å­˜æŽ¥å£å®Œæˆã€‚å’Œ Base64 é€‰é¡¹äºŒé€‰ä¸€ã€‚"
                        },
                        {
                            name: "autoUpload",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦è‡ªåŠ¨ä¸Šä¼ "
                        },
                        {
                            name: "hideUploadButton",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦éšè—ä¸Šä¼ æŒ‰é’®",
                            value: !1
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("file-control", {
                name: "æ–‡ä»¶ä¸Šä¼ ",
                description: "å¯ä¸Šä¼ å¤šä¸ªæ–‡ä»¶ï¼Œå¯é…ç½®æ˜¯å¦è‡ªåŠ¨ä¸Šä¼ ä»¥åŠå¤§æ–‡ä»¶åˆ†ç‰‡ä¸Šä¼ ",
                type: "file",
                scaffold: s,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/FileControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.FileControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TreeControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "tree",
            label: "æ ‘",
            name: "tree",
            options: [{
                label: "é€‰é¡¹A",
                value: "A",
                children: [{
                    label: "é€‰é¡¹C",
                    value: "C"
                },
                {
                    label: "é€‰é¡¹D",
                    value: "D"
                }]
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Tree",
                t.settingsSchema = {
                    definitions: {
                        options: {
                            label: "é€‰é¡¹ Options",
                            name: "options",
                            type: "combo",
                            multiple: !0,
                            multiLine: !0,
                            draggable: !0,
                            addButtonText: "æ–°å¢žé€‰é¡¹",
                            scaffold: {
                                label: "",
                                value: ""
                            },
                            controls: [{
                                type: "group",
                                controls: [{
                                    type: "text",
                                    name: "label",
                                    placeholder: "åç§°",
                                    required: !0
                                },
                                {
                                    type: "text",
                                    name: "value",
                                    placeholder: "å€¼",
                                    unique: !0
                                }]
                            },
                            {
                                $ref: "options",
                                label: "å­é€‰é¡¹",
                                name: "children",
                                addButtonText: "æ–°å¢žå­é€‰é¡¹"
                            }]
                        }
                    },
                    title: "æ ‘é€‰æ‹©æ¡†é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [{
                            $ref: "options",
                            name: "options"
                        },
                        n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), {
                            label: "éšè—é¡¶çº§",
                            name: "hideRoot",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "showIcon",
                            label: "æ˜¯å¦æ˜¾ç¤ºå›¾æ ‡",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: n.defaultValue(!0)
                        },
                        n.getSchemaTplByName("multiple"), {
                            name: "cascade",
                            visibleOn: "data.multiple",
                            label: "ä¸è‡ªåŠ¨é€‰ä¸­å­èŠ‚ç‚¹ï¼Ÿ",
                            type: "switch",
                            description: "é€‰ä¸­çˆ¶çº§æ—¶ï¼Œå­©å­èŠ‚ç‚¹æ˜¯å¦è‡ªåŠ¨é€‰ä¸­",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "withChildren",
                            visibleOn: "data.cascade !== true && data.multiple",
                            label: "æ•°å€¼æ˜¯å¦æºå¸¦å­èŠ‚ç‚¹",
                            type: "switch",
                            disabledOn: "data.onlyChildren",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "onlyChildren",
                            visibleOn: "data.cascade !== true && data.multiple",
                            label: "æ•°å€¼æ˜¯å¦åªåŒ…å«å­èŠ‚ç‚¹",
                            disabledOn: "data.withChildren",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "é¡¶çº§æ–‡å­—",
                            name: "rootLabel",
                            type: "text",
                            pipeIn: n.defaultValue("é¡¶çº§"),
                            visibleOn: "data.hideRoot !== true"
                        },
                        {
                            name: "showIcon",
                            label: "æ˜¯å¦æ˜¾ç¤ºå›¾æ ‡",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: n.defaultValue(!0)
                        },
                        {
                            label: "æ˜¯å¦æ˜¾ç¤ºå•é€‰æŒ‰é’®",
                            name: "showRadio",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: "!data.multiple"
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("tree-control", {
                name: "æ ‘é€‰æ‹©æ¡†",
                description: "æ ‘åž‹ç»“æž„æ¥é€‰æ‹©ï¼Œå¯é€šè¿‡<code>options</code>æ¥é…ç½®é€‰é¡¹ï¼Œä¹Ÿå¯é€šè¿‡<code>source</code>æ‹‰å–é€‰é¡¹",
                type: "tree",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/TreeControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.TreeControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TreeSelectControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "tree-select",
            label: "æ ‘é€‰æ‹©æ¡†",
            name: "tree-select",
            options: [{
                label: "é€‰é¡¹A",
                value: "A",
                children: [{
                    label: "é€‰é¡¹C",
                    value: "C"
                },
                {
                    label: "é€‰é¡¹D",
                    value: "D"
                }]
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Tree Select",
                t.settingsSchema = {
                    title: "æ ‘é€‰æ‹©æ¡†é…ç½®",
                    definitions: {
                        options: {
                            label: "é€‰é¡¹ Options",
                            name: "options",
                            type: "combo",
                            multiple: !0,
                            multiLine: !0,
                            draggable: !0,
                            addButtonText: "æ–°å¢žé€‰é¡¹",
                            scaffold: {
                                label: "",
                                value: ""
                            },
                            controls: [{
                                type: "group",
                                controls: [{
                                    type: "text",
                                    name: "label",
                                    placeholder: "åç§°",
                                    required: !0
                                },
                                {
                                    type: "text",
                                    name: "value",
                                    placeholder: "å€¼",
                                    unique: !0
                                }]
                            },
                            {
                                $ref: "options",
                                label: "å­é€‰é¡¹",
                                name: "children",
                                addButtonText: "æ–°å¢žå­é€‰é¡¹"
                            }]
                        }
                    },
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("clearable")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [{
                            $ref: "options",
                            name: "options"
                        },
                        n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), n.getSchemaTplByName("api", {
                            name: "autoComplete",
                            label: "è‡ªåŠ¨å®ŒæˆæŽ¥å£",
                            description: "æ¯æ¬¡è¾“å…¥æ–°å†…å®¹åŽï¼Œå°†è°ƒç”¨æŽ¥å£ï¼Œæ ¹æ®æŽ¥å£è¿”å›žæ›´æ–°é€‰é¡¹ã€‚å½“å‰ç”¨æˆ·è¾“å…¥å€¼åœ¨ `\\${term}` ä¸­ã€‚<code>è¯·ä¸è¦ä¸ŽèŽ·å–é€‰é¡¹æŽ¥å£åŒæ—¶è®¾ç½®ã€‚</code>"
                        }), {
                            name: "initiallyOpen",
                            label: "æ˜¯å¦é»˜è®¤å±•å¼€å­é€‰é¡¹",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: n.defaultValue(!0)
                        },
                        {
                            type: "text",
                            name: "unfoldedLevel",
                            label: "é€‰é¡¹é»˜è®¤å±•å¼€çº§æ•°",
                            visibleOn: 'typeof this.initiallyOpen !== "undefined" || !this.initiallyOpen'
                        },
                        {
                            name: "showIcon",
                            label: "æ˜¯å¦æ˜¾ç¤ºå›¾æ ‡",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: n.defaultValue(!0)
                        },
                        {
                            label: "å¯æœç´¢ï¼Ÿ",
                            name: "searchable",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            label: "æ˜¯å¦æ˜¾ç¤ºå•é€‰æŒ‰é’®",
                            name: "showRadio",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: "!data.multiple"
                        },
                        n.getSchemaTplByName("multiple"), {
                            name: "cascade",
                            visibleOn: "data.multiple",
                            label: "ä¸è‡ªåŠ¨é€‰ä¸­å­èŠ‚ç‚¹ï¼Ÿ",
                            description: "é€‰ä¸­çˆ¶çº§æ—¶ï¼Œå­©å­èŠ‚ç‚¹æ˜¯å¦è‡ªåŠ¨é€‰ä¸­",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "withChildren",
                            visibleOn: "data.cascade !== true && data.multiple",
                            label: "æ•°å€¼æ˜¯å¦æºå¸¦å­èŠ‚ç‚¹",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("tree-select-control", {
                name: "æ ‘åž‹ä¸‹æ‹‰æ¡†",
                description: "ç‚¹å‡»è¾“å…¥æ¡†ï¼Œå¼¹å‡ºæ ‘åž‹é€‰æ‹©æ¡†è¿›è¡Œé€‰æ‹©",
                type: "tree-select",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/TreeSelectControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.TreeSelectControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.HiddenControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = {
            type: "hidden",
            name: "var1"
        },
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Hidden",
                t.placeholder = "åŠŸèƒ½ç»„ä»¶ï¼ˆéšè—å­—æ®µï¼‰",
                t.settingsSchema = {
                    title: "éšè—å­—æ®µé…ç½®",
                    controls: [{
                        label: "å­—æ®µå",
                        name: "name",
                        type: "text",
                        required: !0
                    },
                    {
                        type: "text",
                        name: "value",
                        label: "é»˜è®¤å€¼"
                    }]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(e) {
                return this.renderPlaceholder(e)
            },
            t = l.__decorate([i.Editor("hidden-control", {
                name: "éšè—åŸŸ",
                description: "éšè—è¡¨å•é¡¹",
                type: "hidden",
                scaffold: o,
                tags: ["è¡¨å•é¡¹", "åŠŸèƒ½"],
                previewSchema: {
                    type: "tpl",
                    tpl: "éšè—åŸŸ"
                },
                $schema: "https://isuda.baidu.com/schemas/HiddenControlSchema.json"
            })], t)
        } (n.
    default);
        t.HiddenControlEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FormulaControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = a(6),
        s = {
            type: "formula",
            name: "formula"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Formula",
                t.placeholder = "åŠŸèƒ½ç»„ä»¶ï¼ˆå…¬å¼ï¼‰",
                t.settingsSchema = {
                    title: "å…¬å¼é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([{
                            label: "å­—æ®µå",
                            name: "name",
                            type: "text",
                            description: "å…¬å¼è®¡ç®—ç»“æžœä¼šä½œç”¨åˆ°æ­¤å­—æ®µåå¯¹åº”çš„å˜é‡ä¸­ã€‚"
                        },
                        {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼"
                        },
                        {
                            type: "text",
                            name: "formula",
                            label: "å…¬å¼",
                            description: "æ”¯æŒ JS è¡¨è¾¾å¼ï¼Œå¦‚ï¼š <code>data.var_a + 2</code>ï¼Œå³å½“è¡¨å•é¡¹ <code>var_a</code> å˜åŒ–çš„æ—¶å€™ï¼Œä¼šè‡ªåŠ¨ç»™å½“å‰è¡¨å•é¡¹è®¾ç½®ä¸º <code>var_a + 2</code> çš„å€¼ã€‚è‹¥è®¾ç½®ä¸ºå­—ç¬¦ä¸²ï¼Œåˆ™éœ€è¦åŠ å¼•å·"
                        },
                        {
                            type: "text",
                            name: "condition",
                            label: "ä½œç”¨æ¡ä»¶",
                            description: 'æ”¯æŒå¦‚ï¼š<code>\\${xxx}</code>æˆ–è€…<code>data.xxx == "a"</code> è¡¨è¾¾å¼æ¥é…ç½®ä½œç”¨æ¡ä»¶ï¼Œå½“æ»¡è¶³è¯¥ä½œç”¨æ¡ä»¶æ—¶ï¼Œä¼šå°†è®¡ç®—ç»“æžœè®¾ç½®åˆ°ç›®æ ‡å˜é‡ä¸Šã€‚'
                        },
                        {
                            name: "initSet",
                            type: "switch",
                            label: "æ˜¯å¦åˆå§‹åº”ç”¨",
                            pipeIn: o.defaultValue(!0),
                            description: "æ˜¯å¦åˆå§‹åŒ–çš„æ—¶å€™è¿è¡Œå…¬å¼ç»“æžœï¼Œå¹¶è®¾ç½®åˆ°ç›®æ ‡å˜é‡ä¸Šã€‚",
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "autoSet",
                            type: "switch",
                            label: "æ˜¯å¦è‡ªåŠ¨åº”ç”¨",
                            pipeIn: o.defaultValue(!0),
                            mode: "inline",
                            className: "block",
                            description: "æ˜¯å¦è‡ªåŠ¨è®¡ç®—å…¬å¼ç»“æžœï¼Œæœ‰å˜åŒ–æ—¶è‡ªåŠ¨è®¾ç½®åˆ°ç›®æ ‡å˜é‡ä¸Šã€‚<br />å…³é—­åŽï¼Œé€šè¿‡æŒ‰é’®ä¹Ÿèƒ½è§¦å‘è¿ç®—ã€‚"
                        }])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("name", {
                            name: "id"
                        })]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(e) {
                return this.renderPlaceholder(e)
            },
            t = l.__decorate([i.Editor("formula-control", {
                name: "å…¬å¼è¡¨å•é¡¹",
                description: "é€šè¿‡å…¬å¼è®¡ç®—æŒ‡å®šçš„å˜é‡å€¼ï¼Œå¹¶å°†å…¶ç»“æžœä½œç”¨åˆ°æŒ‡å®šçš„å˜é‡ä¸­",
                type: "formula",
                tags: ["è¡¨å•é¡¹", "åŠŸèƒ½"],
                scaffold: s,
                previewSchema: {
                    type: "tpl",
                    tpl: "è®¡ç®—å…¬å¼"
                },
                $schema: "https://isuda.baidu.com/schemas/FormulaControlSchema.json"
            })], t)
        } (n.
    default);
        t.FormulaControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ArrayControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = l.__importDefault(a(10)),
        p = a(7),
        c = a(6),
        d = a(4),
        m = {
            type: "array",
            label: "æ•°ç»„è¾“å…¥æ¡†",
            name: "array",
            items: {
                type: "text"
            }
        },
        u = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                return a.tipName = "Array",
                a.settingsSchema = {
                    title: "æ•°ç»„è¾“å…¥é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: c([r.getSchemaTplByName("formItemName", {
                            required: !0
                        }), r.getSchemaTplByName("label"), r.getSchemaTplByName("description"), r.getSchemaTplByName("switchDefaultValue"), {
                            type: "textarea",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            pipeOut: r.valuePipeOut
                        },
                        {
                            name: "items",
                            value: {
                                type: "text"
                            },
                            children: i.
                        default.createElement(o.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                block: !0,
                                onClick: a.handleEditFormItem.bind(a)
                            },
                            "é…ç½®å•é¡¹è¡¨å•ç±»åž‹")
                        },
                        r.getSchemaTplByName("remark"), r.getSchemaTplByName("labelRemark"), {
                            label: "æ˜¯å¦å¯æ–°å¢ž",
                            type: "switch",
                            name: "addable",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            label: "æ–°å¢žæŒ‰é’®æ–‡å­—",
                            name: "addButtonText",
                            type: "text",
                            visibleOn: "data.addable",
                            pipeIn: r.defaultValue("æ–°å¢ž")
                        },
                        {
                            type: "textarea",
                            name: "scaffold",
                            label: "æ–°å¢žåˆå§‹å€¼",
                            visibleOn: "this.addable !== false",
                            pipeOut: r.valuePipeOut,
                            pipeIn: r.defaultValue("")
                        },
                        {
                            label: "æ˜¯å¦å¯åˆ é™¤",
                            type: "switch",
                            name: "removable",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: r.defaultValue(!0)
                        },
                        r.getSchemaTplByName("api", {
                            name: "deleteApi",
                            label: "åˆ é™¤å‰çš„è¯·æ±‚",
                            visibleOn: "data.removable"
                        }), {
                            label: "åˆ é™¤ç¡®è®¤æç¤º",
                            name: "deleteConfirmText",
                            type: "text",
                            visibleOn: "data.deleteApi",
                            pipeIn: r.defaultValue("ç¡®è®¤è¦åˆ é™¤")
                        },
                        {
                            name: "draggable",
                            label: "å¯ç”¨æ‹–æ‹½æŽ’åº",
                            type: "switch",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            label: "æ‹–æ‹½æŽ’åºçš„æç¤ºæ–‡å­—",
                            name: "draggableTip",
                            type: "text",
                            visibleOn: "data.draggable",
                            pipeIn: r.defaultValue("å¯é€šè¿‡æ‹–åŠ¨æ¯è¡Œä¸­çš„ã€äº¤æ¢ã€‘æŒ‰é’®è¿›è¡Œé¡ºåºè°ƒæ•´")
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), r.getSchemaTplByName("formItemSize"), r.getSchemaTplByName("fontItemInline"), {
                            name: "draggableTip",
                            visibleOn: "data.draggable",
                            type: "text",
                            label: "å¯æ‹–æ‹½æŽ’åºæç¤ºæ–‡å­—",
                            pipeIn: r.defaultValue("å¯é€šè¿‡æ‹–åŠ¨æ¯è¡Œä¸­çš„ã€äº¤æ¢ã€‘æŒ‰é’®è¿›è¡Œé¡ºåºè°ƒæ•´")
                        },
                        {
                            name: "addButtonText",
                            type: "text",
                            label: "æ–°å¢žæŒ‰é’®æ–‡å­—",
                            pipeIn: r.defaultValue("æ–°å¢ž")
                        },
                        r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("minLength"), r.getSchemaTplByName("maxLength"), r.getSchemaTplByName("required"), r.getSchemaTplByName("validateOnChange"), r.getSchemaTplByName("submitOnChange"), r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                a.toolbarBtns.push({
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®å•é¡¹è¡¨å•ç±»åž‹",
                    id: "edit-contents"
                }),
                a
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                return "edit-contents" === t ? this.handleEditFormItem() : e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleEditFormItem = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = d.JSONPipeOut(e.get(t).items);
                e.openDialog("é…ç½®å•é¡¹è¡¨å•ç±»åž‹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        items: a
                    },
                    controls: [{
                        name: "items",
                        children: function(t) {
                            var a = t.value,
                            n = t.onChange;
                            return i.
                        default.createElement(s.
                        default, {
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "/page/body/form/0/control",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    $$replaceable: !0
                                }),
                                onChange: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        items: d.JSONPipeIn(a.items)
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("array-control", {
                name: "æ•°ç»„è¾“å…¥æ¡†",
                description: "å¤šä¸ªè¡¨å•é¡¹çš„é›†åˆï¼Œä¸Ž<code>combo</code>çš„ä¸åŒåœ¨äºŽ<code>array</code>åªå­˜å‚¨è¡¨å•é¡¹çš„å€¼è€Œä¸æ˜¯å¯¹è±¡",
                type: "array",
                tags: ["è¡¨å•é¡¹"],
                scaffold: m,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: {
                        type: "array",
                        label: "æ•°ç»„è¾“å…¥æ¡†",
                        name: "array",
                        value: [""],
                        items: {
                            type: "text",
                            name: "a"
                        }
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/ArrayControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object])], t)
        } (p.FormItemEditor);
        t.ArrayControlEditor = u
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ComboControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = l.__importDefault(a(10)),
        p = a(4),
        c = a(4),
        d = a(7),
        m = a(6),
        u = {
            type: "combo",
            label: "ç»„åˆè¾“å…¥",
            name: "combo",
            controls: [{
                type: "text",
                name: "text",
                placeholder: "æ–‡æœ¬"
            }]
        },
        h = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                return n.tipName = "Combo",
                n.settingsSchema = {
                    title: "ç»„åˆè¾“å…¥é…ç½®",
                    controls: n.props.$$contentMode ? [{
                        children: i.
                    default.createElement("div", null, i.
                    default.createElement(o.Button, {
                            level: "info",
                            size: "sm",
                            className: "m-b-sm",
                            onClick: n.handleAdd.bind(n),
                            block: !0
                        },
                        "æ–°å¢žè¡¨å•é¡¹"))
                    },
                    {
                        name: "controls",
                        label: "å„åˆ— CSS é…ç½®",
                        hiddenOn: "this.multiLine",
                        type: "combo",
                        addable: !1,
                        removable: !1,
                        multiple: !0,
                        controls: [{
                            name: "columnClassName",
                            placeholder: "CSS ç±»å",
                            type: "text"
                        }]
                    }] : [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: m([r.getSchemaTplByName("formItemName", {
                            required: !0
                        }), r.getSchemaTplByName("label"), r.getSchemaTplByName("description"), {
                            name: "conditions",
                            type: "button-group",
                            size: "sm",
                            mode: "inline",
                            className: "block",
                            options: [{
                                label: "å›ºå®šæˆå‘˜ç±»åž‹",
                                value: "1"
                            },
                            {
                                label: "å¤šåˆ†æ”¯",
                                value: "2"
                            }],
                            pipeIn: function(e) {
                                return e ? "2": "1"
                            },
                            pipeOut: function(e) {
                                return 2 == e ? [{}] : void 0
                            }
                        },
                        {
                            visibleOn: "!this.conditions",
                            children: i.
                        default.createElement(o.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                onClick: n.handleEditFormItem.bind(n),
                                block: !0
                            },
                            "é…ç½®ç»„åˆè¡¨å•è¯¦æƒ…")
                        },
                        {
                            name: "conditions",
                            visibleOn: "this.conditions",
                            type: "combo",
                            label: "åˆ†æ”¯ç®¡ç†",
                            multiple: !0,
                            multiLine: !0,
                            minLength: 1,
                            controls: [{
                                label: "åç§°",
                                name: "label",
                                type: "text",
                                required: !0
                            },
                            {
                                label: "å‘½ä¸­æ¡ä»¶",
                                name: "test",
                                required: !0,
                                type: "text",
                                placeholder: 'æ¯”å¦‚: this.type === "text"',
                                description: "æ ¹æ®æˆå‘˜æ•°æ®åˆ¤æ–­æ˜¯å¦ä½¿ç”¨æ­¤åˆ†æ”¯"
                            },
                            {
                                children: function(e) {
                                    var t = e.index;
                                    return i.
                                default.createElement(o.Button, {
                                        size: "sm",
                                        level: "danger",
                                        className: "m-b-sm",
                                        onClick: n.handleEditConditionFormItem.bind(n, t),
                                        block: !0
                                    },
                                    "é…ç½®ç»„åˆè¡¨å•è¯¦æƒ…")
                                }
                            },
                            {
                                type: "textarea",
                                name: "scaffold",
                                required: !0,
                                label: "æ–°å¢žåˆå§‹å€¼",
                                pipeOut: r.valuePipeOut,
                                pipeIn: r.defaultValue({})
                            }]
                        },
                        {
                            name: "typeSwitchable",
                            visibleOn: "this.conditions",
                            label: "æ˜¯å¦å¯åˆ‡æ¢ç±»åž‹",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            pipeIn: r.defaultValue(!0)
                        },
                        r.getSchemaTplByName("switchDefaultValue", {
                            visibleOn: "!this.defaultCheckAll"
                        }), {
                            type: "textarea",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            pipeOut: r.valuePipeOut,
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        r.getSchemaTplByName("remark"), r.getSchemaTplByName("labelRemark"), {
                            label: "å¤šè¡Œæ¨¡å¼",
                            name: "multiLine",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            value: !1,
                            description: "å³æ˜¯å¦è¦æ¢è¡Œ"
                        },
                        r.getSchemaTplByName("multiple"), r.getSchemaTplByName("joinValues"), r.getSchemaTplByName("delimiter"), {
                            type: "switch",
                            name: "flat",
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¯å¦å°†å€¼æ‰“å¹³",
                            visibleOn: "Array.isArray(data.controls) && data.controls.length === 1 && data.multiple",
                            description: "é»˜è®¤æ•°ç»„å†…çš„æ•°æ®ç»“æž„ä¸ºå¯¹è±¡ï¼Œå¦‚æžœåªæœ‰ä¸€ä¸ªè¡¨å•é¡¹ï¼Œå¯ä»¥é…ç½®å°†å€¼æ‰“å¹³ï¼Œé‚£ä¹ˆæ•°ç»„å†…æ”¾ç½®çš„å°±æ˜¯é‚£ä¸ªè¡¨å•é¡¹çš„å€¼"
                        },
                        {
                            label: "æ˜¯å¦å¯æ–°å¢ž",
                            type: "switch",
                            name: "addable",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: "this.multiple",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            type: "textarea",
                            name: "scaffold",
                            label: "æ–°å¢žåˆå§‹å€¼",
                            visibleOn: "this.multiple && this.addable !== false",
                            pipeOut: r.valuePipeOut,
                            pipeIn: r.defaultValue({})
                        },
                        {
                            label: "æ–°å¢žæŒ‰é’®æ–‡å­—",
                            name: "addButtonText",
                            type: "text",
                            visibleOn: "data.addable",
                            pipeIn: r.defaultValue("æ–°å¢ž")
                        },
                        {
                            label: "æ˜¯å¦å¯åˆ é™¤",
                            type: "switch",
                            name: "removable",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: "this.multiple",
                            pipeIn: r.defaultValue(!0)
                        },
                        r.getSchemaTplByName("api", {
                            name: "deleteApi",
                            label: "åˆ é™¤å‰çš„è¯·æ±‚",
                            hiddenOn: "!data.removable"
                        }), {
                            label: "åˆ é™¤ç¡®è®¤æç¤º",
                            name: "deleteConfirmText",
                            type: "text",
                            visibleOn: "data.deleteApi",
                            pipeIn: r.defaultValue("ç¡®è®¤è¦åˆ é™¤")
                        },
                        {
                            name: "draggable",
                            label: "æ˜¯å¦å¯æ‹–æ‹½æŽ’åº",
                            type: "switch",
                            visibleOn: "this.multiple",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            label: "æ‹–æ‹½æŽ’åºçš„æç¤ºæ–‡å­—",
                            name: "draggableTip",
                            type: "text",
                            visibleOn: "data.draggable",
                            pipeIn: r.defaultValue("å¯é€šè¿‡æ‹–åŠ¨æ¯è¡Œä¸­çš„ã€äº¤æ¢ã€‘æŒ‰é’®è¿›è¡Œé¡ºåºè°ƒæ•´")
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), r.getSchemaTplByName("formItemSize"), r.getSchemaTplByName("fontItemInline"), {
                            name: "noBorder",
                            label: "åŽ»æŽ‰è¾¹æ¡†",
                            type: "switch",
                            visibleOn: "this.multiLine",
                            mode: "inline",
                            className: "w-full"
                        },
                        r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), {
                            name: "minLength",
                            type: "number",
                            label: "é™åˆ¶æœ€å°æ•°é‡"
                        },
                        {
                            name: "maxLength",
                            type: "number",
                            label: "é™åˆ¶æœ€å¤§æ•°é‡"
                        },
                        r.getSchemaTplByName("required"), r.getSchemaTplByName("validateOnChange"), {
                            label: "é»˜è®¤æ¶ˆæ¯æç¤º",
                            type: "combo",
                            name: "messages",
                            multiLine: !0,
                            description: "",
                            controls: [{
                                label: "æœ‰å­è¡¨å•é¡¹é™åˆ¶å¤±è´¥æ—¶æç¤º",
                                type: "text",
                                name: "validateFailed"
                            },
                            {
                                label: "æœ€å°é•¿åº¦éªŒè¯å¤±è´¥æ—¶æç¤º",
                                type: "text",
                                name: "minLengthValidateFailed"
                            },
                            {
                                label: "æœ€å¤§é•¿åº¦éªŒè¯å¤±è´¥æ—¶æç¤º",
                                type: "text",
                                name: "maxLengthValidateFailed"
                            }]
                        },
                        r.getSchemaTplByName("submitOnChange"), {
                            name: "canAccessSuperData",
                            label: "æ˜¯å¦è‡ªåŠ¨å¡«å……çˆ¶çº§åŒåå˜é‡",
                            type: "switch",
                            pipeIn: r.defaultValue(!1),
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "strictMode",
                            label: "ä¸¥æ ¼æ¨¡å¼",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: r.defaultValue(!0),
                            description: "å¦‚æžœä½ å¸Œæœ›çŽ¯å¢ƒå˜é‡çš„å€¼å®žæ—¶é€ä¼ åˆ° Combo ä¸­ï¼Œè¯·å…³é—­æ­¤é€‰é¡¹ã€‚"
                        },
                        r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                n.toolbarBtns.splice( - 1, 0, t.$$contentMode ? {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ ä¸€åˆ—",
                    id: "add"
                }: {
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®ç»„åˆè¡¨å•",
                    id: "edit-contents",
                    test: function(e) {
                        return ! e.conditions
                    }
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                p.anyChanged(["controls", "$$contentMode"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.handleToolbarAction = function(t) {
                return "edit-contents" === t ? this.handleEditFormItem() : ("add" === t ? this.handleAdd() : "paste" === t && this.addChild("controls", this.props.clipboard), e.prototype.handleToolbarAction.call(this, t))
            },
            t.prototype.modifyProps = function(e, t) {
                void 0 === t && (t = this.context);
                var a = e.controls,
                l = e.$$contentMode;
                t.editor;
                return ! l && Array.isArray(a) && (a = a.map((function(e) {
                    return c.JSONPipeOut(e)
                }))),
                {
                    controls: a
                }
            },
            t.prototype.handleAdd = function() {
                this.pickChild("control", "controls", void 0, void 0, !0)
            },
            t.prototype.handleEditFormItem = function() {
                var e = this.context.editor,
                t = this.props,
                a = t.multiLine,
                l = t.$$id,
                n = c.JSONPipeOut(e.get(l).controls);
                e.openDialog("é…ç½®ç»„åˆè¡¨å•é¡¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        controls: n
                    },
                    controls: [{
                        name: "controls",
                        children: function(t) {
                            var l = t.value,
                            n = t.onChange;
                            return i.
                        default.createElement(s.
                        default, {
                                autoFocus: !0,
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "page/body/form/control",
                                value: {
                                    type: "combo",
                                    multiLine: a,
                                    multiple: !1,
                                    formInited: !0,
                                    controls: l || []
                                },
                                onChange: function(e) {
                                    return n(e.controls)
                                },
                                $$contentMode: !0,
                                $$codeEditable: !1,
                                previewProps: {
                                    onChange: p.noop
                                },
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(t) {
                    return e.update(l, {
                        controls: p.JSONPipeIn(t.controls)
                    })
                }), "xl")
            },
            t.prototype.handleEditConditionFormItem = function(e) {
                var t = this.context.editor,
                a = this.props,
                n = a.multiLine,
                o = a.$$id,
                r = c.JSONPipeOut(t.get(o).conditions),
                d = (r = Array.isArray(r) ? r: [])[e];
                t.openDialog("é…ç½®ç»„åˆè¡¨å•é¡¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        controls: d.controls
                    },
                    controls: [{
                        name: "controls",
                        children: function(e) {
                            var a = e.value,
                            l = e.onChange;
                            return i.
                        default.createElement(s.
                        default, {
                                autoFocus: !0,
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "page/body/form/control",
                                value: {
                                    type: "combo",
                                    multiLine: n,
                                    multiple: !1,
                                    controls: a || []
                                },
                                onChange: function(e) {
                                    return l(e.controls)
                                },
                                $$contentMode: !0,
                                $$codeEditable: !1,
                                previewProps: {
                                    onChange: p.noop
                                },
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    r.splice(e, 1, l.__assign(l.__assign({},
                    d), {
                        controls: p.JSONPipeIn(a.controls)
                    })),
                    t.update(o, {
                        conditions: r
                    })
                }), "xl")
            },
            t.prototype.renderRenderer = function(t) {
                return t.label || t.controls && (!Array.isArray(t.controls) || t.controls.length) ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t = l.__decorate([n.Editor("combo-control", {
                name: "ç»„åˆè¾“å…¥æ¡†",
                description: "å¤šä¸ªè¡¨å•é¡¹çš„ç»„åˆï¼Œå¯é…ç½®æ˜¯å¦å¢žåŠ å’Œåˆ é™¤åˆå§‹è®¾å®šçš„æ¨¡æ¿",
                type: "combo",
                scaffold: u,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        multiple: !0,
                        value: [{}]
                    },
                    u)
                },
                $schema: "https://isuda.baidu.com/schemas/ComboControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (d.FormItemEditor);
        t.ComboControlEditor = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.PickerControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = a(7),
        p = l.__importDefault(a(10)),
        c = a(12),
        d = a(6),
        m = a(4),
        u = a(19),
        h = {
            type: "picker",
            label: "åˆ—è¡¨é€‰å–",
            name: "picker",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        b = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                return n.tipName = "Picker",
                n.settingsSchema = {
                    title: "åˆ—è¡¨é€‰å–é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: d([r.getSchemaTplByName("formItemName", {
                            required: !0
                        }), r.getSchemaTplByName("label"), r.getSchemaTplByName("description"), {
                            type: "switch",
                            name: "embed",
                            mode: "inline",
                            className: "w-full",
                            label: "å¼€å¯å†…åµŒæ¨¡å¼"
                        },
                        r.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        r.getSchemaTplByName("remark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [r.getSchemaTplByName("options"), r.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), {
                            children: i.
                        default.createElement(o.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                onClick: n.handleEditModal.bind(n),
                                block: !0
                            },
                            "é…ç½®é€‰æ¡†è¯¦æƒ…")
                        },
                        {
                            label: "labelTpl",
                            type: "textarea",
                            name: "labelTpl",
                            labelRemark: "å·²é€‰å®šæ•°æ®çš„å±•ç¤ºæ ·å¼",
                            description: 'æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡ï¼Œæˆ–è€…ç”¨ lodash.template è¯­æ³•æ¥å†™æ¨¡æ¿é€»è¾‘ã€‚<a target="_blank" href="/docs/renderers/Tpl">è¯¦æƒ…</a>'
                        },
                        {
                            type: "button-group",
                            name: "modalMode",
                            label: "é€‰æ¡†ç±»åž‹",
                            value: "dialog",
                            size: "xs",
                            options: [{
                                label: "å¼¹æ¡†",
                                value: "dialog"
                            },
                            {
                                label: "æŠ½å‡ºå¼å¼¹æ¡†",
                                value: "drawer"
                            }]
                        },
                        r.getSchemaTplByName("multiple"), r.getSchemaTplByName("joinValues"), r.getSchemaTplByName("delimiter"), r.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("required"), r.getSchemaTplByName("validateOnChange"), r.getSchemaTplByName("submitOnChange"), r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                n.toolbarBtns.push({
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®é€‰æ¡†è¯¦æƒ…",
                    id: "edit-contents"
                }),
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                u.anyChanged(["pickerSchema"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                void 0 === t && (t = this.context);
                var a = this.props.pickerSchema;
                return {
                    pickerSchema: m.JSONPipeOut(a)
                }
            },
            t.prototype.handleToolbarAction = function(t) {
                return "edit-contents" === t ? this.handleEditModal() : e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleEditModal = function() {
                var e = this,
                t = this.context.editor,
                a = this.props,
                n = a.$$id,
                o = a.valueField,
                r = a.multiple,
                s = this.ref,
                d = m.JSONPipeOut(t.get(n).pickerSchema);
                t.openDialog("é…ç½®é€‰æ¡†è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        pickerSchema: d
                    },
                    controls: [{
                        name: "pickerSchema",
                        children: function(a) {
                            var n = a.value,
                            c = a.onChange;
                            return i.
                        default.createElement(p.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({
                                    type: "crud",
                                    mode: "list"
                                },
                                n || {
                                    listItem: {
                                        title: "${label}"
                                    }
                                }), {
                                    pickerMode: !0,
                                    multiple: r
                                }),
                                onChange: function(e) {
                                    return c(l.__assign({},
                                    e))
                                },
                                previewProps: {
                                    value: s.props.formItem.selectedOptions,
                                    valueField: o,
                                    options: s.props.formItem.filteredOptions,
                                    multiple: r,
                                    pickerMode: !0,
                                    syncLocation: !1,
                                    api: e.props.source,
                                    bulkActions: r ? n.bulkActions: []
                                },
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(e) {
                    return t.update(n, {
                        pickerSchema: c(m.JSONPipeIn(e.pickerSchema), ["pickMode", "multiple", "type"])
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("picker-control", {
                name: "åˆ—è¡¨é€‰å–",
                description: "é€šè¿‡<code>pickerSchema</code>é…ç½®å¯ä¾›é€‰å–çš„æ•°æ®æºè¿›è¡Œé€‰æ‹©éœ€è¦çš„æ•°æ®ï¼Œæ”¯æŒå¤šé€‰",
                type: "picker",
                tags: ["è¡¨å•é¡¹"],
                scaffold: h,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: "A"
                    },
                    h)
                },
                $schema: "https://isuda.baidu.com/schemas/PickerControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (s.FormItemEditor);
        t.PickerControlEditor = b
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.EditorControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(23),
        o = a(2),
        r = a(4),
        s = a(7),
        p = a(6),
        c = {
            type: "editor",
            label: "ç¼–è¾‘å™¨",
            name: "editor"
        },
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Editor",
                t.settingsSchema = {
                    title: "ç¼–è¾‘å™¨é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: p([o.getSchemaTplByName("formItemName", {
                            required: !0
                        }), o.getSchemaTplByName("label"), o.getSchemaTplByName("description"), {
                            label: "è¯­è¨€",
                            name: "language",
                            type: "select",
                            value: "javascript",
                            searchable: !0,
                            options: n.availableLanguages.concat()
                        },
                        o.getSchemaTplByName("switchDefaultValue"), {
                            type: "textarea",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            pipeOut: o.valuePipeOut,
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        o.getSchemaTplByName("remark"), o.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("formItemMode"), o.getSchemaTplByName("horizontalMode"), o.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), {
                            name: "size",
                            type: "button-group",
                            size: "sm",
                            pipeIn: o.defaultValue(""),
                            className: "w-full",
                            label: "æŽ§ä»¶å°ºå¯¸",
                            options: [{
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "ä¸­",
                                value: "md"
                            },
                            {
                                label: "å¤§",
                                value: "lg"
                            },
                            {
                                label: "åŠ å¤§",
                                value: "xl"
                            },
                            {
                                label: "å†åŠ å¤§",
                                value: "xxl"
                            }]
                        },
                        o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("required"), o.getSchemaTplByName("validateOnChange"), o.getSchemaTplByName("submitOnChange"), o.getSchemaTplByName("disabled"), o.getSchemaTplByName("visible")]
                    }])]
                },
                t._settingsSchema = {
                    title: "ç¼–è¾‘å™¨é…ç½®",
                    controls: l.__spreadArrays(r.omitControls(t.commonSettingsLeading, ["size"]), [{
                        type: "textarea",
                        name: "value",
                        label: "é»˜è®¤å€¼",
                        pipeOut: o.valuePipeOut
                    },
                    {
                        label: "è¯­è¨€",
                        name: "language",
                        type: "select",
                        value: "javascript",
                        searchable: !0,
                        options: n.availableLanguages.concat()
                    },
                    {
                        name: "size",
                        type: "button-group",
                        size: "xs",
                        pipeIn: o.defaultValue(""),
                        options: [{
                            label: "é»˜è®¤",
                            value: ""
                        },
                        {
                            label: "ä¸­",
                            value: "md"
                        },
                        {
                            label: "å¤§",
                            value: "lg"
                        },
                        {
                            label: "åŠ å¤§",
                            value: "xl"
                        },
                        {
                            label: "åŠ åŠ å¤§",
                            value: "xxl"
                        }]
                    },
                    o.getSchemaTplByName("required"), o.getSchemaTplByName("validations"), o.getSchemaTplByName("validateOnChange")], t.commonSettingsTrailing)
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("editor-control", {
                name: "ä»£ç ç¼–è¾‘å™¨",
                description: "å¤šç§ç±»åž‹çš„è¯­è¨€å¯ä¾›é€‰æ‹©ï¼Œæ”¯æŒçš„è¯­è¨€åŒ…æ‹¬ bat/c/coffeescript/cpp/csharp/css/dockerfile/fsharp/go/handlebars/html/ini/java/javascript/json/less/lua/markdown/msdax/objective-c/php/plaintext/postiats/powershell/pug/python/r/razor/ruby/sb/scss/sol/sql/swift/typescript/vb/xml/yaml",
                type: "editor",
                tags: ["è¡¨å•é¡¹"],
                icon: "fa fa-cloud",
                scaffold: c,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    c)
                },
                $schema: "https://isuda.baidu.com/schemas/EditorControlSchema.json"
            })], t)
        } (s.FormItemEditor);
        t.EditorControlEditor = d,
        n.availableLanguages.forEach((function(e) {}))
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DiffEditorControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(23),
        o = a(2),
        r = a(7),
        s = a(6),
        p = {
            type: "diff-editor",
            label: "diffç¼–è¾‘å™¨",
            name: "diff"
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Diff Editor",
                t.settingsSchema = {
                    title: "diffç¼–è¾‘å™¨é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([o.getSchemaTplByName("formItemName", {
                            required: !0
                        }), o.getSchemaTplByName("label"), o.getSchemaTplByName("description"), {
                            type: "textarea",
                            name: "diffValue",
                            label: "å·¦ä¾§å€¼",
                            pipeOut: o.valuePipeOut,
                            description: "æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡"
                        },
                        o.getSchemaTplByName("switchDefaultValue", {
                            label: "è®¾ç½®å³ä¾§é»˜è®¤å€¼"
                        }), {
                            type: "textarea",
                            name: "value",
                            label: "å³ä¾§é»˜è®¤å€¼",
                            pipeOut: o.valuePipeOut,
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        {
                            label: "è¯­è¨€",
                            name: "language",
                            type: "select",
                            value: "javascript",
                            searchable: !0,
                            options: n.availableLanguages.concat()
                        },
                        o.getSchemaTplByName("remark"), o.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("formItemMode"), o.getSchemaTplByName("horizontalMode"), o.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), {
                            name: "size",
                            type: "button-group",
                            size: "sm",
                            pipeIn: o.defaultValue(""),
                            className: "w-full",
                            label: "æŽ§ä»¶å°ºå¯¸",
                            options: [{
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "ä¸­",
                                value: "md"
                            },
                            {
                                label: "å¤§",
                                value: "lg"
                            },
                            {
                                label: "åŠ å¤§",
                                value: "xl"
                            },
                            {
                                label: "å†åŠ å¤§",
                                value: "xxl"
                            }]
                        },
                        o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("required"), o.getSchemaTplByName("validateOnChange"), o.getSchemaTplByName("submitOnChange"), o.getSchemaTplByName("disabled"), o.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("diff-editor-control", {
                name: "ä»£ç diffç¼–è¾‘å™¨",
                description: "å·¦å³ä¸¤è¾¹çš„ä»£ç åšå¯¹æ¯”ï¼Œæ”¯æŒçš„è¯­è¨€åŒ…æ‹¬ bat/c/coffeescript/cpp/csharp/css/dockerfile/fsharp/go/handlebars/html/ini/java/javascript/json/less/lua/markdown/msdax/objective-c/php/plaintext/postiats/powershell/pug/python/r/razor/ruby/sb/scss/sol/sql/swift/typescript/vb/xml/yaml",
                type: "diff-editor",
                tags: ["è¡¨å•é¡¹"],
                scaffold: p,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    p)
                },
                $schema: "https://isuda.baidu.com/schemas/EditorControlSchema.json"
            })], t)
        } (r.FormItemEditor);
        t.DiffEditorControlEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TableControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = a(4),
        p = a(7),
        c = l.__importDefault(a(10)),
        d = a(4),
        m = a(6),
        u = {
            type: "table",
            label: "è¡¨æ ¼",
            name: "table",
            editable: !0,
            addable: !0,
            columns: [{
                name: "a",
                label: "åˆ—A"
            },
            {
                name: "b",
                label: "åˆ—B"
            }]
        },
        h = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                return n.tipName = "Table",
                n.handleAdd = function() {
                    return n.pickChild("field", "columns", void 0, ["plain", "tpl", "image", "progress", "date", "mapping", "operation", "status", "list"])
                },
                n.settingsSchema = {
                    title: "è¡¨æ ¼é…ç½®",
                    controls: n.props.$$contentMode ? [{
                        children: i.
                    default.createElement("div", null, i.
                    default.createElement(o.Button, {
                            level: "info",
                            size: "sm",
                            className: "m-b-sm",
                            onClick: n.handleAdd,
                            block: !0
                        },
                        "æ–°å¢žä¸€åˆ—"))
                    },
                    {
                        children: i.
                    default.createElement("div", null, i.
                    default.createElement(o.Button, {
                            level: "success",
                            size: "sm",
                            block: !0,
                            onClick: n.handleColumnsQuickEdit.bind(n)
                        },
                        "å¿«é€Ÿç¼–è¾‘åˆ—ä¿¡æ¯"))
                    }] : [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: m([{
                            children: i.
                        default.createElement("div", {
                                className: "m-b"
                            },
                            i.
                        default.createElement(o.Button, {
                                level: "success",
                                size: "sm",
                                block: !0,
                                onClick: function() {
                                    return n.handleEditFormItem()
                                }
                            },
                            "é…ç½®åˆ—ä¿¡æ¯"))
                        },
                        r.getSchemaTplByName("formItemName", {
                            required: !0
                        }), r.getSchemaTplByName("label"), r.getSchemaTplByName("description"), {
                            label: "æ˜¯å¦å¯æ–°å¢ž",
                            type: "switch",
                            name: "addable",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            type: "text",
                            name: "addBtnLabel",
                            label: "å¢žåŠ æŒ‰é’®åç§°",
                            visibleOn: "data.addable",
                            pipeIn: r.defaultValue("")
                        },
                        {
                            name: "addBtnIcon",
                            label: "å¢žåŠ æŒ‰é’®å›¾æ ‡",
                            type: "icon-picker",
                            visibleOn: "data.addable"
                        },
                        r.getSchemaTplByName("api", {
                            name: "addApi",
                            label: "æ–°å¢žæ—¶æäº¤çš„ API",
                            visibleOn: "data.addable"
                        }), {
                            label: "æ˜¯å¦å¯åˆ é™¤",
                            type: "switch",
                            name: "removable",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            type: "text",
                            name: "deleteBtnLabel",
                            label: "åˆ é™¤æŒ‰é’®åç§°",
                            visibleOn: "data.removable",
                            pipeIn: r.defaultValue("")
                        },
                        {
                            name: "deleteBtnIcon",
                            label: "åˆ é™¤æŒ‰é’®å›¾æ ‡",
                            type: "icon-picker",
                            visibleOn: "data.removable"
                        },
                        r.getSchemaTplByName("api", {
                            name: "deleteApi",
                            label: "åˆ é™¤æ—¶æäº¤çš„ API",
                            visibleOn: "data.removable"
                        }), {
                            label: "æ˜¯å¦å¯ä¿®æ”¹",
                            type: "switch",
                            name: "editable",
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            type: "text",
                            name: "updateBtnLabel",
                            label: "æ›´æ–°æŒ‰é’®åç§°",
                            visibleOn: "data.editable",
                            pipeIn: r.defaultValue("")
                        },
                        {
                            name: "updateBtnIcon",
                            label: "æ›´æ–°æŒ‰é’®å›¾æ ‡",
                            type: "icon-picker",
                            visibleOn: "data.editable"
                        },
                        r.getSchemaTplByName("api", {
                            name: "updateApi",
                            label: "ä¿®æ”¹æ—¶æäº¤çš„ API",
                            visibleOn: "data.editable"
                        }), {
                            type: "text",
                            name: "confirmBtnLabel",
                            label: "ç¡®è®¤ç¼–è¾‘æŒ‰é’®åç§°",
                            visibleOn: "data.editable",
                            pipeIn: r.defaultValue("")
                        },
                        {
                            name: "confirmBtnIcon",
                            label: "ç¡®è®¤ç¼–è¾‘æŒ‰é’®å›¾æ ‡",
                            type: "icon-picker",
                            visibleOn: "data.editable"
                        },
                        {
                            type: "text",
                            name: "cancelBtnLabel",
                            label: "å–æ¶ˆç¼–è¾‘æŒ‰é’®åç§°",
                            visibleOn: "data.editable",
                            pipeIn: r.defaultValue("")
                        },
                        {
                            name: "cancelBtnIcon",
                            label: "å–æ¶ˆç¼–è¾‘æŒ‰é’®å›¾æ ‡",
                            type: "icon-picker",
                            visibleOn: "data.editable"
                        },
                        {
                            label: "æ˜¯å¦å¯æ‹–æ‹½æŽ’åº",
                            type: "switch",
                            name: "draggable",
                            mode: "inline",
                            className: "w-full"
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), r.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("required"), r.getSchemaTplByName("validateOnChange"), r.getSchemaTplByName("submitOnChange"), r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                n.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-paste",
                    tooltip: "ç²˜è´´",
                    id: "paste",
                    test: function(e) {
                        var t = e.clipboard;
                        return t && n.acceptChild(t.type, "field")
                    }
                },
                t.$$contentMode ? {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ ä¸€åˆ—",
                    id: "add"
                }: {
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®åˆ—ä¿¡æ¯",
                    id: "edit-contents"
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                s.anyChanged(["header", "footer", "columns"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.acceptChild = function(t, a, l) {
                return !! ~ ["plain", "tpl", "image", "progress", "date", "mapping", "operation", "status", "list"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.handleToolbarAction = function(t) {
                return "edit-contents" === t ? this.handleEditFormItem() : "add" === t ? this.handleAdd() : ("paste" === t && this.addChild("columns", this.props.clipboard), void e.prototype.handleToolbarAction.call(this, t))
            },
            t.prototype.modifyProps = function(e, t) {
                var a = this;
                void 0 === t && (t = this.context);
                var l = e.header,
                i = e.footer,
                n = e.data,
                o = e.columns,
                r = e.clipboard,
                s = e.$$id,
                p = e.$$contentMode,
                c = t.editor.getActiveId();
                return p || (o = Array.isArray(o) ? o.map((function(e) {
                    return d.JSONPipeOut(e)
                })) : o),
                c !== s || p ? {
                    header: l,
                    footer: i,
                    data: n,
                    columns: o
                }: {
                    header: l = this.attachAddBtn(l, [r && this.acceptChild(r.type, "header") ? this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.addChild("header", r)
                    }), "ç²˜è´´", "fa fa-paste") : null, this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.pickChild("header")
                    }), "åœ¨é¡¶éƒ¨æ–°å¢žå†…å®¹")]),
                    footer: i = this.attachAddBtn(i, [r && this.acceptChild(r.type, "footer") ? this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.addChild("footer", r)
                    }), "ç²˜è´´", "fa fa-paste") : null, this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.pickChild("footer")
                    }), "åœ¨åº•éƒ¨æ–°å¢žå†…å®¹")]),
                    data: n,
                    columns: o
                }
            },
            t.prototype.handleEditFormItem = function() {
                var e = this.context.editor,
                t = this.props,
                a = t.$$id,
                l = t.value,
                n = d.JSONPipeOut(e.get(a).columns),
                o = [{}];
                Array.isArray(l) && (o = [l[0]]);
                var r = function(e) {
                    "table" === e.props.$path && (e.disabledContainers = ["header", "footer"])
                };
                e.openDialog("é…ç½®è¡¨æ ¼åˆ—ä¿¡æ¯", {
                    type: "form",
                    mode: "normal",
                    data: {
                        columns: n
                    },
                    controls: [{
                        name: "columns",
                        children: function(t) {
                            var a = t.value,
                            l = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                previewClassName: "wrapper-xs",
                                autoFocus: !0,
                                value: {
                                    type: "table",
                                    affixHeader: !1,
                                    columns: a || [],
                                    columnsTogglable: !1
                                },
                                onChange: function(e) {
                                    return l(e.columns)
                                },
                                onEditorMount: r,
                                items: o,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(t) {
                    return e.update(a, {
                        columns: d.JSONPipeIn(t.columns)
                    })
                }), "xl")
            },
            t.prototype.handleColumnsQuickEdit = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = d.JSONPipeOut(e.get(t).columns);
                e.openDialog("å¿«é€Ÿç¼–è¾‘åˆ—ä¿¡æ¯", {
                    type: "form",
                    mode: "normal",
                    data: {
                        columns: a
                    },
                    controls: [{
                        name: "columns",
                        type: "combo",
                        multiple: !0,
                        label: !1,
                        addButtonText: "æ–°å¢žä¸€åˆ—",
                        draggable: !0,
                        controls: [{
                            type: "text",
                            name: "label",
                            placeholder: "æ ‡é¢˜"
                        },
                        {
                            type: "text",
                            name: "name",
                            placeholder: "ç»‘å®šå­—æ®µå"
                        },
                        {
                            type: "select",
                            name: "type",
                            placeholder: "ç±»åž‹",
                            value: "text",
                            options: [{
                                value: "text",
                                label: "çº¯æ–‡æœ¬"
                            },
                            {
                                value: "tpl",
                                label: "æ¨¡æ¿"
                            },
                            {
                                value: "image",
                                label: "å›¾ç‰‡"
                            },
                            {
                                value: "date",
                                label: "æ—¥æœŸ"
                            },
                            {
                                value: "progress",
                                label: "è¿›åº¦"
                            },
                            {
                                value: "status",
                                label: "çŠ¶æ€"
                            },
                            {
                                value: "mapping",
                                label: "æ˜ å°„"
                            },
                            {
                                value: "operation",
                                label: "æ“ä½œæ "
                            }]
                        }]
                    }]
                },
                (function(a) {
                    return e.update(t, d.JSONPipeIn({
                        columns: d.JSONPipeIn(a.columns)
                    }))
                }))
            },
            t = l.__decorate([n.Editor("table-control", {
                name: "è¡¨æ ¼ç¼–è¾‘æ¡†",
                description: "å¯ä»¥ç”¨æ¥å±•çŽ°æ•°æ®çš„,å¯ä»¥ç”¨æ¥å±•ç¤ºæ•°ç»„ç±»åž‹çš„æ•°æ®ï¼Œæ¯”å¦‚ <code>multiple</code> çš„å­ <code>form</code>",
                type: "table",
                tags: ["è¡¨å•é¡¹"],
                scaffold: u,
                $schema: "https://isuda.baidu.com/schemas/TableControlSchema.json",
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: {
                        type: "table",
                        value: [{
                            color: "green",
                            name: "ç»¿è‰²"
                        }],
                        name: "table",
                        columns: [{
                            label: "color",
                            name: "color",
                            quickEdit: {
                                type: "color"
                            }
                        },
                        {
                            label: "è¯´æ˜Žæ–‡å­—",
                            name: "name",
                            quickEdit: {
                                type: "text",
                                mode: "inline"
                            }
                        }]
                    }
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (p.FormItemEditor);
        t.TableControlEditor = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.SubFormControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(7),
        s = l.__importDefault(a(10)),
        p = a(12),
        c = a(17),
        d = a(6),
        m = a(4),
        u = ["title", "actions", "name", "size", "closeOnEsc", "showCloseButton", "bodyClassName", "body"],
        h = {
            type: "form",
            name: "subform",
            label: "å­è¡¨å•",
            controls: [{
                type: "text",
                label: "æ–‡æœ¬",
                name: "text"
            }]
        },
        b = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                return a.tipName = "SubForm",
                a.settingsSchema = {
                    title: "å­è¡¨å•é¡¹é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: d([o.getSchemaTplByName("formItemName"), o.getSchemaTplByName("label"), o.getSchemaTplByName("description"), o.getSchemaTplByName("placeholder"), o.getSchemaTplByName("remark"), o.getSchemaTplByName("multiple")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "btnLabel",
                            label: "æŒ‰é’®é»˜è®¤åç§°",
                            value: "è®¾ç½®",
                            type: "text"
                        },
                        o.getSchemaTplByName("formItemMode"), o.getSchemaTplByName("horizontalMode"), o.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), o.getSchemaTplByName("formItemSize"), o.getSchemaTplByName("fontItemInline"), o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), {
                            name: "minLength",
                            visibleOn: "data.multiple",
                            label: "å…è®¸æœ€å°‘ä¸ªæ•°",
                            type: "number"
                        },
                        {
                            name: "maxLength",
                            visibleOn: "data.multiple",
                            label: "å…è®¸æœ€å¤šä¸ªæ•°",
                            type: "number"
                        },
                        {
                            name: "labelField",
                            type: "text",
                            value: "label",
                            label: "åç§°å­—æ®µå",
                            description: "å½“å€¼ä¸­å­˜åœ¨è¿™ä¸ªå­—æ®µï¼Œåˆ™æŒ‰é’®åç§°å°†ä½¿ç”¨æ­¤å­—æ®µçš„å€¼æ¥å±•ç¤ºã€‚"
                        },
                        o.getSchemaTplByName("required"), o.getSchemaTplByName("validations"), o.getSchemaTplByName("validationErrors"), o.getSchemaTplByName("validateOnChange"), o.getSchemaTplByName("submitOnChange"), o.getSchemaTplByName("disabled"), o.getSchemaTplByName("visible")]
                    }])]
                },
                a.toolbarBtns.push({
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®å­è¡¨å•è¯¦æƒ…",
                    id: "edit-contents"
                }),
                a
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                return "edit-contents" === t ? this.handleEditFormItem() : e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleEditFormItem = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = m.JSONPipeOut(e.get(t).form);
                function n(e) {
                    "dialog" === e.props.$path ? (e.tipName = "å­è¡¨å•å¼¹æ¡†", e.disabledContainers = ["body", "actions"]) : "dialog/body/form" === e.props.$path && (e.duplicatable = !1, e.removable = !1, e.draggable = !1)
                }
                e.openDialog("é…ç½®å­è¡¨å•è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        form: a
                    },
                    controls: [{
                        name: "form",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange,
                            r = p(a, u);
                            return i.
                        default.createElement(s.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                c(a, u)), {
                                    type: "dialog",
                                    body: [l.__assign(l.__assign({},
                                    r), {
                                        title: "",
                                        type: "form"
                                    })]
                                }),
                                onChange: function(e) {
                                    return o(l.__assign(l.__assign({},
                                    e.body[0]), p(e, ["body"])))
                                },
                                onEditorMount: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        form: m.JSONPipeIn(a.form)
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("form-control", {
                name: "å­è¡¨å•é¡¹",
                tags: ["è¡¨å•é¡¹"],
                description: "é…ç½®ä¸€ä¸ªå­<code>form</code>ä½œä¸ºå½“å‰çš„è¡¨å•é¡¹",
                type: "form",
                scaffold: h,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    h)
                },
                $schema: "https://isuda.baidu.com/schemas/SubFormControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object])], t)
        } (r.FormItemEditor);
        t.SubFormControlEditor = b
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.MatrixControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "matrix",
            name: "matrix",
            label: "çŸ©é˜µå¼€å…³",
            rowLabel: "è¡Œæ ‡é¢˜è¯´æ˜Ž",
            columns: [{
                label: "åˆ—1"
            },
            {
                label: "åˆ—2"
            }],
            rows: [{
                label: "è¡Œ1"
            },
            {
                label: "è¡Œ2"
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Matrix",
                t.settingsSchema = {
                    title: "çŸ©é˜µå¼€å…³é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–çŸ©é˜µæ•°æ®æŽ¥å£"
                        }), n.getSchemaTplByName("multiple", {
                            value: !0
                        }), {
                            type: "button-group",
                            name: "singleSelectMode",
                            label: "å•é€‰æ¨¡å¼",
                            description: "è¡Œçº§ã€åˆ—çº§æˆ–è€…å•ä¸ªå•å…ƒå•é€‰",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            visibleOn: "!this.multiple",
                            options: [{
                                label: "è¡Œçº§",
                                value: "row"
                            },
                            {
                                label: "åˆ—çº§",
                                value: "column"
                            },
                            {
                                label: "å•ä¸ªå•å…ƒ",
                                value: "cell"
                            }],
                            pipeIn: n.defaultValue("column")
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "åˆ—é…ç½®",
                            name: "columns",
                            type: "combo",
                            multiple: !0,
                            addButtonText: "æ·»åŠ ä¸€åˆ—",
                            scaffold: {
                                label: "åˆ—è¯´æ˜Ž"
                            },
                            controls: [{
                                type: "text",
                                name: "label",
                                placeholder: "åˆ—è¯´æ˜Ž"
                            }]
                        },
                        {
                            name: "rowLabel",
                            label: "è¡Œæ ‡é¢˜æ–‡å­—",
                            type: "text"
                        },
                        {
                            label: "è¡Œé…ç½®",
                            name: "rows",
                            type: "combo",
                            multiple: !0,
                            scaffold: {
                                label: "è¡Œè¯´æ˜Ž"
                            },
                            addButtonText: "æ·»åŠ ä¸€è¡Œ",
                            controls: [{
                                type: "text",
                                name: "label",
                                placeholder: "è¡Œè¯´æ˜Ž"
                            }]
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("matrix-control", {
                name: "çŸ©é˜µå¼€å…³",
                description: "å¯é…ç½®è¡Œå•é€‰ï¼Œåˆ—å•é€‰ï¼Œä»¥åŠå…¨éƒ¨é€‰é¡¹åªèƒ½å•é€‰æˆ–è€…å…¨éƒ¨é€‰é¡¹å¤šé€‰",
                type: "matrix",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({
                        value: [[{
                            label: "åˆ—1",
                            checked: !0
                        },
                        {
                            label: "åˆ—1",
                            checked: !1
                        }], [{
                            label: "åˆ—2",
                            checked: !1
                        },
                        {
                            label: "åˆ—2",
                            checked: !1
                        }]]
                    },
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/MatrixControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.MatrixControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.RepeatControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "repeat",
            label: "å‘¨æœŸ",
            name: "repeat"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Repeat",
                t.settingsSchema = {
                    title: "å‘¨æœŸè¾“å…¥é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), {
                            name: "options",
                            type: "select",
                            label: "å¯ç”¨å•ä½",
                            options: "secondly,minutely,hourly,daily,weekdays,weekly,monthly,yearly".split(","),
                            value: "hourly,daily,weekly,monthly",
                            multiple: !0
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("repeat-control", {
                name: "å‘¨æœŸè¾“å…¥æ¡†",
                tags: ["è¡¨å•é¡¹"],
                description: "é€‰æ‹©é‡å¤çš„é¢‘çŽ‡ï¼Œå¦‚æ¯æ—¶ã€æ¯å¤©ã€æ¯å‘¨ç­‰",
                type: "repeat",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/RepeatControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.RepeatControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.SubmitEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = a(6),
        s = {
            type: "submit",
            label: "æäº¤",
            level: "primary"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Submit",
                t.isInDialog = /(?:\/|^)dialog\/.+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "æäº¤æŒ‰é’®é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([{
                            label: "åç§°",
                            type: "text",
                            name: "label"
                        },
                        {
                            name: "confirmText",
                            type: "textarea",
                            label: "ç¡®è®¤ä¿¡æ¯"
                        },
                        {
                            type: "text",
                            name: "tooltip",
                            label: "æç¤ºä¿¡æ¯",
                            description: "é¼ æ ‡åœç•™æ—¶å¼¹å‡ºè¯¥æ®µæ–‡å­—"
                        },
                        {
                            type: "button-group",
                            name: "tooltipPlacement",
                            visibleOn: "data.tooltip",
                            label: "æç¤ºä¿¡æ¯ä½ç½®",
                            size: "sm",
                            mode: "inline",
                            className: "w-full",
                            value: "bottom",
                            options: [{
                                label: "ä¸Š",
                                value: "top"
                            },
                            {
                                label: "å³",
                                value: "right"
                            },
                            {
                                label: "ä¸‹",
                                value: "bottom"
                            },
                            {
                                label: "å·¦",
                                value: "left"
                            }]
                        },
                        o.getSchemaTplByName("api", {
                            label: "ä¿å­˜API",
                            description: "å¦‚æžœä¸é…ç½®å°†ä½¿ç”¨ <code>Form</code> ä¸­ <code>API</code>"
                        }), {
                            type: "text",
                            name: "reload",
                            label: "æŒ‡å®šåˆ·æ–°ç›®æ ‡",
                            description: "å¯ä»¥æŒ‡å®šç›®æ ‡ç»„ä»¶çš„ <code>name</code> å±žæ€§å€¼ï¼Œè¡¨ç¤ºè¿™ä¸ªåŠ¨ä½œå®ŒæˆåŽåˆ·æ–°ç›®æ ‡ç»„ä»¶ã€‚"
                        },
                        t.isInDialog ? {
                            name: "close",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: o.defaultValue(!0),
                            label: "æ˜¯å¦å…³é—­å½“å‰å¼¹æ¡†"
                        }: null])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: r([o.getSchemaTplByName("icon"), o.getSchemaTplByName("size"), {
                            label: "å±•ç¤ºæ ·å¼",
                            type: "select",
                            name: "level",
                            clearable: !1,
                            btnActiveLevel: "",
                            options: [{
                                label: "é»˜è®¤",
                                value: "default",
                                level: "default"
                            },
                            {
                                label: "é“¾æŽ¥",
                                value: "link",
                                level: "link"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "primary",
                                level: "primary"
                            },
                            {
                                label: "æ·¡è‰²",
                                value: "light",
                                level: "light"
                            },
                            {
                                label: "æ·±è‰²",
                                value: "dark",
                                level: "dark"
                            },
                            {
                                label: "æç¤º",
                                value: "info",
                                level: "info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "success",
                                level: "success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "warning",
                                level: "warning"
                            },
                            {
                                label: "ä¸¥é‡",
                                value: "danger",
                                level: "danger"
                            }]
                        },
                        o.getSchemaTplByName("className", {
                            label: "æŒ‰é’® CSS ç±»å",
                            name: "inputClassName"
                        })])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: r([o.getSchemaTplByName("ref"), o.getSchemaTplByName("disabled"), o.getSchemaTplByName("visible")])
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("submit-control", {
                name: "æäº¤æŒ‰é’®",
                description: "æäº¤æŒ‰é’®ï¼Œå¯é…ç½®æ˜¯å¦ç¡®è®¤æäº¤",
                type: "submit",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/ButtonControlSchema.json"
            })], t)
        } (n.
    default);
        t.SubmitEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.InputGroupEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = a(6),
        s = {
            type: "reset",
            label: "é‡ç½®"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Reset",
                t.settingsSchema = {
                    title: "é‡ç½®æŒ‰é’®é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([{
                            label: "åç§°",
                            type: "text",
                            name: "label"
                        },
                        {
                            name: "confirmText",
                            type: "textarea",
                            label: "ç¡®è®¤ä¿¡æ¯"
                        },
                        {
                            type: "text",
                            name: "tooltip",
                            label: "æç¤ºä¿¡æ¯",
                            description: "é¼ æ ‡åœç•™æ—¶å¼¹å‡ºè¯¥æ®µæ–‡å­—"
                        },
                        {
                            type: "button-group",
                            name: "tooltipPlacement",
                            visibleOn: "data.tooltip",
                            label: "æç¤ºä¿¡æ¯ä½ç½®",
                            size: "sm",
                            mode: "inline",
                            className: "w-full",
                            value: "bottom",
                            options: [{
                                label: "ä¸Š",
                                value: "top"
                            },
                            {
                                label: "å³",
                                value: "right"
                            },
                            {
                                label: "ä¸‹",
                                value: "bottom"
                            },
                            {
                                label: "å·¦",
                                value: "left"
                            }]
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: r([o.getSchemaTplByName("icon"), o.getSchemaTplByName("size"), {
                            label: "å±•ç¤ºæ ·å¼",
                            type: "select",
                            name: "level",
                            clearable: !1,
                            btnActiveLevel: "",
                            options: [{
                                label: "é»˜è®¤",
                                value: "default",
                                level: "default"
                            },
                            {
                                label: "é“¾æŽ¥",
                                value: "link",
                                level: "link"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "primary",
                                level: "primary"
                            },
                            {
                                label: "æ·¡è‰²",
                                value: "light",
                                level: "light"
                            },
                            {
                                label: "æ·±è‰²",
                                value: "dark",
                                level: "dark"
                            },
                            {
                                label: "æç¤º",
                                value: "info",
                                level: "info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "success",
                                level: "success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "warning",
                                level: "warning"
                            },
                            {
                                label: "ä¸¥é‡",
                                value: "danger",
                                level: "danger"
                            }]
                        },
                        o.getSchemaTplByName("className", {
                            label: "æŒ‰é’® CSS ç±»å",
                            name: "inputClassName"
                        })])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: r([o.getSchemaTplByName("ref"), o.getSchemaTplByName("disabled"), o.getSchemaTplByName("visible")])
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("reset-control", {
                name: "é‡ç½®æŒ‰é’®",
                tags: ["è¡¨å•é¡¹"],
                description: "è¡¨å•çš„é‡ç½®æŒ‰é’®ï¼Œæ”¯æŒé‡ç½®å‰ç¡®è®¤æ˜¯å¦éœ€è¦é‡ç½®",
                type: "reset",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/ButtonControlSchema.json"
            })], t)
        } (n.
    default);
        t.InputGroupEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ButtonGroupControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(4),
        s = a(7),
        p = a(6),
        c = {
            type: "button-group",
            name: "button-group",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B"
            }]
        },
        d = function(e) {
            function t(t, a) {
                var i = e.call(this, t) || this;
                i.tipName = "æŒ‰é’®ç»„",
                i.settingsSchema = {
                    title: "æŒ‰é’®ç»„é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: p([o.getSchemaTplByName("formItemName", {
                            required: !0
                        }), o.getSchemaTplByName("label"), o.getSchemaTplByName("description"), o.getSchemaTplByName("switchDefaultValue"), {
                            type: "select",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"',
                            source: "${options}",
                            clearable: !0
                        },
                        o.getSchemaTplByName("remark"), o.getSchemaTplByName("clearable", {
                            label: "å¯ç”¨å¯æ¸…é™¤"
                        }), o.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: p([{
                            label: "å±•çŽ°å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "xs",
                            options: [{
                                label: "æŒ‰é’®é›†åˆ",
                                value: "buttons"
                            },
                            {
                                label: "è¡¨å•é€‰é¡¹",
                                value: "options"
                            }]
                        },
                        o.getSchemaTplByName("options", {
                            visibleOn: 'data.$$mode == "options"'
                        }), o.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£",
                            visibleOn: 'data.$$mode == "options"'
                        }), o.getSchemaTplByName("multiple", {
                            pipeIn: o.defaultValue(!1)
                        }), o.getSchemaTplByName("joinValues"), o.getSchemaTplByName("delimiter"), o.getSchemaTplByName("extractValue")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("formItemMode"), o.getSchemaTplByName("horizontalMode"), {
                            type: "switch",
                            name: "vertical",
                            mode: "inline",
                            className: "w-full",
                            label: "é€‰é¡¹åž‚ç›´æŽ’åˆ—",
                            pipeIn: o.defaultValue(!0)
                        },
                        o.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), o.getSchemaTplByName("size"), o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("required", {
                            visibleOn: 'data.$$mode == "options"'
                        }), o.getSchemaTplByName("validateOnChange", {
                            visibleOn: 'data.$$mode == "options"'
                        }), o.getSchemaTplByName("submitOnChange", {
                            visibleOn: 'data.$$mode == "options"'
                        }), o.getSchemaTplByName("disabled"), o.getSchemaTplByName("visible")]
                    }])]
                };
                var n = t.buttons ? "buttons": "options";
                return i.state = l.__assign(l.__assign({},
                i.modifyProps(t, a, n)), {
                    $$mode: n
                }),
                i
            }
            return l.__extends(t, e),
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t, a) {
                var l = this;
                void 0 === t && (t = this.context),
                void 0 === a && (a = this.state.$$mode);
                var n = e.buttons,
                o = e.$$id,
                r = e.clipboard,
                s = t.editor,
                p = s.getActiveId(),
                c = s.getDropId();
                if (p !== o && c !== o || "options" === a) return {
                    buttons: n
                };
                var d = c === o;
                return {
                    buttons: n = this.attachAddBtn(n, d ? i.
                default.createElement("span", null) : [r && this.acceptChild(r.type, "buttons") ? this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        l.addChild("buttons", r)
                    }), "ç²˜è´´æŒ‰é’®", "fa fa-paste") : null, this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        l.pickChild("buttons", "buttons", void 0, l.acceptChild)
                    }), "æ–°å¢žæŒ‰é’®")])
                }
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !(!~ ["button", "submit", "reset"].indexOf(t) || !e.prototype.acceptChild.call(this, t, a, l))
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.props.$$id,
                a = this.context.editor,
                i = l.__assign(l.__assign({},
                a.get(t)), e),
                n = i.$$mode;
                return delete i.$$mode,
                delete i.formHorizontal,
                delete i.$$formMode,
                "options" === n ? (delete i.buttons, this.state.$$mode !== n && (i.options = [{
                    label: "é€‰é¡¹A",
                    value: "a"
                }])) : (delete i.options, this.state.$$mode !== n && (i.buttons = [r.JSONPipeIn({
                    type: "button",
                    label: "æŒ‰é’®",
                    actionType: "dialog",
                    dialog: {
                        title: "ç³»ç»Ÿæç¤º",
                        body: "å¯¹ä½ ç‚¹å‡»äº†"
                    }
                })])),
                this.setState({
                    $$mode: n
                }),
                a.update(t, i, !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    $$mode: this.state.$$mode,
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: this.props.formMode
                })
            },
            t = l.__decorate([n.Editor("button-group-control", {
                name: "æŒ‰é’®ç»„",
                description: "å¤šä¸ªæŒ‰é’®çš„é›†åˆï¼Œä¹Ÿå¯ä»¥é…ç½®<code>options</code>ç»„åˆæˆå•é€‰çš„å½¢å¼",
                type: "button-group",
                tags: ["è¡¨å•é¡¹"],
                icon: "fa fa-stop-circle",
                scaffold: c,
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    c)
                },
                $schema: "https://isuda.baidu.com/schemas/ButtonGroupControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (s.FormItemEditor);
        t.ButtonGroupControlEditor = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ContainerEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(4),
        s = a(6),
        p = l.__importDefault(a(9)),
        c = l.__importDefault(a(11)),
        d = {
            type: "container",
            controls: [{
                placeholder: "æ–‡æœ¬1",
                type: "text",
                name: "a",
                mode: "inline"
            },
            {
                placeholder: "æ–‡æœ¬2",
                type: "text",
                name: "b",
                mode: "inline"
            }]
        },
        m = function(e) {
            function t(t, a) {
                var i = e.call(this, t, a) || this;
                i.tipName = "Container",
                i.dropable = !0,
                i.settingsSchema = {
                    title: "å®¹å™¨é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([o.getSchemaTplByName("label"), o.getSchemaTplByName("description"), {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "xs",
                            value: "form",
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }]
                        },
                        o.getSchemaTplByName("remark"), o.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: s([o.getSchemaTplByName("formItemMode"), o.getSchemaTplByName("horizontalMode"), o.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), o.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])]
                },
                i.schemaCaches = {},
                i.containers = ["body", "controls"],
                i.containerLabels = ["å†…å®¹åŒº", "å­è¡¨å•"];
                var n = t.controls ? "form": "other";
                return i.disabledContainers = "form" === n ? ["body"] : ["controls"],
                i.state = l.__assign(l.__assign({},
                i.modifyProps(t, a)), {
                    $$mode: n
                }),
                i
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                return t.body && (!Array.isArray(t.body) || t.body.length) || t.controls && (!Array.isArray(t.controls) || t.controls.length) || t.schemaApi ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.props.$$id,
                a = this.context.editor,
                i = l.__assign(l.__assign({},
                a.get(t)), e),
                n = i.$$mode;
                return delete i.$$mode,
                delete i.$$formMode,
                delete i.formHorizontal,
                "form" === n ? (this.schemaCaches.other = i.body, delete i.body, this.state.$$mode !== n && (i.controls = this.schemaCaches[n] || [{
                    type: "text",
                    label: "æ–‡æœ¬",
                    name: "var1"
                }])) : (this.schemaCaches.form = i.controls, delete i.controls, this.state.$$mode !== n && (i.body = this.schemaCaches[n] || [{
                    type: "tpl",
                    tpl: "å†…å®¹",
                    inline: !1
                }])),
                this.disabledContainers = "form" === n ? ["body"] : ["controls"],
                this.mounted && this.setState({
                    $$mode: n
                }),
                a.update(t, r.JSONPipeIn(i), !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$mode: this.state.$$mode || "form",
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                a = "controls" === a ? "control": a,
                e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t = l.__decorate([n.Editor("container-control", {
                name: "å®¹å™¨",
                tags: ["è¡¨å•é¡¹"],
                icon: "fa fa-tablet",
                description: "å¯æ¸²æŸ“å¤šç§ç±»åž‹ï¼Œå¦‚<code>HTML</code>ç‰‡æ®µï¼ŒæŒ‡å®šçš„<code>AMis</code>æ¸²æŸ“å™¨æˆ–è€…æ•°ç»„åŒ…å«çš„å¤šä¸ªæ¸²æŸ“å™¨",
                type: "container",
                scaffold: d,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    d)
                },
                $schema: "https://isuda.baidu.com/schemas/ContainerControlSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.controls,
                    n = this.super.apply(this, e),
                    o = this.props.regionRef;
                    return i.
                default.createElement(c.
                default, {
                        key: l ? "controls": "body",
                        ref: function(e) {
                            return o(l ? "controls": "body", e)
                        },
                        name: l ? "controls": "body",
                        label: l ? "å­è¡¨å•": "å†…å®¹",
                        hostId: a.props.$$id
                    },
                    n)
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (p.
    default);
        t.ContainerEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FormControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = {
            type: "control",
            control: {
                type: "text",
                label: "æ–‡æœ¬",
                name: "var1"
            }
        },
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Control",
                t.settingsSchema = {
                    title: "è¡¨å•é¡¹é…ç½®",
                    controls: [{
                        type: "plain",
                        text: "æš‚æ— ä»»ä½•é…ç½®",
                        className: "text-muted"
                    }]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                return i.
            default.createElement("div", {
                    key: t.key,
                    "data-editor-id": this.props.$$id
                },
                e.prototype.renderRenderer.call(this, t))
            },
            t = l.__decorate([n.Editor("control", {
                name: "è¡¨å•é¡¹",
                description: "è¡¨å•é¡¹",
                type: "control",
                scaffold: r,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    r)
                }
            })], t)
        } (o.
    default);
        t.FormControlEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.FieldSetControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = a(4),
        p = a(6),
        c = l.__importDefault(a(11)),
        d = l.__importDefault(a(9)),
        m = {
            type: "fieldset",
            title: "æ ‡é¢˜",
            controls: [{
                type: "text",
                label: "æ–‡æœ¬",
                name: "text"
            }]
        },
        u = function(e) {
            function t(t, a) {
                var n = e.call(this, t, a) || this;
                n.tipName = "Fieldset",
                n.containers = ["body", "controls"],
                n.containerLabels = ["å†…å®¹åŒº", "å­è¡¨å•åŒºåŸŸ"],
                n.schemaCaches = {},
                n.settingsSchema = {
                    title: "FieldSetæ¡†é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: p([{
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(o.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                onClick: n.handleAdd.bind(n),
                                block: !0
                            },
                            "æ–°å¢žä¸€åˆ—"))
                        },
                        {
                            label: "æ ‡é¢˜",
                            name: "title",
                            type: "text"
                        },
                        {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "xs",
                            value: "form",
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }]
                        },
                        {
                            name: "collapsable",
                            label: "æ˜¯å¦å¯æŠ˜å ",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: r.defaultValue(!1)
                        },
                        {
                            name: "collapsed",
                            label: "é»˜è®¤æ˜¯å¦æŠ˜å ",
                            type: "switch",
                            mode: "inline",
                            visibleOn: "this.collapsable",
                            className: "w-full"
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "mode",
                            label: "å±•ç¤ºæ¨¡å¼",
                            type: "button-group",
                            size: "sm",
                            className: "w-full",
                            visibleOn: 'data.$$mode == "form"',
                            clearable: !0,
                            pipeIn: r.defaultValue(""),
                            options: [{
                                label: "ç»§æ‰¿",
                                value: ""
                            },
                            {
                                label: "é»˜è®¤",
                                value: "normal"
                            },
                            {
                                label: "å·¦å³æ‘†æ”¾",
                                value: "horizontal"
                            },
                            {
                                label: "å†…è”",
                                value: "inline"
                            }]
                        },
                        r.getSchemaTplByName("horizontal", {
                            visibleOn: '(data.mode || data.$$formMode) == "horizontal" && data.$$mode == "form"'
                        }), {
                            name: "className",
                            type: "button-group",
                            clearable: !0,
                            size: "sm",
                            label: "æŽ§ä»¶å°ºå¯¸",
                            className: "w-full",
                            options: [{
                                value: "Collapse--xs",
                                label: "æžå°"
                            },
                            {
                                value: "Collapse--sm",
                                label: "å°"
                            },
                            {
                                value: "Collapse--base",
                                label: "æ­£å¸¸"
                            },
                            {
                                value: "Collapse--md",
                                label: "å¤§"
                            },
                            {
                                value: "Collapse--lg",
                                label: "è¶…å¤§"
                            }]
                        },
                        r.getSchemaTplByName("className", {
                            autoComplete: !1
                        }), r.getSchemaTplByName("className", {
                            name: "headingClassName",
                            label: "æ ‡é¢˜ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹åŒºåŸŸ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])]
                },
                n.dropable = !0;
                var s = t.controls ? "form": "other";
                return n.disabledContainers = "form" === s ? ["body"] : ["controls"],
                n.state = l.__assign(l.__assign({},
                n.modifyProps(t, a)), {
                    $$mode: s
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.handleAdd = function() {
                "form" === this.state.$$mode ? this.pickChild("controls") : this.pickChild("body")
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                a = "controls" === a ? "control": a,
                e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.props.$$id,
                a = this.context.editor,
                i = l.__assign(l.__assign({},
                a.get(t)), e),
                n = i.$$mode;
                return delete i.$$mode,
                delete i.$$formMode,
                "form" === n ? (this.schemaCaches.other = i.body, delete i.body, this.state.$$mode !== n && (i.controls = this.schemaCaches[n] || [{
                    type: "text",
                    label: "æ–‡æœ¬",
                    name: "var1"
                }])) : (this.schemaCaches.form = i.controls, delete i.controls, this.state.$$mode !== n && (i.body = this.schemaCaches[n] || [{
                    type: "tpl",
                    tpl: "å†…å®¹",
                    inline: !1
                }])),
                this.disabledContainers = "form" === n ? ["body"] : ["controls"],
                this.mounted && this.setState({
                    $$mode: n
                }),
                a.update(t, s.JSONPipeIn(i), !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    $$mode: this.state.$$mode || "form",
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "actions" === t ? e.prototype.pickChild.call(this, "action", "actions", void 0, ["button", "reset", "submit", "button-group", "dropdown-button"], !0) : "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            t = l.__decorate([n.Editor("fieldset", {
                name: "è¡¨å•é›†åˆ",
                tags: ["è¡¨å•é¡¹"],
                description: "å¤šä¸ªè¡¨å•é¡¹çš„ç»„åˆï¼Œå¯é…ç½®æ˜¯å¦æŠ˜å ",
                type: "fieldset",
                scaffold: m,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    m)
                },
                $schema: "https://isuda.baidu.com/schemas/FieldSetControlSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.controls,
                    n = this.super.apply(this, e),
                    o = this.props.regionRef;
                    return l ? i.
                default.createElement(c.
                default, {
                        ref: function(e) {
                            return o("controls", e)
                        },
                        name: "controls",
                        label: "å­è¡¨å•åŒºåŸŸ",
                        hostId: a.props.$$id
                    },
                    n) : i.
                default.createElement(c.
                default, {
                        ref: function(e) {
                            return o("body", e)
                        },
                        name: "body",
                        label: "å†…å®¹åŒº",
                        hostId: a.props.$$id
                    },
                    n)
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (d.
    default);
        t.FieldSetControlEditor = u
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TabsControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(3),
        o = a(88),
        r = a(31),
        s = {
            type: "tabs",
            tabs: [{
                title: "é€‰é¡¹å¡1",
                controls: [{
                    label: "æ–‡æœ¬",
                    name: "text1",
                    type: "text"
                }]
            },
            {
                title: "é€‰é¡¹å¡2",
                controls: [{
                    label: "æ–‡æœ¬",
                    name: "text1",
                    type: "text"
                }]
            }]
        },
        p = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("tabs-control", {
                name: "é€‰é¡¹å¡(Tabs)",
                description: "é€‰é¡¹å¡(Tabs)",
                tags: ["è¡¨å•é¡¹"],
                type: "tabs",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                }
            },
            {
                renderTabs: function() {
                    var e = this,
                    t = this.super(),
                    a = t.props.children,
                    i = this.props.tabs;
                    return this.props.$editor && Array.isArray(a) && Array.isArray(i) && (a = a.map((function(t, a) {
                        return t ? n.cloneElement(t, {
                            children: n.createElement(o.TabEditor, l.__assign({},
                            i[a], {
                                $path: e.props.$path,
                                $$replaceable: !1,
                                eventKey: t.props.eventKey,
                                index: a,
                                key: "outter-" + a
                            }), t.props.children)
                        }) : null
                    })), t = n.cloneElement(t, {
                        children: a
                    })),
                    t
                }
            })], t)
        } (r.TabsEditor);
        t.TabsControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TabEditor = void 0;
        var l = a(0),
        i = a(3),
        n = a(2),
        o = l.__importDefault(a(11)),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.containers = ["body", "controls"],
                t.containerLabels = ["å†…å®¹åŒº", "å­è¡¨å•"],
                t.settingsSchema = {
                    title: "é€‰é¡¹å¡é…ç½®",
                    controls: n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "title",
                            type: "text",
                            placeholder: "åç§°",
                            required: !0
                        },
                        n.getSchemaTplByName("icon"), {
                            label: "Hash",
                            name: "hash",
                            type: "text",
                            description: "è®¾ç½®åŽï¼Œä¼šåŒæ­¥æ›´æ–°åœ°å€æ çš„ Hashã€‚"
                        },
                        {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "sm",
                            pipeIn: n.defaultValue("form"),
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }],
                            onChange: function(e, t, a, l) {
                                e !== t && ("form" === e ? (l.deleteValueByName("body"), l.setValueByName("controls", [{
                                    type: "text",
                                    label: "æ–‡æœ¬",
                                    name: "var1"
                                }])) : (l.deleteValueByName("controls"), l.setValueByName("body", [{
                                    type: "tpl",
                                    tpl: "å†…å®¹",
                                    inline: !1
                                }])))
                            }
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [{
                            type: "switch",
                            name: "unmountOnExit",
                            label: "éšè—æ—¶æ˜¯å¦é”€æ¯",
                            mode: "inline",
                            className: "block",
                            description: "è®¾ç½®ä»¥åŽè¯¥tabæ¯æ¬¡éƒ½ä¼šé‡æ–°æ¸²æŸ“ï¼Œå¯¹äºŽcrudçš„é‡æ–°æ‹‰å–å¾ˆæœ‰ç”¨"
                        },
                        {
                            type: "switch",
                            name: "unmountOnExit",
                            label: "éšè—æ—¶æ˜¯å¦é”€æ¯",
                            mode: "inline",
                            className: "block",
                            description: "è®¾ç½®ä»¥åŽæ‰€æœ‰å­tabæ¯æ¬¡åˆ‡æ¢æ—¶éƒ½ä¼šé‡æ–°æ¸²æŸ“"
                        },
                        n.getSchemaTplByName("visible"), n.getSchemaTplByName("disabled")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(e) {
                var t = this,
                a = e.controls;
                return i.createElement("div", {
                    key: e.key,
                    ref: this.childRef,
                    "data-editor-id": this.props.$$id
                },
                i.createElement(o.
            default, {
                    key: a ? "controls": "body",
                    name: a ? "controls": "body",
                    ref: function(e) {
                        return t.regionRef(a ? "controls": "body", e)
                    },
                    label: a ? "å­è¡¨å•": "å†…å®¹åŒº",
                    hostId: this.props.$$id
                },
                e.children))
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t
        } (a(30).TabEditor);
        t.TabEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.InputGroupEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = a(4),
        p = a(12),
        c = a(6),
        d = l.__importDefault(a(9)),
        m = l.__importDefault(a(11)),
        u = {
            type: "group",
            controls: [{
                type: "text",
                label: "æ–‡æœ¬",
                name: "var1"
            },
            {
                type: "text",
                label: "æ–‡æœ¬",
                name: "var2"
            }]
        },
        h = function(e) {
            function t(t, a) {
                var l = e.call(this, t, a) || this;
                return l.tipName = "Group",
                l.handleAdd = function() {
                    return l.pickChild("controls")
                },
                l.dropable = !0,
                l.containers = ["controls"],
                l.containerLabels = ["å­è¡¨å•"],
                l.settingsSchema = {
                    title: "è¡¨å•ç»„é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: c([{
                            label: "Label",
                            name: "label",
                            type: "text"
                        },
                        r.getSchemaTplByName("description", {
                            visible: "this.label"
                        }), {
                            children: i.
                        default.createElement(o.Button, {
                                className: "m-b",
                                onClick: l.handleAdd,
                                level: "danger",
                                tooltip: "æ’å…¥ä¸€ä¸ªæ–°çš„å…ƒç´ ",
                                size: "sm",
                                block: !0
                            },
                            "æ–°å¢žå…ƒç´ ")
                        },
                        r.getSchemaTplByName("remark"), r.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("formItemMode"), r.getSchemaTplByName("horizontalMode"), r.getSchemaTplByName("horizontal", {
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal',
                            pipeIn: function(e, t) {
                                return {
                                    leftRate: (e = e || t.formHorizontal && s.makeHorizontalDeeper(t.formHorizontal, t.controls.length)) && "number" == typeof e.left ? e.left: e && /\bcol\-(?:xs|sm|md|lg)\-(\d+)\b/.test(e.left) ? parseInt(RegExp.$1, 10) : 2,
                                    leftFixed: e && e.leftFixed || ""
                                }
                            }
                        }), {
                            name: "controls",
                            type: "combo",
                            label: "åˆ—å®½åº¦é…ç½®",
                            multiple: !0,
                            removable: !1,
                            addable: !1,
                            multiLine: !0,
                            visibleOn: 'data.$$formMode != "inline"',
                            controls: [{
                                type: "switch",
                                name: "columnRatio",
                                label: "è‡ªåŠ¨åˆ†é…",
                                disabledOn: 'this.mode === "inline"',
                                mode: "inline",
                                className: "block",
                                pipeIn: function(e, t) {
                                    return "number" != typeof e && (!t.columnClassName || !/\bcol\-(?:xs|sm|md|lg)\-(\d+)\b/.test(t.columnClassName))
                                },
                                pipeOut: function(e) {
                                    return e ? void 0 : 4
                                },
                                onChange: function(e, t, a, l) {
                                    return ! e && l.getValueByName("columnClassName") && l.setValueByName("columnClassName", l.getValueByName("columnClassName").replace(/\bcol\-(?:xs|sm|md|lg)\-(\d+)\b/g, ""))
                                },
                                columnClassName: "w-xs v-middle"
                            },
                            {
                                label: "å®½åº¦å æ¯”",
                                type: "range",
                                name: "columnRatio",
                                visibleOn: 'typeof this.columnRatio !== "undefined" || this.columnClassName && /\\bcol\\-(?:xs|sm|md|lg)\\-(\\d+)\\b/.test(this.columnClassName)',
                                pipeIn: function(e, t) {
                                    return "number" == typeof e ? e: t.columnClassName && /\bcol\-(?:xs|sm|md|lg)\-(\d+)\b/.test(t.columnClassName) && parseInt(RegExp.$1, 10) || 2
                                },
                                min: 1,
                                max: 12,
                                step: 1
                            }]
                        },
                        {
                            type: "button-group",
                            name: "gap",
                            label: "é—´éš”å¤§å°",
                            pipeIn: r.defaultValue(""),
                            size: "xs",
                            options: [{
                                value: "xs",
                                label: "æžå°"
                            },
                            {
                                value: "sm",
                                label: "å°"
                            },
                            {
                                value: "",
                                label: "æ­£å¸¸"
                            }]
                        },
                        r.getSchemaTplByName("className"), {
                            name: "controls",
                            type: "combo",
                            label: "åˆ— CSS ç±»åé…ç½®",
                            multiple: !0,
                            removable: !1,
                            addable: !1,
                            controls: [{
                                type: "text",
                                name: "columnClassName"
                            }]
                        }]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])]
                },
                l.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ ",
                    id: "add"
                }),
                l
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                if ("add" === t) return this.handleAdd();
                "paste" === t && this.addChild("controls", this.props.clipboard),
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.renderRenderer = function(t) {
                return t.controls && Array.isArray(t.controls) && t.controls.length ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t.prototype.getSettingsValue = function() {
                var t = e.prototype.getSettingsValue.call(this);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: t.mode || this.props.formMode
                })
            },
            t.prototype.setSettingsValue = function(t) {
                return e.prototype.setSettingsValue.call(this, p(t, ["formHorizontal", "$$formMode"]))
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                a = "controls" === a ? "control": a,
                e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "actions" === t ? e.prototype.pickChild.call(this, "action", "actions", void 0, ["button", "reset", "submit", "button-group", "dropdown-button"], !0) : "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t = l.__decorate([n.Editor("group-control", {
                name: "ä¸€è¡Œå¤šä¸ª",
                tags: ["è¡¨å•é¡¹"],
                description: "æ°´å¹³å±•ç¤ºå¤šä¸ªè¡¨å•é¡¹",
                type: "group",
                scaffold: u,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    u)
                },
                $schema: "https://isuda.baidu.com/schemas/GroupControlSchema.json"
            },
            {
                renderInput: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || !this.dropable) return this.super.apply(this, e);
                    var l = this.props.regionRef;
                    return i.
                default.createElement(m.
                default, {
                        ref: function(e) {
                            return l("controls", e)
                        },
                        name: "controls",
                        label: "å­è¡¨å•",
                        hostId: a.props.$$id
                    },
                    this.super.apply(this, e))
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (d.
    default);
        t.InputGroupEditor = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.PanelControlEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(4),
        s = a(5),
        p = l.__importDefault(a(11)),
        c = l.__importDefault(a(9)),
        d = {
            type: "panel",
            title: "æ ‡é¢˜",
            body: "å†…å®¹"
        },
        m = function(e) {
            function t(t, a) {
                var n = e.call(this, t, a) || this;
                n.tipName = "Panel",
                n.schemaCaches = {},
                n.dropable = !0,
                n.isFormItem = /\/control\/\w+$/.test(n.props.$path),
                n.containers = ["body", "controls", "actions"],
                n.containerLabels = ["å†…å®¹åŒº", "å­è¡¨å•", "æŒ‰é’®æ "],
                n.settingsSchema = {
                    title: "é¢æ¿é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            label: "æ ‡é¢˜",
                            name: "title",
                            type: "text"
                        },
                        n.isFormItem ? {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "sm",
                            pipeIn: o.defaultValue("form"),
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }]
                        }: null, {
                            children: i.
                        default.createElement(s.Button, {
                                size: "sm",
                                level: "info",
                                className: "m-b",
                                onClick: function() {
                                    return "form" === n.state.$$mode ? n.pickChild("controls", "controls") : n.pickChild("body")
                                },
                                block: !0
                            },
                            "å†…å®¹åŒºæ–°å¢žå†…å®¹")
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "affixFooter",
                            label: "å›ºå®šåº•éƒ¨",
                            type: "switch",
                            value: !1,
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "mode",
                            label: "è¡¨å•å±•ç¤ºæ¨¡å¼",
                            type: "button-group",
                            size: "xs",
                            visibleOn: 'data.$$mode == "form"',
                            clearable: !0,
                            pipeIn: o.defaultValue(""),
                            options: [{
                                label: "ç»§æ‰¿",
                                value: ""
                            },
                            {
                                label: "é»˜è®¤",
                                value: "normal"
                            },
                            {
                                label: "å·¦å³æ‘†æ”¾",
                                value: "horizontal"
                            },
                            {
                                label: "å†…è”",
                                value: "inline"
                            }]
                        },
                        o.getSchemaTplByName("horizontal", {
                            visibleOn: '(data.mode || data.$$formMode) == "horizontal" && data.$$mode == "form"'
                        }), {
                            name: "className",
                            label: "æ ·å¼",
                            type: "button-group",
                            size: "sm",
                            pipeIn: function(e) {
                                return "string" == typeof e && /(?:^|\s)(Panel\-\-(\w+))(?:$|\s)/.test(e) ? RegExp.$1: ""
                            },
                            pipeOut: function(e, t) {
                                return t ? (t.replace(/(?:^|\s)(Panel\-\-(\w+))(?=($|\s))/g, "") + " " + e).replace(/\s+/g, " ").trim() : e
                            },
                            options: [{
                                label: "é»˜è®¤",
                                value: "Panel--default"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "Panel--primary"
                            },
                            {
                                label: "æç¤º",
                                value: "Panel--info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "Panel--success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "Panel--warning"
                            },
                            {
                                label: "å±é™©",
                                value: "Panel--danger"
                            }]
                        },
                        o.getSchemaTplByName("className", {
                            pipeIn: o.defaultValue("Panel--default")
                        }), o.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "å¤´éƒ¨åŒºåŸŸ CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹åŒºåŸŸ CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "footerClassName",
                            label: "åº•éƒ¨åŒºåŸŸ CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "actionsClassName",
                            label: "æŒ‰é’®å¤–å±‚ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                };
                var r = t.controls ? "form": "other";
                return n.disabledContainers = "form" === r ? ["body"] : ["controls"],
                n.state = l.__assign(l.__assign({},
                n.modifyProps(t, a)), {
                    $$mode: r
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.setSettingsValue = function(e) {
                var t = this.props.$$id,
                a = this.context.editor,
                i = l.__assign(l.__assign({},
                a.get(t)), e),
                n = i.$$mode;
                return delete i.$$mode,
                delete i.$$formMode,
                "form" === n ? (this.schemaCaches.other = i.body, delete i.body, this.state.$$mode !== n && (i.controls = this.schemaCaches[n] || [{
                    type: "text",
                    label: "æ–‡æœ¬",
                    name: "var1"
                }])) : (this.schemaCaches.form = i.controls, delete i.controls, this.state.$$mode !== n && (i.body = this.schemaCaches[n] || [{
                    type: "tpl",
                    tpl: "å†…å®¹",
                    inline: !1
                }])),
                this.disabledContainers = "form" === n ? ["body"] : ["controls"],
                this.mounted && this.setState({
                    $$mode: n
                }),
                a.update(t, r.JSONPipeIn(i), !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    $$mode: this.state.$$mode || "form",
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                "actions" === (a = "controls" === a ? "control": a) ? !!~ ["submit", "button", "reset"].indexOf(t) : e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "actions" === t ? e.prototype.pickChild.call(this, "action", "actions", void 0, ["button", "reset", "submit", "button-group", "dropdown-button"], !0) : "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t = l.__decorate([n.Editor("panel-control", {
                name: "é¢æ¿(Panel)",
                description: "é›†åˆå¤šä¸ªè¡¨å•é¡¹è¿›è¡Œå±•ç¤ºï¼Œå¯ä»¥é…ç½®æ ‡é¢˜å’Œåº•éƒ¨",
                type: "panel",
                tags: ["è¡¨å•é¡¹"],
                scaffold: d,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    d)
                },
                $schema: "https://isuda.baidu.com/schemas/PanelControlSchema.json"
            },
            {
                renderActions: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.regionRef;
                    return i.
                default.createElement(p.
                default, {
                        ref: function(e) {
                            return l("actions", e)
                        },
                        name: "actions",
                        label: "æŒ‰é’®é›†åˆ",
                        hostId: a.props.$$id
                    },
                    this.super.apply(this, e))
                },
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || this.props.children) return this.super.apply(this, e);
                    var l = this.props.controls,
                    n = this.super.apply(this, e),
                    o = this.props.regionRef;
                    return i.
                default.createElement(p.
                default, {
                        key: l ? "controls": "body",
                        ref: function(e) {
                            return o(l ? "controls": "body", e)
                        },
                        name: l ? "controls": "body",
                        label: l ? "å­è¡¨å•": "å†…å®¹",
                        hostId: a.props.$$id
                    },
                    n)
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (c.
    default);
        t.PanelControlEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.HBoxControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(4),
        r = a(4),
        s = a(6),
        p = l.__importDefault(a(9)),
        c = {
            type: "hbox",
            label: "HBox",
            columns: [{
                controls: [{
                    label: "æ–‡æœ¬",
                    name: "var1",
                    type: "text"
                }]
            },
            {
                controls: [{
                    label: "æ–‡æœ¬2",
                    name: "var2",
                    type: "text"
                }]
            }]
        },
        d = function(e) {
            function t(t, a) {
                var i = e.call(this, t, a) || this;
                i.tipName = "HBox",
                i.schemaCaches = {},
                i.settingsSchema = {
                    title: "HBoxé…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "xs",
                            mode: "inline",
                            value: "form",
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "combo",
                            name: "columns",
                            label: "åˆ—è®¾ç½®",
                            multiple: !0,
                            multiLine: !0,
                            minLength: 1,
                            draggable: !0,
                            addButtonText: "æ–°å¢žä¸€åˆ—",
                            scaffold: {
                                controls: [{
                                    label: "æ–‡æœ¬",
                                    name: "var",
                                    type: "text"
                                }]
                            },
                            strictMode: !1,
                            controls: [{
                                name: "mode",
                                label: "å±•ç¤ºæ¨¡å¼",
                                type: "button-group",
                                size: "xs",
                                pipeIn: n.defaultValue("normal", !1),
                                hiddenOn: 'this.$$mode === "other"',
                                options: [{
                                    label: "é»˜è®¤",
                                    value: "normal"
                                },
                                {
                                    label: "å·¦å³æ‘†æ”¾",
                                    value: "horizontal"
                                },
                                {
                                    label: "å†…è”",
                                    value: "inline"
                                }]
                            },
                            n.getSchemaTplByName("horizontal", {
                                visibleOn: 'this.mode == "horizontal"'
                            }), n.getSchemaTplByName("className", {
                                name: "columnClassName",
                                label: "åˆ— CSS ç±»å",
                                description: "å¯é…ç½®  <code>w ã€w-xxsã€w-xsã€w-smã€w-mdã€w-lgã€w-xlã€w-xxl</code> æ¥å›ºå®šåˆ—çš„å®½åº¦ã€‚"
                            })]
                        },
                        n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), {
                            type: "button-group",
                            name: "gap",
                            label: "é—´éš”å¤§å°",
                            pipeIn: n.defaultValue(""),
                            size: "xs",
                            options: [{
                                value: "xs",
                                label: "æžå°"
                            },
                            {
                                value: "sm",
                                label: "å°"
                            },
                            {
                                value: "",
                                label: "æ­£å¸¸"
                            }]
                        },
                        n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("visible")]
                    }])]
                };
                var o = Array.isArray(t.columns) && t.columns[0] && t.columns[0].body ? "other": "form";
                return i.state = l.__assign(l.__assign({},
                i.modifyProps(t, a, o)), {
                    $$mode: o
                }),
                i
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                o.anyChanged(["columns"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    unmountOnExit: !0
                }))
            },
            t.prototype.modifyProps = function(e, t, a) {
                var i = this;
                void 0 === t && (t = this.context),
                void 0 === a && (a = this.state.$$mode);
                var n = e.columns,
                o = e.clipboard,
                s = e.$$id;
                return t.editor.getActiveId() !== s ? {
                    columns: n
                }: {
                    columns: n = n.map((function(e, t) {
                        var n = e.controls,
                        p = e.body,
                        c = {};
                        return "form" === a ? c.controls = i.attachAddBtn(n, [o && i.acceptChild(o.type, "control") ? i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault();
                            var a = i.context.editor,
                            l = a.get(s).columns.concat(),
                            n = l[t].controls; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(o)),
                            l[t].controls = n,
                            a.update(s, {
                                columns: l
                            })
                        }), "ç²˜è´´", "fa fa-paste") : null, i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault(),
                            i.pickChild("control", "columns", (function(e) {
                                var a = i.context.editor,
                                l = a.get(s).columns.concat(),
                                n = l[t].controls; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(e)),
                                l[t].controls = n,
                                a.update(s, {
                                    columns: l
                                })
                            }))
                        }), "åœ¨å†…å®¹åŒºæ–°å¢žå†…å®¹")]) : c.body = i.attachAddBtn(p, [o && i.acceptChild(o.type, "body") ? i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault();
                            var a = i.context.editor,
                            l = a.get(s).columns.concat(),
                            n = l[t].body; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(o)),
                            l[t].body = n,
                            a.update(s, {
                                columns: l
                            })
                        }), "ç²˜è´´", "fa fa-paste") : null, i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault(),
                            i.pickChild("body", "body", (function(e) {
                                var a = i.context.editor,
                                l = a.get(s).columns.concat(),
                                n = l[t].body; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(e)),
                                l[t].body = n,
                                a.update(s, {
                                    columns: l
                                })
                            }))
                        }), "åœ¨å†…å®¹åŒºæ–°å¢žå†…å®¹")]),
                        l.__assign(l.__assign({},
                        e), c)
                    }))
                }
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this,
                a = this.props.$$id,
                i = this.context.editor,
                n = l.__assign(l.__assign({},
                i.get(a)), e),
                o = n.$$mode;
                return delete n.$$mode,
                delete n.$$formMode,
                delete n.formHorizontal,
                Array.isArray(n.columns) && (n.columns = n.columns.map((function(e, a) {
                    return e = l.__assign({},
                    e),
                    "form" === o ? (t.schemaCaches["other_" + a] = e.body, delete e.body, t.state.$$mode !== o && (e.controls = t.schemaCaches[o + "_" + a] || [{
                        type: "text",
                        label: "æ–‡æœ¬",
                        name: "var1"
                    }])) : (t.schemaCaches["form_" + a] = e.controls, delete e.controls, t.state.$$mode !== o && (e.body = t.schemaCaches[o + "_" + a] || [{
                        type: "tpl",
                        tpl: "å†…å®¹",
                        inline: !1
                    }])),
                    e
                }))),
                this.mounted && this.setState({
                    $$mode: o
                }),
                i.update(a, r.JSONPipeIn(n), !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    $$mode: this.state.$$mode || "form",
                    $$formMode: this.props.formMode,
                    formHorizontal: this.props.formHorizontal
                })
            },
            t = l.__decorate([i.Editor("hbox-control", {
                name: "HBox",
                tags: ["è¡¨å•é¡¹"],
                description: "HBoxå¸ƒå±€ï¼Œå®žçŽ°è¡¨å•é¡¹å·¦å³æŽ’åˆ—",
                type: "hbox",
                scaffold: c,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    c)
                },
                $schema: "https://isuda.baidu.com/schemas/HBoxControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (p.
    default);
        t.HBoxControlEditor = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.GridControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(4),
        r = a(4),
        s = a(6),
        p = l.__importDefault(a(9)),
        c = {
            type: "grid",
            label: "Grid",
            columns: [{
                controls: [{
                    label: "æ–‡æœ¬",
                    name: "var1",
                    type: "text"
                }]
            },
            {
                controls: [{
                    label: "æ–‡æœ¬2",
                    name: "var2",
                    type: "text"
                }]
            }]
        },
        d = function(e) {
            function t(t, a) {
                var i = e.call(this, t, a) || this;
                i.tipName = "Grid",
                i.schemaCaches = {},
                i.settingsSchema = {
                    title: "Gridé…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), {
                            label: "å†…å®¹å½¢å¼",
                            name: "$$mode",
                            type: "button-group",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            value: "form",
                            description: "å¦‚æžœé€‰æ‹©è¡¨å•ï¼Œå†…å®¹é»˜è®¤ä¸ºè¡¨å•é¡¹ï¼Œå¦‚æžœé€‰æ‹©å…¶ä»–åˆ™å¯ä»¥æ”¾å…¶ä»–ç±»åž‹æ¸²æŸ“å™¨",
                            options: [{
                                label: "è¡¨å•",
                                value: "form"
                            },
                            {
                                label: "å…¶ä»–",
                                value: "other"
                            }]
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: 'data.$$formMode == "horizontal" && data.label !== false && data.horizontal'
                        }), {
                            type: "combo",
                            name: "columns",
                            label: "åˆ—è®¾ç½®",
                            multiple: !0,
                            multiLine: !0,
                            minLength: 1,
                            draggable: !0,
                            addButtonText: "æ–°å¢žä¸€åˆ—",
                            scaffold: {
                                controls: [{
                                    label: "æ–‡æœ¬",
                                    name: "var",
                                    type: "text"
                                }]
                            },
                            controls: [{
                                name: "mode",
                                label: "å±•ç¤ºæ¨¡å¼",
                                type: "button-group",
                                size: "xs",
                                pipeIn: n.defaultValue("normal", !1),
                                options: [{
                                    label: "é»˜è®¤",
                                    value: "normal"
                                },
                                {
                                    label: "å·¦å³æ‘†æ”¾",
                                    value: "horizontal"
                                },
                                {
                                    label: "å†…è”",
                                    value: "inline"
                                }]
                            },
                            n.getSchemaTplByName("horizontal", {
                                visibleOn: 'data.mode == "horizontal"'
                            }), {
                                type: "switch",
                                name: "sm",
                                label: "å®½åº¦å¹³å‡åˆ†é…",
                                mode: "inline",
                                className: "block",
                                pipeIn: function(e) {
                                    return ! e
                                },
                                pipeOut: function(e) {
                                    return e ? void 0 : 6
                                },
                                columnClassName: "w-xs v-middle"
                            },
                            {
                                label: "å®½åº¦å æ¯”",
                                type: "range",
                                name: "sm",
                                visibleOn: "data.sm",
                                min: 1,
                                max: 12,
                                step: 1
                            }]
                        },
                        n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("visible")]
                    }])]
                };
                var o = Array.isArray(t.columns) && t.columns[0] && t.columns[0].body ? "other": "form";
                return i.state = l.__assign(l.__assign({},
                i.modifyProps(t, a, o)), {
                    $$mode: o
                }),
                i
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                o.anyChanged(["columns"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    unmountOnExit: !0
                }))
            },
            t.prototype.modifyProps = function(e, t, a) {
                var i = this;
                void 0 === t && (t = this.context),
                void 0 === a && (a = this.state.$$mode);
                var n = e.columns,
                o = e.clipboard,
                s = e.$$id;
                return t.editor.getActiveId() !== s ? {
                    columns: n
                }: {
                    columns: n = n.map((function(e, t) {
                        var n = e.controls,
                        p = e.body,
                        c = {};
                        return "form" === a ? c.controls = i.attachAddBtn(n, [o && i.acceptChild(o.type, "control") ? i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault();
                            var a = i.context.editor,
                            l = a.get(s).columns.concat(),
                            n = l[t].controls; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(o)),
                            l[t].controls = n,
                            a.update(s, {
                                columns: l
                            })
                        }), "åœ¨ FiledSet ä¸­ç²˜è´´å†…å®¹", "fa fa-paste") : null, i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault(),
                            i.pickChild("control", "columns", (function(e) {
                                var a = i.context.editor,
                                l = a.get(s).columns.concat(),
                                n = l[t].controls; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(e)),
                                l[t].controls = n,
                                a.update(s, {
                                    columns: l
                                })
                            }))
                        }), "åœ¨å†…å®¹åŒºæ–°å¢žå†…å®¹")]) : c.body = i.attachAddBtn(p, [o && i.acceptChild(o.type, "body") ? i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault();
                            var a = i.context.editor,
                            l = a.get(s).columns.concat(),
                            n = l[t].body; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(o)),
                            l[t].body = n,
                            a.update(s, {
                                columns: l
                            })
                        }), "åœ¨ FiledSet ä¸­ç²˜è´´å†…å®¹", "fa fa-paste") : null, i.renderButton((function(e) {
                            e.stopPropagation(),
                            e.preventDefault(),
                            i.pickChild("body", "body", (function(e) {
                                var a = i.context.editor,
                                l = a.get(s).columns.concat(),
                                n = l[t].body; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(r.JSONPipeIn(e)),
                                l[t].body = n,
                                a.update(s, {
                                    columns: l
                                })
                            }))
                        }), "åœ¨å†…å®¹åŒºæ–°å¢žå†…å®¹", "fa fa-plus")]),
                        l.__assign(l.__assign({},
                        e), c)
                    }))
                }
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this,
                a = this.props.$$id,
                i = this.context.editor,
                n = l.__assign(l.__assign({},
                i.get(a)), e),
                o = n.$$mode;
                return delete n.$$mode,
                delete n.$$formMode,
                delete n.formHorizontal,
                Array.isArray(n.columns) && (n.columns = n.columns.map((function(e, a) {
                    return e = l.__assign({},
                    e),
                    "form" === o ? (t.schemaCaches["other_" + a] = e.body, delete e.body, t.state.$$mode !== o && (e.controls = t.schemaCaches[o + "_" + a] || [{
                        type: "text",
                        label: "æ–‡æœ¬",
                        name: "var1"
                    }])) : (t.schemaCaches["form_" + a] = e.controls, delete e.controls, t.state.$$mode !== o && (e.body = t.schemaCaches[o + "_" + a] || [{
                        type: "tpl",
                        tpl: "å†…å®¹",
                        inline: !1
                    }])),
                    e
                }))),
                this.mounted && this.setState({
                    $$mode: o
                }),
                i.update(a, r.JSONPipeIn(n), !0, "form")
            },
            t.prototype.getSettingsValue = function() {
                var e = this.props.$$id,
                t = this.context.editor.get(e);
                return l.__assign(l.__assign({},
                t), {
                    $$mode: this.state.$$mode || "form",
                    $$formMode: this.props.formMode,
                    formHorizontal: this.props.formHorizontal
                })
            },
            t = l.__decorate([i.Editor("grid-control", {
                name: "Grid",
                description: "é¡µé¢å¸ƒå±€",
                tags: ["è¡¨å•é¡¹"],
                type: "grid",
                icon: "fa fa-columns",
                scaffold: c,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    c)
                },
                $schema: "https://isuda.baidu.com/schemas/GridControlSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (p.
    default);
        t.GridControlEditor = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.QRCodeEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "qr-code",
            label: "äºŒç»´ç ",
            name: "qrcode",
            value: "AMis"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "QRCode",
                t.settingsSchema = {
                    title: "äºŒç»´ç é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            name: "value",
                            type: "text",
                            label: "äºŒç»´ç é»˜è®¤å€¼",
                            description: "æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), {
                            name: "codeSize",
                            type: "number",
                            label: "å®½é«˜å€¼",
                            pipeIn: n.defaultValue(128)
                        },
                        {
                            name: "backgroundColor",
                            type: "color",
                            label: "èƒŒæ™¯è‰²",
                            pipeIn: n.defaultValue("#fff")
                        },
                        {
                            name: "foregroundColor",
                            type: "color",
                            label: "å‰æ™¯è‰²",
                            pipeIn: n.defaultValue("#000")
                        },
                        {
                            name: "level",
                            type: "select",
                            label: "å¤æ‚åº¦",
                            pipeIn: n.defaultValue("L"),
                            options: [{
                                label: "L",
                                value: "L"
                            },
                            {
                                label: "M",
                                value: "M"
                            },
                            {
                                label: "Q",
                                value: "Q"
                            },
                            {
                                label: "H",
                                value: "H"
                            }]
                        },
                        n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("qr-code-control", {
                name: "äºŒç»´ç ",
                description: "æ”¯æŒé…ç½®å®½é«˜ï¼Œå‰æ™¯è‰²å’ŒèƒŒæ™¯è‰²ä»¥åŠå¤æ‚åº¦",
                type: "qr-code",
                scaffold: s,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: {
                        type: "qr-code",
                        name: "qrcode",
                        value: "AMis"
                    }
                }
            })], t)
        } (o.FormItemEditor);
        t.QRCodeEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.NestedSelectControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "nested-select",
            label: "åµŒå¥—ä¸‹æ‹‰æ¡†",
            name: "nestedSelect",
            options: [{
                label: "é€‰é¡¹A",
                value: "A"
            },
            {
                label: "é€‰é¡¹B",
                value: "B",
                children: [{
                    label: "é€‰é¡¹C",
                    value: "C"
                },
                {
                    label: "é€‰é¡¹D",
                    value: "D"
                }]
            }]
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Nested Select",
                t.settingsSchema = {
                    title: "åµŒå¥—é€‰æ‹©é…ç½®",
                    definitions: {
                        options: {
                            label: "é€‰é¡¹ Options",
                            name: "options",
                            type: "combo",
                            multiple: !0,
                            multiLine: !0,
                            draggable: !0,
                            addButtonText: "æ–°å¢žé€‰é¡¹",
                            scaffold: {
                                label: "",
                                value: ""
                            },
                            controls: [{
                                type: "group",
                                controls: [{
                                    type: "text",
                                    name: "label",
                                    placeholder: "åç§°",
                                    required: !0
                                },
                                {
                                    type: "text",
                                    name: "value",
                                    placeholder: "å€¼",
                                    unique: !0
                                }]
                            },
                            {
                                $ref: "options",
                                label: "å­é€‰é¡¹",
                                name: "children",
                                addButtonText: "æ–°å¢žå­é€‰é¡¹"
                            }]
                        }
                    },
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("placeholder"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "é€‰é¡¹",
                        controls: [{
                            $ref: "options",
                            name: "options"
                        },
                        n.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–é€‰é¡¹æŽ¥å£"
                        }), n.getSchemaTplByName("multiple"), n.getSchemaTplByName("joinValues"), n.getSchemaTplByName("delimiter"), , n.getSchemaTplByName("extractValue")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validations"), n.getSchemaTplByName("validationErrors"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("nested-select-control", {
                name: "åµŒå¥—é€‰æ‹©æ¡†",
                description: "é€‚ç”¨äºŽé€‰é¡¹ä¸­å«æœ‰å­é¡¹ï¼Œå¯é€šè¿‡<code>source</code>æ‹‰å–é€‰é¡¹ï¼Œæ”¯æŒå¤šé€‰",
                type: "nested-select",
                scaffold: s,
                tags: ["è¡¨å•é¡¹"],
                previewSchema: {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/NestedSelectControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.NestedSelectControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.RatingControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "rating",
            label: "è¯„åˆ†",
            name: "rating"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Rating",
                t.settingsSchema = {
                    title: "è¯„åˆ†é€‰æ‹©é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("switchDefaultValue"), {
                            type: "number",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        {
                            type: "switch",
                            name: "half",
                            mode: "inline",
                            className: "w-full",
                            label: "å…è®¸åŠæ˜Ÿ",
                            value: !1
                        },
                        {
                            type: "switch",
                            name: "readOnly",
                            mode: "inline",
                            className: "w-full",
                            label: "åªè¯»",
                            value: !1
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), {
                            label: "æœ€å¤§å€¼",
                            name: "count",
                            type: "number",
                            value: 5
                        },
                        n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("rating-control", {
                name: "è¯„åˆ†",
                tags: ["è¡¨å•é¡¹"],
                description: "æ”¯æŒåªè¯»ã€åŠæ˜Ÿé€‰æ‹©",
                icon: "fa fa-star",
                type: "rating",
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/RatingControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.RatingControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CheckboxControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(7),
        r = a(6),
        s = {
            type: "city",
            label: "åŸŽå¸‚é€‰æ‹©",
            name: "city"
        },
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "city",
                t.settingsSchema = {
                    title: "åŸŽå¸‚é€‰æ‹©é…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), {
                            type: "switch",
                            name: "allowDistrict",
                            label: "å…è®¸é€‰æ‹©åŒºåŸŸ",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: n.defaultValue(!0)
                        },
                        {
                            type: "switch",
                            name: "allowCity",
                            label: "å…è®¸é€‰æ‹©åŸŽå¸‚",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: n.defaultValue(!0)
                        },
                        n.getSchemaTplByName("switchDefaultValue"), {
                            name: "value",
                            type: "text",
                            label: "é»˜è®¤å€¼",
                            visibleOn: 'typeof data.value !== "undefined"',
                            validations: "isNumeric",
                            labelRemark: {
                                trigger: "click",
                                className: "m-l-xs",
                                rootClose: !0,
                                content: "åŸŽå¸‚ç¼–ç ",
                                placement: "right"
                            }
                        },
                        n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark"), n.getSchemaTplByName("extractValue")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("city-control", {
                name: "åŸŽå¸‚é€‰æ‹©",
                description: "å¯é…ç½®æ˜¯å¦é€‰æ‹©åŒºåŸŸæˆ–è€…åŸŽå¸‚",
                type: "city",
                tags: ["è¡¨å•é¡¹"],
                scaffold: s,
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    s)
                },
                $schema: "https://isuda.baidu.com/schemas/CityControlSchema.json"
            })], t)
        } (o.FormItemEditor);
        t.CheckboxControlEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.InputGroupControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = a(12),
        r = a(7),
        s = a(6),
        p = a(5),
        c = a(3),
        d = {
            type: "input-group",
            size: "sm",
            name: "input-group",
            inline: !0,
            label: "input ç»„åˆ",
            controls: [{
                type: "text",
                placeholder: "æœç´¢ä½œä¸šID/åç§°",
                inputClassName: "b-r-none p-r-none",
                name: "input-group"
            },
            {
                type: "submit",
                label: "æäº¤",
                level: "primary"
            }]
        },
        m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Input Group",
                t.handleAdd = function() {
                    return t.pickChild("control", "controls", void 0, ["text", "url", "email", "password", "select", "date", "time", "date-time", "date-range", "formula", "color", "city", "icon", "plain", "tpl", "button", "submit", "reset"], !0)
                },
                t.containers = ["controls"],
                t.settingsSchema = {
                    title: "æ–‡æœ¬ç»„åˆé…ç½®",
                    controls: [n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: s([{
                            name: "controls",
                            type: "combo",
                            multiple: !0,
                            addable: !1,
                            draggable: !0,
                            draggableTip: "å¯æŽ’åºã€å¯ç§»é™¤ã€å¦‚è¦ç¼–è¾‘è¯·åœ¨é¢„è§ˆåŒºé€‰ä¸­ç¼–è¾‘",
                            editable: !1,
                            visibleOn: "this.controls && this.controls.length",
                            controls: [{
                                type: "tpl",
                                inline: !1,
                                className: "p-t-xs",
                                tpl: '<%= data.label %><% if (data.icon) { %><i class="<%= data.icon %>"/><% }%>'
                            }]
                        },
                        {
                            children: c.createElement(p.Button, {
                                className: "m-b",
                                onClick: t.handleAdd,
                                level: "danger",
                                tooltip: "æ’å…¥ä¸€ä¸ªæ–°çš„å…ƒç´ ",
                                size: "sm",
                                block: !0
                            },
                            "æ–°å¢žå…ƒç´ ")
                        },
                        n.getSchemaTplByName("formItemName", {
                            required: !0
                        }), n.getSchemaTplByName("label"), n.getSchemaTplByName("description"), n.getSchemaTplByName("remark"), n.getSchemaTplByName("labelRemark")])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("formItemMode"), n.getSchemaTplByName("horizontalMode"), n.getSchemaTplByName("horizontal", {
                            label: "",
                            visibleOn: '(data.$$formMode == "horizontal" || data.mode == "horizontal") && data.label !== false && data.horizontal'
                        }), n.getSchemaTplByName("formItemSize"), n.getSchemaTplByName("fontItemInline"), n.getSchemaTplByName("className"), n.getSchemaTplByName("className", {
                            label: "Label CSS ç±»å",
                            name: "labelClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "Input CSS ç±»å",
                            name: "inputClassName"
                        }), n.getSchemaTplByName("className", {
                            label: "æè¿° CSS ç±»å",
                            name: "descriptionClassName",
                            visibleOn: "data.description"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("required"), n.getSchemaTplByName("validateOnChange"), n.getSchemaTplByName("submitOnChange"), n.getSchemaTplByName("disabled"), n.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.getSettingsValue = function() {
                var t = e.prototype.getSettingsValue.call(this);
                return l.__assign(l.__assign({},
                t), {
                    formHorizontal: this.props.formHorizontal,
                    $$formMode: this.props.formMode
                })
            },
            t.prototype.setSettingsValue = function(t) {
                return e.prototype.setSettingsValue.call(this, o(t, ["formHorizontal", "$$formMode"]))
            },
            t = l.__decorate([i.Editor("input-group-control", {
                name: "æ–‡æœ¬æ¡†ç»„åˆ",
                description: "<code>text</code>ä¸Žå…¶ä»–ç»„ä»¶ç»„åˆ",
                type: "input-group",
                scaffold: d,
                tags: ["è¡¨å•é¡¹", "å®¹å™¨"],
                previewSchema: {
                    type: "form",
                    className: "text-left",
                    wrapWithPanel: !1,
                    controls: l.__assign({},
                    d)
                },
                $schema: "https://isuda.baidu.com/schemas/InputGroupControlSchema.json"
            })], t)
        } (r.FormItemEditor);
        t.InputGroupControlEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ResetEditor = t.SubmitEditor = t.ActionEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(28),
        r = a(5),
        s = a(2),
        p = a(6),
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "æŒ‰é’®",
                t.settingsSchema = {
                    title: "æŒ‰é’®é…ç½®",
                    controls: [s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: p([{
                            label: "åç§°",
                            type: "text",
                            name: "label"
                        },
                        {
                            label: "ç±»åž‹",
                            type: "button-group",
                            name: "type",
                            size: "sm",
                            className: "block",
                            options: [{
                                label: "æŒ‰é’®",
                                value: "button"
                            },
                            {
                                label: "æäº¤",
                                value: "submit"
                            },
                            {
                                label: "é‡ç½®",
                                value: "reset"
                            }]
                        },
                        {
                            name: "confirmText",
                            type: "textarea",
                            label: "ç¡®è®¤æ–‡å­—",
                            description: "ç‚¹å‡»åŽä¼šå¼¹å‡ºæ­¤å†…å®¹ï¼Œç­‰ç”¨æˆ·ç¡®è®¤åŽæ‰ç»§ç»­æ“ä½œã€‚"
                        },
                        {
                            label: "è¡Œä¸º",
                            type: "select",
                            name: "actionType",
                            clearable: !0,
                            options: [{
                                label: "å¼¹æ¡†",
                                value: "dialog"
                            },
                            {
                                label: "æŠ½å‡ºå¼å¼¹æ¡†ï¼ˆDrawerï¼‰",
                                value: "drawer"
                            },
                            {
                                label: "å‘é€è¯·æ±‚",
                                value: "ajax"
                            },
                            {
                                label: "é¡µé¢è·³è½¬(å•é¡µæ¨¡å¼)",
                                value: "link"
                            },
                            {
                                label: "é¡µé¢è·³è½¬",
                                value: "url"
                            },
                            {
                                label: "åˆ·æ–°ç›®æ ‡",
                                value: "reload"
                            },
                            {
                                label: "å¤åˆ¶å†…å®¹",
                                value: "copy"
                            },
                            {
                                label: "æäº¤",
                                value: "submit"
                            },
                            {
                                label: "é‡ç½®",
                                value: "reset"
                            },
                            {
                                label: "ç¡®è®¤",
                                value: "confirm"
                            },
                            {
                                label: "å–æ¶ˆ",
                                value: "cancel"
                            },
                            {
                                label: "è·³è½¬ä¸‹ä¸€æ¡",
                                value: "next"
                            },
                            {
                                label: "è·³è½¬ä¸Šä¸€æ¡",
                                value: "prev"
                            }]
                        },
                        {
                            type: "text",
                            name: "content",
                            visibleOn: 'data.actionType == "copy"',
                            label: "å¤åˆ¶å†…å®¹æ¨¡æ¿"
                        },
                        {
                            type: "text",
                            name: "target",
                            visibleOn: 'data.actionType == "reload"',
                            label: "æŒ‡å®šåˆ·æ–°ç›®æ ‡",
                            required: !0
                        },
                        {
                            visibleOn: 'data.actionType == "dialog"',
                            name: "dialog",
                            value: {
                                title: "å¼¹æ¡†æ ‡é¢˜",
                                body: "<p>å¯¹ï¼Œä½ åˆšåˆšç‚¹å‡»äº†</p>"
                            },
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                block: !0,
                                onClick: t.handleEditDialog.bind(t)
                            },
                            "é…ç½®å¼¹æ¡†å†…å®¹")
                        },
                        {
                            visibleOn: 'data.actionType == "drawer"',
                            name: "drawer",
                            value: {
                                title: "å¼¹æ¡†æ ‡é¢˜",
                                body: "<p>å¯¹ï¼Œä½ åˆšåˆšç‚¹å‡»äº†</p>"
                            },
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                block: !0,
                                onClick: t.handleEditDrawer.bind(t)
                            },
                            "é…ç½®æŠ½å‡ºå¼å¼¹æ¡†å†…å®¹")
                        },
                        {
                            type: "switch",
                            label: "åˆå¹¶å¼¹çª—æ•°æ®",
                            visibleOn: 'this.actionType == "dialog" || this.actionType == "drawer"',
                            description: "æ˜¯å¦å°†å¼¹æ¡†æ•°æ®åˆå¹¶åˆ°æŒ‰é’®æ‰€åœ¨ç»„ä»¶ã€‚",
                            mode: "inline",
                            className: "block",
                            name: "mergeData"
                        },
                        s.getSchemaTplByName("api", {
                            label: "æŽ¥å£ä¿¡æ¯",
                            visibleOn: 'data.actionType == "ajax"'
                        }), {
                            visibleOn: 'data.actionType == "ajax"',
                            name: "feedback",
                            children: function(e) {
                                var a = e.onChange,
                                l = e.value;
                                return i.
                            default.createElement("div", {
                                    className: "m-b"
                                },
                                i.
                            default.createElement(r.Button, {
                                    size: "sm",
                                    level: l ? "danger": "info",
                                    onClick: t.handleEditFeedback.bind(t)
                                },
                                "é…ç½®åé¦ˆå¼¹æ¡†å†…å®¹"), l ? i.
                            default.createElement(r.Button, {
                                    size: "sm",
                                    level: "link",
                                    className: "m-l",
                                    onClick: function() {
                                        return a("")
                                    }
                                },
                                "æ¸…ç©ºè®¾ç½®") : null)
                            }
                        },
                        {
                            name: "feedback.visibleOn",
                            label: "æ˜¯å¦å¼¹å‡ºè¡¨è¾¾å¼",
                            type: "text",
                            visibleOn: "this.feedback",
                            autoComplete: !1,
                            description: "è¯·ä½¿ç”¨ JS è¡¨è¾¾å¼å¦‚ï¼š`this.xxx == 1`"
                        },
                        {
                            label: "è·³è½¬",
                            name: "redirect",
                            type: "text",
                            description: "å½“è®¾ç½®æ­¤å€¼åŽï¼Œæäº¤å®Œè¯·æ±‚åŽè·³è½¬åˆ°ç›®æ ‡åœ°å€ã€‚",
                            visibleOn: 'data.actionType == "ajax"'
                        },
                        {
                            type: "text",
                            label: "ç›®æ ‡åœ°å€",
                            name: "link",
                            visibleOn: 'data.actionType == "link"'
                        },
                        {
                            type: "text",
                            label: "ç›®æ ‡åœ°å€",
                            name: "url",
                            visibleOn: 'data.actionType == "url"',
                            placeholder: "http://"
                        },
                        {
                            type: "switch",
                            name: "blank",
                            visibleOn: 'data.actionType == "url"',
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦ç”¨æ–°çª—å£æ‰“å¼€",
                            pipeIn: s.defaultValue(!0)
                        },
                        t.isInDialog ? {
                            visibleOn: 'data.actionType == "submit" || data.type == "submit"',
                            name: "close",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            pipeIn: s.defaultValue(!0),
                            label: "æ˜¯å¦å…³é—­å½“å‰å¼¹æ¡†"
                        }: null, {
                            type: "switch",
                            label: "éªŒè¯å­—æ®µ",
                            mode: "inline",
                            className: "block",
                            name: "required",
                            visibleOn: 'this.type !== "submit"',
                            pipeIn: function(e) {
                                return void 0 !== e
                            },
                            pipeOut: function(e, t, a) {
                                return e ? "": void 0
                            },
                            description: "ç‚¹å‡»åŽæ˜¯å¦è¦æ±‚éƒ¨åˆ†å­—æ®µé€šè¿‡éªŒè¯ï¼Œå¼€å¯åŽå¯ä»¥æŒ‡å®šå“ªäº›å­—æ®µéœ€è¦é€šè¿‡éªŒè¯ã€‚"
                        },
                        {
                            type: "array",
                            addable: !0,
                            removable: !0,
                            visibleOn: 'typeof this.required !== "undefined"',
                            name: "required",
                            items: {
                                type: "text",
                                required: !0,
                                placeholder: "è¯·è¾“å…¥å­—æ®µå"
                            },
                            addButtonText: "æ–°å¢žå­—æ®µ",
                            minLength: 1,
                            inline: !0
                        },
                        {
                            type: "text",
                            name: "reload",
                            label: "åˆ·æ–°ç›®æ ‡",
                            visibleOn: 'data.actionType != "link" && data.actionType != "url"',
                            description: "å¯ä»¥æŒ‡å®šç›®æ ‡ç»„ä»¶çš„ `name` å±žæ€§å€¼ï¼Œè¡¨ç¤ºè¿™ä¸ªåŠ¨ä½œå®ŒæˆåŽåˆ·æ–°ç›®æ ‡ç»„ä»¶ã€‚"
                        },
                        {
                            type: "text",
                            name: "target",
                            visibleOn: 'data.actionType != "reload"',
                            label: "æŒ‡å®šå“åº”ç»„ä»¶",
                            description: "é»˜è®¤ä¸ºå½“å‰ç»„ä»¶æ‰€åœ¨å®¹å™¨ç»„ä»¶ã€‚"
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "block",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "å—çŠ¶æ¨¡å¼",
                            pipeIn: s.defaultValue(!1)
                        },
                        s.getSchemaTplByName("icon"), {
                            label: "å›¾æ ‡æŽ’åˆ—",
                            type: "button-group",
                            name: "iconClassName",
                            size: "sm",
                            visibleOn: 'this.label && typeof this.icon === "string"',
                            pipeIn: function(e) {
                                return "string" == typeof e ? /(pull\-left|pull\-right)/i.test(e) ? RegExp.$1: "": e
                            },
                            pipeOut: function(e, t) {
                                return ((t = t ? t.replace(/(pull\-left|pull\-right)/i, "") : "") ? t + " ": "").replace(/\s+/g, " ") + e
                            },
                            options: [{
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "å·¦",
                                value: "pull-left"
                            },
                            {
                                label: "å³",
                                value: "pull-right"
                            }]
                        },
                        {
                            type: "textarea",
                            name: "tooltip",
                            label: "æç¤ºä¿¡æ¯",
                            description: "é¼ æ ‡åœç•™æ—¶å¼¹å‡ºè¯¥æ®µæ–‡å­—"
                        },
                        {
                            type: "button-group",
                            name: "tooltipPlacement",
                            visibleOn: "data.tooltip || data.disabledTip",
                            label: "æç¤ºä¿¡æ¯ä½ç½®",
                            size: "sm",
                            value: "bottom",
                            mode: "inline",
                            className: "block",
                            options: [{
                                label: "ä¸Š",
                                value: "top"
                            },
                            {
                                label: "å³",
                                value: "right"
                            },
                            {
                                label: "ä¸‹",
                                value: "bottom"
                            },
                            {
                                label: "å·¦",
                                value: "left"
                            }]
                        },
                        s.getSchemaTplByName("className", {
                            label: "å›¾æ ‡ CSS ç±»å",
                            name: "iconClassName",
                            autoComplete: !1
                        }), s.getSchemaTplByName("size"), {
                            label: "å±•ç¤ºæ ·å¼",
                            type: "select",
                            name: "level",
                            clearable: !1,
                            btnActiveLevel: "",
                            options: [{
                                label: "é»˜è®¤",
                                value: "default",
                                level: "default"
                            },
                            {
                                label: "é“¾æŽ¥",
                                value: "link",
                                level: "link"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "primary",
                                level: "primary"
                            },
                            {
                                label: "æ·¡è‰²",
                                value: "light",
                                level: "light"
                            },
                            {
                                label: "æ·±è‰²",
                                value: "dark",
                                level: "dark"
                            },
                            {
                                label: "æç¤º",
                                value: "info",
                                level: "info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "success",
                                level: "success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "warning",
                                level: "warning"
                            },
                            {
                                label: "ä¸¥é‡",
                                value: "danger",
                                level: "danger"
                            }]
                        },
                        s.getSchemaTplByName("className", {
                            label: "æŒ‰é’® CSS ç±»å",
                            name: "className"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [s.getSchemaTplByName("ref"), s.getSchemaTplByName("disabled"), {
                            type: "textarea",
                            visibleOn: "this.disabled || this.disabledOn",
                            name: "disabledTip",
                            label: "ç¦ç”¨æç¤ºä¿¡æ¯",
                            description: "æŒ‰é’®è¢«ç¦ç”¨æ—¶ï¼Œé¼ æ ‡åœç•™å¼¹å‡ºè¯¥æ®µæ–‡å­—"
                        },
                        s.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([n.Editor("button", {
                name: "æŒ‰é’®",
                type: "button",
                tags: ["æŒ‰é’®"],
                icon: "fa fa-stop-circle",
                description: "ç”¨æ¥å±•ç¤ºä¸€ä¸ªæŒ‰é’®ï¼Œä½ å¯ä»¥é…ç½®ä¸åŒçš„å±•ç¤ºæ ·å¼ï¼Œé…ç½®ä¸åŒçš„ç‚¹å‡»è¡Œä¸ºã€‚",
                previewSchema: {
                    type: "button",
                    label: "æŒ‰é’®"
                },
                scaffold: {
                    type: "button",
                    label: "æŒ‰é’®",
                    actionType: "dialog",
                    dialog: {
                        title: "ç³»ç»Ÿæç¤º",
                        body: "å¯¹ä½ ç‚¹å‡»äº†"
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/ActionSchema.json"
            })], t)
        } (o.ButtonEditor);
        t.ActionEditor = c;
        var d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Submit",
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([n.Editor("submit", {
                name: "æäº¤",
                type: "submit",
                description: "å±•ç¤ºä¸€ä¸ªæŒ‰é’®ï¼Œç”¨æ¥è§¦å‘æ‰€åœ¨è¡¨å•æäº¤æ“ä½œã€‚",
                tags: ["æŒ‰é’®"],
                icon: "fa fa-stop-circle",
                previewSchema: {
                    type: "button",
                    label: "æäº¤",
                    level: "primary"
                },
                scaffold: {
                    type: "submit",
                    label: "æäº¤",
                    level: "primary"
                },
                $schema: "https://isuda.baidu.com/schemas/ActionSchema.json"
            })], t)
        } (c);
        t.SubmitEditor = d;
        var m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Reset",
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([n.Editor("reset", {
                name: "é‡ç½®",
                type: "reset",
                tags: ["æŒ‰é’®"],
                icon: "fa fa-stop-circle",
                description: "ç”¨æ¥å±•ç¤ºä¸€ä¸ªæŒ‰é’®ï¼Œé‡ç½®æ‰€åœ¨è¡¨å•çš„æ•°æ®ã€‚",
                previewSchema: {
                    type: "reset",
                    label: "é‡ç½®"
                },
                scaffold: {
                    type: "reset",
                    label: "é‡ç½®"
                },
                $schema: "https://isuda.baidu.com/schemas/ActionSchema.json"
            })], t)
        } (c);
        t.ResetEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.AlertEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = l.__importDefault(a(9)),
        r = {
            type: "alert",
            body: {
                type: "tpl",
                tpl: "æç¤ºå†…å®¹"
            },
            level: "info"
        },
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Alert",
                t.settingsSchema = {
                    title: "æç¤ºé…ç½®",
                    controls: n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "switch",
                            name: "showCloseButton",
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¾ç¤ºå…³é—­æŒ‰é’®"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "æ ·å¼",
                            name: "level",
                            type: "select",
                            options: [{
                                label: "æç¤º",
                                value: "info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "warning"
                            },
                            {
                                label: "ä¸¥é‡",
                                value: "danger"
                            }]
                        },
                        n.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("visible")]
                    }])
                },
                t.containers = ["body"],
                t.dropable = !0,
                t.containerLabels = ["å†…å®¹åŒº"],
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("alert", {
                name: "æç¤º",
                description: "ç”¨æ¥åšæ–‡å­—ç‰¹æ®Šæç¤ºï¼Œåˆ†ä¸ºå››ç±»ï¼šæç¤ºç±»ã€æˆåŠŸç±»ã€è­¦å‘Šç±»å’Œå±é™©ç±»ã€‚å¯ç»“åˆ <code>visibleOn</code> ç”¨æ¥åšé”™è¯¯ä¿¡æ¯æç¤ºã€‚",
                type: "alert",
                icon: "fa fa-exclamation-circle",
                previewSchema: l.__assign(l.__assign({},
                r), {
                    className: "text-left",
                    showCloseButton: !0
                }),
                scaffold: r,
                $schema: "https://isuda.baidu.com/schemas/AlertSchema.json"
            })], t)
        } (o.
    default);
        t.AlertEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.AudioEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Audio",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "éŸ³é¢‘é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            name: "src",
                            type: "text",
                            label: "éŸ³é¢‘åœ°å€",
                            description: "æ”¯æŒèŽ·å–å˜é‡å¦‚ï¼š<code>\\${audioSrc}</code>"
                        },
                        {
                            type: "select",
                            name: "rates",
                            label: "éŸ³é¢‘å€é€Ÿ",
                            description: "åŠ é€ŸèŒƒå›´åœ¨0.1åˆ°16ä¹‹é—´",
                            multiple: !0,
                            pipeIn: function(e) {
                                return Array.isArray(e) ? e.join(",") : []
                            },
                            pipeOut: function(e) {
                                if (e && e.length) {
                                    var t = e.split(",");
                                    return t = t.filter((function(e) {
                                        return Number(e) && Number(e) > 0 && Number(e) <= 16
                                    })).map((function(e) {
                                        return Number(Number(e).toFixed(1))
                                    })),
                                    Array.from(new Set(t))
                                }
                                return []
                            },
                            options: ["0.5", "1", "1.5", "2", "2.5", "3", "3.5", "4"]
                        },
                        {
                            name: "autoPlay",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "è‡ªåŠ¨æ’­æ”¾"
                        },
                        {
                            name: "loop",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "å¾ªçŽ¯æ’­æ”¾"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className"), {
                            name: "inline",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "å†…è”æ¨¡å¼",
                            pipeIn: o.defaultValue(!0)
                        },
                        {
                            name: "controls",
                            type: "select",
                            label: "å†…éƒ¨æŽ§ä»¶",
                            multiple: !0,
                            extractValue: !0,
                            joinValues: !1,
                            options: [{
                                label: "å€é€Ÿ",
                                value: "rates"
                            },
                            {
                                label: "æ’­æ”¾",
                                value: "play"
                            },
                            {
                                label: "æ—¶é—´",
                                value: "time"
                            },
                            {
                                label: "è¿›åº¦",
                                value: "process"
                            },
                            {
                                label: "éŸ³é‡",
                                value: "volume"
                            }],
                            pipeIn: o.defaultValue(["rates", "play", "time", "process", "volume"]),
                            labelRemark: {
                                trigger: "click",
                                className: "m-l-xs",
                                rootClose: !0,
                                content: "é€‰æ‹©å€é€ŸåŽï¼Œè¿˜éœ€è¦åœ¨å¸¸è§„é€‰æ‹©æ ä¸­é…ç½®å€é€Ÿ",
                                placement: "right"
                            }
                        }]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("audio", {
                name: "éŸ³é¢‘",
                type: "audio",
                icon: "fa fa-music",
                description: "éŸ³é¢‘æŽ§ä»¶ï¼Œå¯ä»¥ç”¨æ¥æ’­æ”¾å„ç§éŸ³é¢‘æ–‡ä»¶ã€‚",
                previewSchema: {
                    type: "audio",
                    autoPlay: !1
                },
                scaffold: {
                    type: "audio",
                    autoPlay: !1,
                    src: ""
                },
                $schema: "https://isuda.baidu.com/schemas/AudioSchema.json"
            })], t)
        } (n.
    default);
        t.AudioEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ButtonGroupEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(5),
        s = a(2),
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.settingsSchema = {
                    title: "æŒ‰é’®ç»„é…ç½®",
                    controls: s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "buttons",
                            type: "combo",
                            multiple: !0,
                            addable: !1,
                            draggable: !0,
                            draggableTip: "å¯æŽ’åºã€å¯ç§»é™¤ã€å¦‚è¦ç¼–è¾‘è¯·åœ¨é¢„è§ˆåŒºé€‰ä¸­ç¼–è¾‘",
                            editable: !1,
                            visibleOn: "this.buttons && this.buttons.length",
                            controls: [{
                                type: "tpl",
                                inline: !1,
                                className: "p-t-xs",
                                tpl: '<%= data.label %><% if (data.icon) { %><i class="<%= data.icon %>"/><% }%>'
                            }]
                        },
                        {
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(r.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: t.handleAdd.bind(t)
                            },
                            "æ·»åŠ æŒ‰é’®"))
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [s.getSchemaTplByName("size"), s.getSchemaTplByName("className"), s.getSchemaTplByName("className", {
                            name: "btnClassName",
                            label: "æŒ‰é’® CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [s.getSchemaTplByName("ref"), s.getSchemaTplByName("disabled"), s.getSchemaTplByName("visible")]
                    }])
                },
                t.tipName = "æŒ‰é’®ç»„",
                t.containers = ["buttons"],
                t.containerLabels = ["æŒ‰é’®é›†åˆ"],
                t
            }
            return l.__extends(t, e),
            t.prototype.handleAdd = function() {
                this.pickChild("buttons")
            },
            t.prototype.acceptChild = function(t, a, l) {
                return !! ~ ["button", "submit", "reset"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderRenderer = function(t) {
                return t.buttons && t.buttons.length ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t.prototype.getContextMenus = function() {
                var t = e.prototype.getContextMenus.call(this);
                return t.push({
                    label: "æ·»åŠ æŒ‰é’®",
                    onSelect: this.handleAdd.bind(this)
                }),
                t
            },
            t = l.__decorate([n.Editor("button-group", {
                name: "æŒ‰é’®ç»„",
                tags: ["æŒ‰é’®"],
                icon: "fa fa-stop-circle",
                type: "button-group",
                description: "ç”¨æ¥å±•ç¤ºå¤šä¸ªæŒ‰é’®ï¼Œè§†è§‰ä¸Šä¼šä½œä¸ºä¸€ä¸ªæ•´ä½“å‘ˆçŽ°ã€‚",
                previewSchema: {
                    type: "button-group",
                    buttons: [{
                        type: "button",
                        label: "æŒ‰é’®1",
                        level: "info"
                    },
                    {
                        type: "button",
                        label: "æŒ‰é’®2",
                        level: "success"
                    }]
                },
                scaffold: {
                    type: "button-group",
                    buttons: [{
                        type: "button",
                        label: "æŒ‰é’®1",
                        actionType: "dialog",
                        dialog: {
                            title: "ç³»ç»Ÿæç¤º",
                            body: "å¯¹ä½ ç‚¹å‡»äº†"
                        }
                    },
                    {
                        type: "button",
                        label: "æŒ‰é’®2",
                        actionType: "dialog",
                        dialog: {
                            title: "ç³»ç»Ÿæç¤º",
                            body: "å¯¹ä½ ç‚¹å‡»äº†"
                        }
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/ButtonGroupSchema.json"
            })], t)
        } (o.
    default);
        t.ButtonGroupEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ButtonGroupEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(29),
        o = a(2),
        r = a(3),
        s = a(5),
        p = {
            type: "button-toolbar",
            buttons: [{
                type: "button",
                label: "æŒ‰é’®1",
                actionType: "dialog",
                dialog: {
                    title: "ç³»ç»Ÿæç¤º",
                    body: "å¯¹ä½ ç‚¹å‡»äº†"
                }
            },
            {
                type: "button",
                label: "æŒ‰é’®2",
                actionType: "dialog",
                dialog: {
                    title: "ç³»ç»Ÿæç¤º",
                    body: "å¯¹ä½ ç‚¹å‡»äº†"
                }
            }]
        },
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.settingsSchema = {
                    title: "å·¥å…·æ é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "buttons",
                            type: "combo",
                            label: "æŒ‰é’®ç®¡ç†",
                            multiple: !0,
                            addable: !1,
                            draggable: !0,
                            draggableTip: "å¯æŽ’åºã€å¯ç§»é™¤ã€å¦‚è¦ç¼–è¾‘è¯·åœ¨é¢„è§ˆåŒºé€‰ä¸­ç¼–è¾‘",
                            editable: !1,
                            visibleOn: "this.buttons && this.buttons.length",
                            controls: [{
                                type: "tpl",
                                inline: !1,
                                className: "p-t-xs",
                                tpl: '<span class="label label-default"><% if (data.type === "button-group") { %> æŒ‰é’®ç»„ <% } else { %><%= data.label %><% if (data.icon) { %><i class="<%= data.icon %>"/><% }%><% } %></span>'
                            }]
                        },
                        {
                            children: r.createElement("div", null, r.createElement(s.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: t.handleAdd.bind(t)
                            },
                            "æ·»åŠ æŒ‰é’®"))
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("button-toolbar", {
                name: "æŒ‰é’®å·¥å…·æ ",
                type: "button-toolbar",
                tags: ["æŒ‰é’®"],
                icon: "fa fa-stop-circle",
                description: "å¯ä»¥ç”¨æ¥æ”¾ç½®å¤šä¸ªæŒ‰é’®æˆ–è€…æŒ‰é’®ç»„ï¼ŒæŒ‰é’®ä¹‹é—´ä¼šå­˜åœ¨ä¸€å®šçš„é—´éš”",
                previewSchema: {
                    type: "button-toolbar",
                    className: "text-left",
                    buttons: [{
                        label: "æŒ‰é’®A",
                        type: "button"
                    },
                    {
                        type: "button-group",
                        buttons: [{
                            label: "æŒ‰é’®B",
                            type: "button"
                        },
                        {
                            label: "æŒ‰é’®C",
                            type: "button"
                        }]
                    }]
                },
                scaffold: p
            })], t)
        } (n.ButtonToolbarControlEditor);
        t.ButtonGroupEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CardItemEditor = t.CardEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(5),
        s = a(2),
        p = a(4),
        c = l.__importDefault(a(10)),
        d = a(12),
        m = a(33),
        u = a(6),
        h = a(17),
        b = l.__importDefault(a(9)),
        f = l.__importDefault(a(11)),
        y = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Card",
                t.containers = ["body", "actions"],
                t.regions2path = {
                    body: "field"
                },
                t.childrenSortList = {
                    body: ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"]
                },
                t.settingsSchema = {
                    title: "å¡ç‰‡é…ç½®",
                    controls: [s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: u([{
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                className: "m-b-sm",
                                level: "info",
                                block: !0,
                                onClick: function() {
                                    return t.pickChild("actions")
                                }
                            },
                            "æ–°å¢žæŒ‰é’®")
                        },
                        {
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(r.Button, {
                                block: !0,
                                level: "primary",
                                size: "sm",
                                onClick: function() {
                                    return t.pickChild("body")
                                }
                            },
                            "æ–°å¢žå†…å®¹"))
                        },
                        {
                            type: "divider"
                        },
                        {
                            name: "header.title",
                            type: "text",
                            label: "æ ‡é¢˜",
                            description: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š <code>\\${xxx}</code>"
                        },
                        {
                            name: "header.subTitle",
                            type: "text",
                            label: "å‰¯æ ‡é¢˜",
                            description: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š <code>\\${xxx}</code>"
                        },
                        {
                            name: "header.avatar",
                            type: "text",
                            label: "å›¾ç‰‡åœ°å€",
                            description: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š <code>\\${xxx}</code>"
                        },
                        {
                            name: "header.desc",
                            type: "textarea",
                            label: "æè¿°",
                            description: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š <code>\\${xxx}</code>"
                        },
                        {
                            name: "header.highlight",
                            type: "text",
                            label: "æ˜¯å¦é«˜äº®è¡¨è¾¾å¼",
                            description: "å¦‚ï¼š <code>this.isOwner</code>"
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            type: "range",
                            name: "actionsCount",
                            pipeIn: s.defaultValue(4),
                            min: 1,
                            max: 10,
                            step: 1,
                            label: "å¡ç‰‡ä¸€è¡Œæœ€å¤šèƒ½æ”¾æŒ‰é’®ä¸ªæ•°"
                        },
                        s.getSchemaTplByName("className", {
                            name: "titleClassName",
                            label: "æ ‡é¢˜ CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "highlightClassName",
                            label: "é«˜äº® CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "subTitleClassName",
                            label: "å‰¯æ ‡é¢˜ CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "descClassName",
                            label: "æè¿° CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "avatarClassName",
                            label: "å›¾ç‰‡å¤–å±‚ CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "imageClassName",
                            label: "å›¾ç‰‡ CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹åŒº CSS ç±»å"
                        }), s.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [s.getSchemaTplByName("ref"), s.getSchemaTplByName("visible")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                ("body" === a ? !~ ["form", "button", "submit", "reset", "table", "crud", "divider", "page", "wizard"].indexOf(t) : !!~ ["button"].indexOf(t)) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.getContextMenus = function() {
                var t = this,
                a = e.prototype.getContextMenus.call(this);
                return a.push({
                    label: "æ·»åŠ æŒ‰é’®",
                    onSelect: function() {
                        return t.pickChild("actions")
                    }
                }),
                a
            },
            t.prototype.onAddNode = function(e, t) {
                if ("body" === e) return l.__assign(l.__assign({},
                t), {
                    label: "å­—æ®µè¯´æ˜Ž"
                })
            },
            t = l.__decorate([n.Editor("card", {
                name: "å¡ç‰‡",
                type: "card",
                description: "å±•ç¤ºå•ä¸ªå¡ç‰‡ã€‚",
                previewSchema: {
                    type: "card",
                    className: "text-left m-b-none",
                    header: {
                        title: "æ ‡é¢˜",
                        subTitle: "å‰¯æ ‡é¢˜"
                    },
                    body: "å¡ç‰‡å†…å®¹",
                    actions: [{
                        label: "è¯¦æƒ…",
                        type: "button"
                    }]
                },
                scaffold: {
                    type: "card",
                    header: {
                        title: "æ ‡é¢˜",
                        subTitle: "å‰¯æ ‡é¢˜",
                        avatar: "https://fex.bdstatic.com/n/static/amis/renderers/crud/field/placeholder_cfad9b1.png"
                    },
                    body: "å†…å®¹",
                    actions: [{
                        type: "button",
                        label: "æŒ‰é’®",
                        actionType: "dialog",
                        dialog: {
                            title: "æ ‡é¢˜",
                            body: "å†…å®¹"
                        }
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/CardSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || this.props.children) return this.super.apply(this, e);
                    var l = this.super.apply(this, e),
                    n = this.props.regionRef;
                    return i.
                default.createElement(f.
                default, {
                        key: "body",
                        ref: function(e) {
                            return n("body", e)
                        },
                        name: "body",
                        label: "å†…å®¹",
                        hostId: a.props.$$id
                    },
                    l)
                }
            })], t)
        } (b.
    default);
        t.CardEditor = y;
        var g = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                return n.tipName = "Field",
                n.replaceable = !1,
                n.settingsSchema = {
                    title: "å­—æ®µé…ç½®",
                    controls: [s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "tpl",
                            className: "text-info text-sm",
                            tpl: "<p>æ³¨æ„ï¼šå½“å‰é¢æ¿åªèƒ½é…ç½®å½“å‰å­—æ®µç›¸å…³çš„ä¿¡æ¯ï¼Œå¦‚éœ€é…ç½®å…·ä½“çš„å†…å®¹ï¼Œè¯·åœ¨é¢„è§ˆåŒºæˆ–è€…åœ¨å¯¼èˆªä¸­é€‰æ‹©å­å†…å®¹å†è¿›è¡Œç¼–è¾‘ã€‚</p>"
                        },
                        {
                            name: "label",
                            label: "åç§°ï¼ˆLabelï¼‰",
                            type: "text"
                        },
                        {
                            name: "name",
                            type: "text",
                            label: "ç»‘å®šå­—æ®µå"
                        },
                        {
                            name: "value",
                            label: "è°ƒè¯•å€¼",
                            type: "text",
                            pipeOut: s.valuePipeOut
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            label: "å ä½ç¬¦",
                            pipeIn: s.defaultValue("-"),
                            description: "å½“æ²¡æœ‰å€¼æ—¶ç”¨è¿™ä¸ªæ¥æ›¿ä»£å±•ç¤º"
                        }]
                    },
                    {
                        title: "é«˜çº§",
                        controls: [{
                            name: "quickEdit",
                            label: "å¯ç”¨å¿«é€Ÿç¼–è¾‘",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.mode",
                            type: "button-group",
                            value: "popOver",
                            label: "å¿«é€Ÿç¼–è¾‘æ¨¡å¼",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                label: "ä¸‹æ‹‰",
                                value: "popOver"
                            },
                            {
                                label: "å†…åµŒ",
                                value: "inline"
                            }]
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.saveImmediately",
                            label: "æ˜¯å¦ç«‹å³ä¿å­˜",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽä¿®æ”¹å³æäº¤ï¼Œè€Œä¸æ˜¯æ ‡è®°ä¿®æ”¹æ‰¹é‡æäº¤ã€‚",
                            descriptionClassName: "help-block m-b-none",
                            pipeIn: function(e) {
                                return !! e
                            }
                        },
                        s.getSchemaTplByName("api", {
                            label: "ç«‹å³ä¿å­˜æŽ¥å£",
                            description: "æ˜¯å¦å•ç‹¬ç»™ç«‹å³ä¿å­˜é…ç½®æŽ¥å£ï¼Œå¦‚æžœä¸é…ç½®ï¼Œåˆ™é»˜è®¤ä½¿ç”¨quickSaveItemApiã€‚",
                            name: "quickEdit.saveImmediately.api",
                            visibleOn: "quickEdit.saveImmediately"
                        }), {
                            visibleOn: "data.quickEdit",
                            children: i.
                        default.createElement(r.Button, {
                                level: "info",
                                className: "m-b",
                                block: !0,
                                size: "sm",
                                onClick: n.handleQuickEditSetting.bind(n)
                            },
                            "é…ç½®å¿«é€Ÿç¼–è¾‘æ–¹å¼")
                        },
                        {
                            name: "popOver",
                            label: "å¯ç”¨æŸ¥çœ‹æ›´å¤šå±•ç¤º",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "popOver.mode",
                            label: "æŸ¥çœ‹æ›´å¤šå¼¹å‡ºæ¨¡å¼",
                            type: "select",
                            visibleOn: "data.popOver",
                            pipeIn: s.defaultValue("popOver"),
                            options: [{
                                label: "é»˜è®¤",
                                value: "popOver"
                            },
                            {
                                label: "å¼¹æ¡†",
                                value: "dialog"
                            },
                            {
                                label: "æŠ½å‡ºå¼å¼¹æ¡†",
                                value: "drawer"
                            }]
                        },
                        {
                            name: "popOver.position",
                            label: "æŸ¥çœ‹æ›´å¤šå¼¹å‡ºæ¨¡å¼",
                            type: "select",
                            visibleOn: '!data.popOver.mode || data.popOver.mode === "popOver"',
                            pipeIn: s.defaultValue("center"),
                            options: [{
                                label: "ç›®æ ‡ä¸­éƒ¨",
                                value: "center"
                            },
                            {
                                label: "ç›®æ ‡å·¦ä¸Šè§’",
                                value: "left-top"
                            },
                            {
                                label: "ç›®æ ‡å³ä¸Šè§’",
                                value: "right-top"
                            },
                            {
                                label: "ç›®æ ‡å·¦ä¸‹è§’",
                                value: "left-bottom"
                            },
                            {
                                label: "ç›®æ ‡å³ä¸‹è§’",
                                value: "right-bottom"
                            },
                            {
                                label: "é¡µé¢å·¦ä¸Šè§’",
                                value: "fixed-left-top"
                            },
                            {
                                label: "é¡µé¢å³ä¸Šè§’",
                                value: "fixed-right-top"
                            },
                            {
                                label: "é¡µé¢å·¦ä¸‹è§’",
                                value: "fixed-left-bottom"
                            },
                            {
                                label: "é¡µé¢å³ä¸‹è§’",
                                value: "fixed-right-bottom"
                            }]
                        },
                        {
                            visibleOn: "data.popOver",
                            children: i.
                        default.createElement(r.Button, {
                                level: "info",
                                className: "m-b",
                                block: !0,
                                onClick: n.handlePopOverSetting.bind(n)
                            },
                            "æŸ¥çœ‹æ›´å¤šå†…å®¹é…ç½®")
                        },
                        {
                            name: "copyable",
                            label: "å¯ç”¨å†…å®¹å¤åˆ¶åŠŸèƒ½",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            visibleOn: "data.copyable",
                            name: "copyable.content",
                            type: "textarea",
                            label: "å¤åˆ¶å†…å®¹æ¨¡æ¿",
                            description: "é»˜è®¤ä¸ºå½“å‰å­—æ®µå€¼ï¼Œå¯å®šåˆ¶ã€‚"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [s.getSchemaTplByName("className", {
                            name: "labelClassName",
                            label: "Label çš„ CSS ç±»å",
                            pipeIn: s.defaultValue("pull-left w-xxs text-muted")
                        }), s.getSchemaTplByName("className"), s.getSchemaTplByName("className", {
                            name: "innerClassName",
                            label: "å†…éƒ¨ CSS ç±»å"
                        })]
                    }])]
                },
                n.childrenOrder = ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"],
                n.state = l.__assign(l.__assign({},
                n.modifyProps(t, a)), {
                    value: m.mockValue(t.value, t.field.type),
                    onQuickChange: p.noop
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                p.anyChanged(["quickEdit", "popOver"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e))),
                t.value === e.value && t.field.type === e.field.type || this.setState({
                    value: m.mockValue(e.value, e.field.type)
                })
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                void 0 === t && (t = this.context);
                var a = e.quickEdit,
                l = e.popOver;
                t.editor;
                return {
                    quickEdit: a = p.JSONPipeOut(a),
                    popOver: l = p.JSONPipeOut(l)
                }
            },
            t.prototype.deleteSelf = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-field$/, ""),
                a = e.getActiveId();
                e.delete(t),
                a === t && e.unSelectEditor()
            },
            t.prototype.onChildSettingsGet = function(e, t) {
                return l.__assign(l.__assign({},
                t), {
                    className: t.innerClassName
                })
            },
            t.prototype.onChildSettingsSet = function(e, t, a, i) {
                return i ? l.__assign(l.__assign({},
                h(a, ["label", "name", "sortable", "quickEdit", "toggled", "copyable", "popOver", "width", "breakpoint"])), t) : l.__assign(l.__assign({},
                t), {
                    innerClassName: t.className,
                    className: a.className
                })
            },
            t.prototype.getSettingsValue = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-field$/, "");
                return l.__assign(l.__assign({},
                e.get(t)), {
                    value: this.state.value
                })
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.context.editor,
                a = this.props.$$id.replace(/\-field$/, ""),
                i = (e = l.__assign({},
                e)).value;
                delete e.value,
                this.mounted && this.setState({
                    value: i
                }),
                t.update(a, e, void 0, "form")
            },
            t.prototype.handleQuickEditSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-field$/, ""),
                a = p.JSONPipeOut(e.get(t).quickEdit),
                n = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    type: "text",
                    name: this.props.name
                },
                a),
                e.openDialog("é…ç½®å¿«é€Ÿç¼–è¾‘ç±»åž‹", {
                    mode: "normal",
                    type: "form",
                    data: {
                        quickEdit: a
                    },
                    controls: [{
                        name: "quickEdit",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "/page/body/form/0/control",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        quickEdit: d(p.JSONPipeIn(a.quickEdit), ["$$replaceable"])
                    })
                }), "xl")
            },
            t.prototype.handlePopOverSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-column$/, ""),
                a = p.JSONPipeOut(e.get(t).popOver),
                n = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    title: "æŸ¥çœ‹è¯¦æƒ…",
                    body: "å†…å®¹è¯¦æƒ…"
                },
                a),
                e.openDialog("é…ç½®æŸ¥çœ‹æ›´å¤šå±•ç¤ºå†…å®¹", {
                    mode: "normal",
                    type: "form",
                    data: {
                        popOver: a
                    },
                    controls: [{
                        name: "popOver",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(c.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "panel",
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        popOver: d(p.JSONPipeIn(a.popOver), ["$$replaceable", "type"])
                    })
                }), "xl")
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !~ ["form", "button", "submit", "reset", "table", "crud", "divider", "page", "wizard"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    $$movable: !1
                }))
            },
            t = l.__decorate([n.Editor("card-item"), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (o.
    default);
        t.CardItemEditor = g
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TableCellEditor = void 0;
        var l = a(0),
        i = a(2),
        n = a(3),
        o = a(5),
        r = a(12),
        s = a(17),
        p = l.__importDefault(a(10)),
        c = l.__importDefault(a(9)),
        d = a(4),
        m = function(e) {
            function t(t, a) {
                var l = e.call(this, t, a) || this;
                return l.tipName = "ç¬¬" + (l.props.index - 2) + "åˆ—",
                l.replaceable = !1,
                l.codeEditable = !1,
                l.draggable = !1,
                l.settingsSchema = {
                    title: "åˆ—é…ç½®",
                    controls: [i.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "label",
                            label: "åˆ—åç§°",
                            type: "text"
                        },
                        {
                            name: "name",
                            type: "text",
                            label: "ç»‘å®šå­—æ®µå"
                        },
                        {
                            children: n.createElement("div", null, n.createElement(o.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: l.handleEditDetail.bind(l)
                            },
                            "é…ç½®åˆ—è¯¦æƒ…"))
                        },
                        {
                            name: "remark",
                            label: "æç¤º",
                            type: "text",
                            description: "æ˜¾ç¤ºä¸€ä¸ªæç¤ºå›¾æ ‡ï¼Œé¼ æ ‡æ”¾ä¸ŠåŽ»ä¼šæç¤ºè¯¥å†…å®¹ã€‚"
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            label: "å ä½ç¬¦",
                            value: "-",
                            description: "å½“æ²¡æœ‰å€¼æ—¶ç”¨è¿™ä¸ªæ¥æ›¿ä»£å±•ç¤º"
                        },
                        {
                            name: "sortable",
                            type: "switch",
                            label: "æ˜¯å¦å¯æŽ’åº",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽå¯ä»¥æ ¹æ®å½“å‰åˆ—æŽ’åº(åŽç«¯æŽ’åº)ã€‚"
                        }]
                    },
                    {
                        title: "é«˜çº§",
                        controls: [{
                            name: "groupName",
                            label: "åˆ—åˆ†ç»„åç§°",
                            type: "text",
                            description: 'å½“å¤šåˆ—çš„åˆ†ç»„åç§°è®¾ç½®ä¸€è‡´æ—¶ï¼Œè¡¨æ ¼ä¼šåœ¨æ˜¾ç¤ºè¡¨å¤´çš„ä¸Šå±‚æ˜¾ç¤ºè¶…çº§è¡¨å¤´ï¼Œ<a href="https://baidu.github.io/amis/crud/header-group" target="_blank">ç¤ºä¾‹</a>'
                        },
                        {
                            name: "quickEdit",
                            label: "å¯ç”¨å¿«é€Ÿç¼–è¾‘",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.mode",
                            type: "button-group",
                            value: "popOver",
                            label: "å¿«é€Ÿç¼–è¾‘æ¨¡å¼",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                label: "ä¸‹æ‹‰",
                                value: "popOver"
                            },
                            {
                                label: "å†…åµŒ",
                                value: "inline"
                            }]
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.saveImmediately",
                            label: "æ˜¯å¦ç«‹å³ä¿å­˜",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽä¿®æ”¹å³æäº¤ï¼Œè€Œä¸æ˜¯æ ‡è®°ä¿®æ”¹æ‰¹é‡æäº¤ã€‚",
                            descriptionClassName: "help-block m-b-none",
                            pipeIn: function(e) {
                                return !! e
                            }
                        },
                        i.getSchemaTplByName("api", {
                            label: "ç«‹å³ä¿å­˜æŽ¥å£",
                            description: "æ˜¯å¦å•ç‹¬ç»™ç«‹å³ä¿å­˜é…ç½®æŽ¥å£ï¼Œå¦‚æžœä¸é…ç½®ï¼Œåˆ™é»˜è®¤ä½¿ç”¨quickSaveItemApiã€‚",
                            name: "quickEdit.saveImmediately.api",
                            visibleOn: "this.quickEdit && this.quickEdit.saveImmediately"
                        }), {
                            visibleOn: "data.quickEdit",
                            children: n.createElement(o.Button, {
                                level: "info",
                                className: "m-b",
                                size: "sm",
                                block: !0,
                                onClick: l.handleQuickEditSetting.bind(l)
                            },
                            "é…ç½®å¿«é€Ÿç¼–è¾‘æ–¹å¼")
                        },
                        {
                            name: "popOver",
                            label: "å¯ç”¨æŸ¥çœ‹æ›´å¤šå±•ç¤º",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "popOver.mode",
                            label: "æŸ¥çœ‹æ›´å¤šå¼¹å‡ºæ¨¡å¼",
                            type: "select",
                            visibleOn: "data.popOver",
                            pipeIn: i.defaultValue("popOver"),
                            options: [{
                                label: "é»˜è®¤",
                                value: "popOver"
                            },
                            {
                                label: "å¼¹æ¡†",
                                value: "dialog"
                            },
                            {
                                label: "æŠ½å‡ºå¼å¼¹æ¡†",
                                value: "drawer"
                            }]
                        },
                        {
                            name: "popOver.position",
                            label: "æŸ¥çœ‹æ›´å¤šå¼¹å‡ºæ¨¡å¼",
                            type: "select",
                            visibleOn: '!data.popOver || !data.popOver.mode || data.popOver.mode === "popOver"',
                            pipeIn: i.defaultValue("center"),
                            options: [{
                                label: "ç›®æ ‡ä¸­éƒ¨",
                                value: "center"
                            },
                            {
                                label: "ç›®æ ‡å·¦ä¸Šè§’",
                                value: "left-top"
                            },
                            {
                                label: "ç›®æ ‡å³ä¸Šè§’",
                                value: "right-top"
                            },
                            {
                                label: "ç›®æ ‡å·¦ä¸‹è§’",
                                value: "left-bottom"
                            },
                            {
                                label: "ç›®æ ‡å³ä¸‹è§’",
                                value: "right-bottom"
                            },
                            {
                                label: "é¡µé¢å·¦ä¸Šè§’",
                                value: "fixed-left-top"
                            },
                            {
                                label: "é¡µé¢å³ä¸Šè§’",
                                value: "fixed-right-top"
                            },
                            {
                                label: "é¡µé¢å·¦ä¸‹è§’",
                                value: "fixed-left-bottom"
                            },
                            {
                                label: "é¡µé¢å³ä¸‹è§’",
                                value: "fixed-right-bottom"
                            }]
                        },
                        {
                            visibleOn: "data.popOver",
                            children: n.createElement(o.Button, {
                                level: "info",
                                className: "m-b",
                                block: !0,
                                onClick: l.handlePopOverSetting.bind(l)
                            },
                            "æŸ¥çœ‹æ›´å¤šå†…å®¹é…ç½®")
                        },
                        {
                            name: "copyable",
                            label: "å¯ç”¨å†…å®¹å¤åˆ¶åŠŸèƒ½",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            visibleOn: "data.copyable",
                            name: "copyable.content",
                            type: "textarea",
                            label: "å¤åˆ¶å†…å®¹æ¨¡æ¿",
                            description: "é»˜è®¤ä¸ºå½“å‰å­—æ®µå€¼ï¼Œå¯å®šåˆ¶ã€‚"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "fixed",
                            type: "button-group",
                            label: "å›ºå®šä½ç½®",
                            pipeIn: i.defaultValue(""),
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                value: "",
                                label: "ä¸å›ºå®š"
                            },
                            {
                                value: "left",
                                label: "å·¦ä¾§"
                            },
                            {
                                value: "right",
                                label: "å³ä¾§"
                            }]
                        },
                        {
                            name: "toggled",
                            type: "switch",
                            label: "é»˜è®¤å±•ç¤º",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: i.defaultValue(!0)
                        },
                        {
                            name: "breakpoint",
                            type: "button-group",
                            label: "è§¦å‘åº•éƒ¨æ˜¾ç¤ºæ¡ä»¶",
                            visibleOn: "data.tableFootableEnabled",
                            size: "xs",
                            multiple: !0,
                            options: [{
                                label: "æ€»æ˜¯",
                                value: "*"
                            },
                            {
                                label: "æ‰‹æœºç«¯",
                                value: "xs"
                            },
                            {
                                label: "å¹³æ¿",
                                value: "sm"
                            },
                            {
                                label: "PCå°å±",
                                value: "md"
                            },
                            {
                                label: "PCå¤§å±",
                                value: "lg"
                            }],
                            pipeIn: function(e) {
                                return e ? "string" == typeof e ? e: "*": ""
                            },
                            pipeOut: function(e) {
                                return "string" == typeof e && ~e.indexOf("*") && /xs|sm|md|lg/.test(e) ? e.replace(/\*\s*,\s*|\s*,\s*\*/g, "") : e
                            }
                        },
                        {
                            type: "switch",
                            name: "className",
                            label: "å†…å®¹å¼ºåˆ¶æ¢è¡Œ",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: function(e) {
                                return "string" == typeof e && /\word\-break\b/.test(e)
                            },
                            pipeOut: function(e, t) {
                                return (e ? "word-break ": "") + (t || "").replace(/\bword\-break\b/g, "").trim()
                            }
                        },
                        i.getSchemaTplByName("className"), i.getSchemaTplByName("className", {
                            name: "innerClassName",
                            label: "å†…éƒ¨ CSS ç±»å"
                        }), {
                            name: "width",
                            type: "number",
                            label: "åˆ—å®½",
                            description: "å›ºå®šåˆ—çš„å®½åº¦ï¼Œä¸æŽ¨èè®¾ç½®ã€‚"
                        }]
                    }])]
                },
                l.childrenOrder = ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"],
                a.editor.isMini || l.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®åˆ—è¯¦æƒ…",
                    placement: "bottom",
                    id: "edit-detail"
                }),
                l
            }
            return l.__extends(t, e),
            t.prototype.getContextMenus = function() {
                var t = this,
                a = e.prototype.getContextMenus.call(this);
                return this.context.editor.isMini || a.push({
                    label: "é…ç½®åˆ—è¯¦æƒ…",
                    onSelect: function() {
                        return t.handleEditDetail()
                    }
                }),
                a
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !~ ["form", "button", "submit", "reset", "table", "crud", "divider", "grid", "hbox", "page", "wizard"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.getSettingsValue = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = e.getParent(t, !0);
                return l.__assign(l.__assign({},
                e.get(t)), {
                    tableFootableEnabled: null == a ? void 0 : a.tableFootableEnabled
                })
            },
            t.prototype.onChildSettingsGet = function(e, t) {
                return l.__assign(l.__assign({},
                r(t, ["tableFootableEnabled"])), {
                    className: t.innerClassName
                })
            },
            t.prototype.onChildSettingsSet = function(e, t, a, i) {
                return i ? l.__assign(l.__assign({},
                s(a, ["label", "name", "sortable", "quickEdit", "toggled", "copyable", "popOver", "width", "breakpoint"])), t) : l.__assign(l.__assign({},
                t), {
                    innerClassName: t.className,
                    className: a.className
                })
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.context.editor,
                a = this.props.$$id.replace(/\-column$/, ""),
                i = (e = l.__assign({},
                e)).value;
                delete e.value,
                this.mounted && this.setState({
                    value: i
                }),
                t.update(a, e, void 0, "form")
            },
            t.prototype.handleToolbarAction = function(t) {
                if ("edit-detail" === t) return this.handleEditDetail();
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleQuickEditSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-column$/, ""),
                a = (this.props.schemaFilter, d.JSONPipeOut(e.get(t).quickEdit)),
                i = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    type: "text",
                    name: this.props.name
                },
                a),
                e.openDialog("é…ç½®å¿«é€Ÿç¼–è¾‘ç±»åž‹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        quickEdit: a
                    },
                    controls: [{
                        name: "quickEdit",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return n.createElement(p.
                        default, {
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "/page/body/form/0/control",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: i,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        quickEdit: r(d.JSONPipeIn(a.quickEdit), ["$$replaceable"])
                    })
                }), "xl")
            },
            t.prototype.handlePopOverSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-column$/, ""),
                a = (this.props.schemaFilter, d.JSONPipeOut(e.get(t).popOver)),
                i = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    title: "æŸ¥çœ‹è¯¦æƒ…",
                    body: "å†…å®¹è¯¦æƒ…"
                },
                a),
                e.openDialog("é…ç½®æŸ¥çœ‹æ›´å¤šå±•ç¤ºå†…å®¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        popOver: a
                    },
                    controls: [{
                        name: "popOver",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return n.createElement(p.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "panel",
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: i,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        popOver: r(d.JSONPipeIn(a.popOver), ["$$replaceable", "type"])
                    })
                }), "xl")
            },
            t.prototype.handleEditDetail = function() {
                var e = this,
                t = this.context.editor,
                a = this.props,
                i = a.store,
                r = a.$$id,
                s = {};
                i && i.rows.length && (s = i.rows[0].data);
                var c = d.JSONPipeOut(t.get(r));
                t.openDialog("é…ç½®åˆ—è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        detail: c
                    },
                    controls: [{
                        name: "detail",
                        children: function(a) {
                            var i = a.value,
                            r = a.onChange;
                            return n.createElement(p.
                        default, {
                                autoFocus: !0,
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "page/body/crud/table/0/0/field",
                                value: l.__assign({
                                    type: "plain"
                                },
                                i),
                                onChange: function(e) {
                                    return r(e)
                                },
                                previewProps: {
                                    value: o.resolveVariable(i.name, s),
                                    data: s,
                                    $$replaceable: !0,
                                    $$acceptChild: e.acceptChild.bind(e),
                                    $$childenOrder: e.childrenOrder
                                },
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(e) {
                    t.update(r, d.JSONPipeIn(e.detail))
                }), "xl")
            },
            t.prototype.renderRenderer = function(e) {
                return n.cloneElement(e.th, {
                    "data-editor-id": this.props.$$id
                })
            },
            t
        } (c.
    default);
        t.TableCellEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(106)),
        n = a(15),
        o = a(14),
        r = a(34),
        s = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e),
            t.prototype.getContextMenus = function() {
                var e = this,
                t = this.context.editorNode,
                a = this.context.editor,
                l = t.component,
                i = l.props.clipboard,
                n = [];
                return n.push({
                    label: "æ·»åŠ ä¸€åˆ—",
                    onSelect: function() {
                        return l.pickChild(e.props.name)
                    }
                }),
                n.push({
                    label: "å¿«é€Ÿç¼–è¾‘åˆ—",
                    onSelect: function() {
                        return l.handleColumnsQuickEdit()
                    }
                }),
                i && n.push({
                    label: "æ¸…ç©ºå‰ªåˆ‡æ¿",
                    onSelect: function() {
                        return a.clearClipBoard()
                    }
                }),
                n.push({
                    label: "ç²˜è´´",
                    disabled: !(i && l.acceptChild(i.type, this.props.name)),
                    onSelect: function() {
                        return l.addChild(e.props.name, i)
                    }
                }),
                n
            },
            t.prototype.handleDragOver = function(e, t) {
                var a = n.findDOMNode(this),
                l = a.querySelector("table"),
                i = a.querySelector("thead").lastChild,
                s = [];
                r(i.children, (function(e) {
                    if (e !== t && !e.matches(".region-tip") && !/Table\-checkCell/.test(e.className)) {
                        var a = e.getBoundingClientRect();
                        a.width && a.height && s.push(a)
                    }
                }));
                var p = o(s, (function(t, a, l) {
                    var i = l[a - 1];
                    return e.clientX < t.left + t.width / 2 && (!i || e.clientX > i.left + i.width / 2)
                }));
                t.classList.add("is-horizontal");
                var c = l.getBoundingClientRect();
                if (p) t.style.cssText = "height: " + c.height + "px;top: 0;left: " + (p.left - c.left) + "px;",
                this.dropPosition = s.indexOf(p);
                else {
                    var d = s[s.length - 1];
                    t.style.cssText = "height: " + c.height + "px;top: 0;left: " + (d.right - c.left - 5) + "px;",
                    this.dropPosition = s.length
                }
                a.appendChild(t)
            },
            t
        } (i.
    default);
        t.
    default = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(11)),
        n = a(34),
        o = a(14),
        r = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e),
            t.prototype.handleDragEnter = function(e, t) {
                t.innerHTML = "",
                t.classList.add("use-position")
            },
            t.prototype.handleDragLeave = function(e, t) {
                t.innerHTML = "",
                t.removeAttribute("style"),
                t.classList.remove("use-position")
            },
            t.prototype.handleDragOver = function(e, t) {
                var a = this.getWrapper(),
                l = a.querySelector("[data-editor-id]"),
                i = l ? l.parentElement: a,
                r = i.getBoundingClientRect(),
                s = [];
                n(i.children, (function(e) {
                    if (e !== t) {
                        var a = e.getBoundingClientRect();
                        a.width && a.height && s.push(a)
                    }
                }));
                var p = !1; (s.length > 1 && s[1].left > s[0].left + 10 || s.length && s[0].width / r.width < .8 && s[0].height / r.height > .8) && (p = !0),
                p ? t.classList.add("is-horizontal") : t.classList.remove("is-horizontal");
                var c = o(s, p ?
                function(t, a, l) {
                    var i = l[a - 1];
                    return e.clientX < t.left + t.width / 2 && (!i || e.clientX > i.left + i.width / 2)
                }: function(t, a, l) {
                    var i = l[a - 1];
                    return e.clientY < t.top + t.height / 2 && (!i || e.clientY > i.top + i.height / 2)
                });
                if (p) if (c) t.style.cssText = "height: " + r.height + "px;top: 0;left: " + (c.left - r.left) + "px;",
                this.dropPosition = s.indexOf(c);
                else if (s.length) {
                    var d = s[s.length - 1] || r;
                    t.style.cssText = "height: " + r.height + "px;top: 0;left: " + (d.right - r.left - 5) + "px;",
                    this.dropPosition = s.length
                } else this.dropPosition = 0,
                t.style.cssText = "height: " + r.height + "px;top: 0;left: 0px;";
                else if (c) t.style.cssText = "width: " + r.width + "px;left: 0;top: " + (c.top - r.top) + "px;",
                this.dropPosition = s.indexOf(c);
                else if (s.length) {
                    d = s[s.length - 1] || r;
                    t.style.cssText = "width: " + r.width + "px;left: 0;top: " + (d.bottom - r.top - 5) + "px;",
                    this.dropPosition = s.length
                } else this.dropPosition = 0,
                t.style.cssText = "width: " + r.width + "px;left: 0;top: 0px;";
                t.classList.add("use-position"),
                i.appendChild(t)
            },
            t
        } (i.
    default);
        t.
    default = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CardsEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(4),
        s = l.__importDefault(a(10)),
        p = a(5),
        c = function(e) {
            function t(t, a) {
                var n = e.call(this, t, a) || this;
                return n.tipName = "Cards",
                n.isCRUDBody = /\/crud\/body\/(?:cards|grid)$/.test(n.props.$path),
                n.dropable = !0,
                n.containers = ["header", "footer"],
                n.containerLabels = ["é¡¶éƒ¨", "åº•éƒ¨"],
                n.settingsSchema = {
                    title: "å¡ç‰‡åˆ—è¡¨é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [n.isCRUDBody ? {
                            type: "tpl",
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰é€‰ä¸­ä¸º CRUD ä¸­çš„ Cards éƒ¨åˆ†ï¼Œé€‰ä¸­çˆ¶çº§ CRUD è¿˜æœ‰æ›´å¤šé…ç½®ï¼Œå¯ä»¥åœ¨å¯¼èˆªä¸­åˆ‡æ¢ï¼Œä¹Ÿå¯ä»¥åœ¨ Cards å³é¡¶å·¥å…·æ ç‚¹å‡»ã€é€‰æ‹©ä¸Šå±‚ã€‘æˆ–è€…æŒ‰å¿«æ·é”®ã€shift + â†‘ã€‘åˆ‡æ¢ã€‚</p>"
                        }: null, {
                            type: "divider"
                        },
                        {
                            children: i.
                        default.createElement("div", {
                                className: "m-b"
                            },
                            i.
                        default.createElement(p.Button, {
                                level: "success",
                                size: "sm",
                                block: !0,
                                onClick: function() {
                                    return n.handleEditCard()
                                }
                            },
                            "é…ç½®å•é¡¹ä¿¡æ¯"))
                        },
                        {
                            type: "divider"
                        },
                        {
                            name: "title",
                            type: "text",
                            label: "æ ‡é¢˜"
                        },
                        n.isCRUDBody ? null: {
                            name: "source",
                            type: "text",
                            label: "æ•°æ®æº",
                            pipeIn: o.defaultValue("${items}"),
                            description: "ç»‘å®šå½“å‰çŽ¯å¢ƒå˜é‡",
                            test: !n.isCRUDBody
                        },
                        {
                            name: "placeholder",
                            value: "æš‚æ— æ•°æ®",
                            type: "text",
                            label: "æ— æ•°æ®æç¤º"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "showHeader",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦æ˜¾ç¤ºå¤´éƒ¨",
                            pipeIn: o.defaultValue(!0)
                        },
                        {
                            name: "showFooter",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦æ˜¾ç¤ºåº•éƒ¨",
                            pipeIn: o.defaultValue(!0)
                        },
                        o.getSchemaTplByName("className", {
                            label: "CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "å¤´éƒ¨ CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "footerClassName",
                            label: "åº•éƒ¨ CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "itemsClassName",
                            label: "å†…å®¹ CSS ç±»å"
                        }), o.getSchemaTplByName("className", {
                            pipeIn: o.defaultValue("Grid-col--sm6 Grid-col--md4 Grid-col--lg3"),
                            name: "itemClassName",
                            label: "å¡ç‰‡ CSS ç±»å"
                        }), {
                            name: "columnsCount",
                            type: "range",
                            visibleOn: "!this.leftFixed",
                            min: 0,
                            max: 12,
                            step: 1,
                            label: "æ¯è¡Œæ˜¾ç¤ºä¸ªæ•°",
                            description: "ä¸è®¾ç½®æ—¶ï¼Œç”±å¡ç‰‡ CSS ç±»åå†³å®š"
                        },
                        {
                            name: "masonryLayout",
                            type: "switch",
                            mode: "inline",
                            label: "å¯ç”¨ç€‘å¸ƒæµ"
                        }]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                t.$$contentMode || n.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®å¡ç‰‡ä¿¡æ¯",
                    placement: "left",
                    id: "edit-contents"
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                r.anyChanged(["header", "footer", "card"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(t, a) {
                void 0 === a && (a = this.context);
                var i = t.card;
                return t.$$contentMode || (i = r.JSONPipeOut(i)),
                l.__assign(l.__assign({},
                e.prototype.modifyProps.call(this, t, a)), {
                    card: i
                })
            },
            t.prototype.getContextMenus = function() {
                var t = this,
                a = e.prototype.getContextMenus.call(this);
                return a.push({
                    label: "é…ç½®å¡ç‰‡ä¿¡æ¯",
                    onSelect: function() {
                        return t.handleEditCard()
                    }
                }),
                a
            },
            t.prototype.handleToolbarAction = function(t) {
                if ("edit-contents" === t) return this.handleEditCard();
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleEditCard = function() {
                var e, t = this.context.editor,
                a = this.props.$$id,
                n = r.JSONPipeOut(t.get(a).card),
                o = {};
                this.ref && (e = this.ref.props.store) && e.items[0] && (o = e.items[0].data),
                t.openDialog("é…ç½®å¡ç‰‡ä¿¡æ¯", {
                    mode: "normal",
                    type: "form",
                    data: {
                        card: n
                    },
                    controls: [{
                        name: "card",
                        children: function(e) {
                            var a = e.value,
                            n = e.onChange;
                            return i.
                        default.createElement(s.
                        default, {
                                previewClassName: "wrapper-xs",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "card"
                                }),
                                onChange: function(e) {
                                    return n(e)
                                },
                                $$contentMode: !0,
                                data: o,
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(e) {
                    return t.update(a, {
                        card: r.JSONPipeIn(e.card)
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("cards", {
                name: "å¡ç‰‡åˆ—è¡¨",
                type: "cards",
                description: "åŠŸèƒ½ç±»ä¼¼äºŽè¡¨æ ¼ï¼Œä½†æ˜¯ç”¨ä¸€ä¸ªä¸ªå°å¡ç‰‡æ¥å±•ç¤ºæ•°æ®ã€‚å½“å‰ç»„ä»¶éœ€è¦é…ç½®æ•°æ®æºï¼Œä¸è‡ªå¸¦æ•°æ®æ‹‰å–ï¼Œè¯·ä¼˜å…ˆä½¿ç”¨ ã€ŒCRUDã€ ç»„ä»¶ã€‚",
                previewSchema: {
                    type: "cards",
                    className: "text-left ",
                    columnsCount: 2,
                    items: [{
                        a: 1,
                        b: 2
                    },
                    {
                        a: 3,
                        b: 4
                    }],
                    card: {
                        className: "m-b-none",
                        header: {
                            title: "æ ‡é¢˜",
                            subTitle: "å‰¯æ ‡é¢˜"
                        },
                        body: [{
                            name: "a",
                            label: "A"
                        },
                        {
                            name: "b",
                            label: "B"
                        }],
                        actions: [{
                            label: "è¯¦æƒ…",
                            type: "button"
                        }]
                    }
                },
                scaffold: {
                    type: "cards",
                    card: {
                        title: "æ ‡é¢˜"
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/CardsSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (l.__importDefault(a(9)).
    default);
        t.CardsEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CarouselEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Carousel",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "è½®æ’­å›¾é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            type: "formula",
                            name: "__mode",
                            autoSet: !1,
                            formula: 'typeof this.name === "string" ? 1 : 2'
                        },
                        {
                            label: "æ•°æ®æº",
                            name: "__mode",
                            type: "button-group",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                label: "å…³è”å­—æ®µ",
                                value: 1
                            },
                            {
                                label: "é™æ€è®¾ç½®",
                                value: 2
                            }]
                        },
                        {
                            label: "å­—æ®µå",
                            name: "name",
                            type: "text",
                            description: "è®¾ç½®å­—æ®µåï¼Œå…³è”å½“å‰æ•°æ®ä½œç”¨åŸŸä¸­çš„æ•°æ®ã€‚",
                            visibleOn: "this.__mode == 1"
                        },
                        {
                            type: "combo",
                            name: "options",
                            visibleOn: "this.__mode == 2",
                            label: "è½®æ’­é€‰é¡¹å†…å®¹",
                            multiple: !0,
                            multiLine: !0,
                            addable: !0,
                            removable: !0,
                            controls: [{
                                type: "group",
                                controls: [{
                                    type: "text",
                                    label: "å†…å®¹",
                                    name: "content",
                                    size: "full"
                                },
                                {
                                    type: "select",
                                    label: "ç±»åž‹",
                                    name: "type",
                                    options: [{
                                        label: "html",
                                        value: "html"
                                    },
                                    {
                                        label: "image",
                                        value: "image"
                                    }],
                                    value: "image"
                                }]
                            },
                            {
                                type: "group",
                                controls: [{
                                    type: "text",
                                    label: "å›¾ç‰‡æ ‡é¢˜",
                                    name: "title",
                                    visibleOn: 'this.type == "image"'
                                },
                                {
                                    type: "text",
                                    label: "å›¾ç‰‡æ ‡é¢˜ç±»å",
                                    name: "titleClassName",
                                    visibleOn: 'this.type == "image"'
                                }]
                            },
                            {
                                type: "group",
                                controls: [{
                                    type: "text",
                                    label: "å›¾ç‰‡æè¿°",
                                    name: "description",
                                    visibleOn: 'this.type == "image"'
                                },
                                {
                                    type: "text",
                                    label: "å›¾ç‰‡æè¿°ç±»å",
                                    name: "descriptionClassName",
                                    visibleOn: 'this.type == "image"'
                                }]
                            }],
                            pipeIn: function(e) {
                                return Array.isArray(e) && e.length ? e.map((function(e) {
                                    return e.html ? {
                                        type: "html",
                                        content: e.html
                                    }: {
                                        type: "image",
                                        content: e.image,
                                        title: e.title,
                                        titleClassName: e.titleClassName,
                                        description: e.description,
                                        descriptionClassName: e.descriptionClassName
                                    }
                                })) : []
                            },
                            pipeOut: function(e, t, a) {
                                return Array.isArray(e) && e.length ? e.map((function(e) {
                                    return "html" === e.type ? {
                                        html: e.content
                                    }: {
                                        image: e.content,
                                        title: e.title,
                                        titleClassName: e.titleClassName,
                                        description: e.description,
                                        descriptionClassName: e.descriptionClassName
                                    }
                                })) : []
                            }
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "auto",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "è‡ªåŠ¨è½®æ’­"
                        },
                        {
                            name: "interval",
                            type: "range",
                            label: "åŠ¨ç”»é—´éš”",
                            min: 1,
                            max: 10,
                            step: 1,
                            value: 3e3,
                            unit: "ms",
                            pipeIn: function(e) {
                                return e / 1e3
                            },
                            pipeOut: function(e, t, a) {
                                return 1e3 * e
                            }
                        },
                        {
                            name: "duration",
                            type: "range",
                            label: "åŠ¨ç”»æ—¶é•¿",
                            min: 100,
                            max: 1e3,
                            step: 10,
                            value: 500,
                            unit: "ms"
                        },
                        {
                            name: "animation",
                            label: "åŠ¨ç”»æ•ˆæžœ",
                            type: "button-group",
                            mode: "inline",
                            className: "w-full",
                            size: "sm",
                            value: "fade",
                            options: [{
                                label: "fade",
                                value: "fade"
                            },
                            {
                                label: "slide",
                                value: "slide"
                            }]
                        },
                        {
                            name: "controlsTheme",
                            label: "æŽ§åˆ¶æŒ‰é’®ä¸»é¢˜",
                            type: "button-group",
                            size: "sm",
                            value: "light",
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                label: "light",
                                value: "light"
                            },
                            {
                                label: "dark",
                                value: "dark"
                            }]
                        },
                        {
                            name: "controls",
                            label: "æŽ§åˆ¶æ˜¾ç¤º",
                            type: "button-group",
                            size: "sm",
                            mode: "inline",
                            className: "w-full",
                            value: "dots,arrows",
                            multiple: !0,
                            options: [{
                                label: "åº•éƒ¨åœ†ç‚¹",
                                value: "dots"
                            },
                            {
                                label: "å·¦å³ç®­å¤´",
                                value: "arrows"
                            }]
                        },
                        {
                            name: "width",
                            type: "text",
                            label: "å®½åº¦",
                            validations: "isNumeric",
                            addOn: {
                                type: "button",
                                label: "px"
                            }
                        },
                        {
                            name: "height",
                            type: "text",
                            label: "é«˜åº¦",
                            validations: "isNumeric",
                            addOn: {
                                type: "button",
                                label: "px"
                            }
                        },
                        o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("carousel", {
                name: "è½®æ’­å›¾",
                type: "carousel",
                description: "ç”¨æ¥æ¸²æŸ“è½®æ’­å›¾ï¼Œå¯ä»¥é…ç½®æ¯ä¸€é¡µçš„å†…å®¹ï¼ˆä¸åªæ˜¯å›¾ç‰‡ï¼‰ï¼Œå¯ä»¥é…ç½®è¿‡æ¸¡åŠ¨ç”»ã€‚",
                previewSchema: {
                    type: "carousel",
                    className: "text-left",
                    options: [{
                        image: "https://internal-amis-res.cdn.bcebos.com/images/2019-12/1577157239810/da6376bf988c.png"
                    },
                    {
                        html: '<div style="width: 100%; height: 300px; background: #e3e3e3; text-align: center; line-height: 300px;">carousel data</div>'
                    },
                    {
                        image: "https://internal-amis-res.cdn.bcebos.com/images/2019-12/1577157239810/da6376bf988c.png"
                    }]
                },
                scaffold: {
                    type: "carousel",
                    options: [{
                        image: "https://internal-amis-res.cdn.bcebos.com/images/2019-12/1577157239810/da6376bf988c.png"
                    },
                    {
                        html: '<div style="width: 100%; height: 300px; background: #e3e3e3; text-align: center; line-height: 300px;">carousel data</div>'
                    },
                    {
                        image: "https://internal-amis-res.cdn.bcebos.com/images/2019-12/1577157239810/da6376bf988c.png"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/CarouselSchema.json"
            })], t)
        } (n.
    default);
        t.CarouselEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ChartEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = a(5),
        s = a(3),
        p = l.__importDefault(a(10)),
        c = a(12),
        d = a(4),
        m = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Chart",
                t.settingsSchema = {
                    title: "å›¾è¡¨é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "formula",
                            name: "_mode",
                            formula: 'typeof this.config === "undefined" ? "2" : "1"'
                        },
                        {
                            name: "_mode",
                            type: "button-group",
                            label: "æ•°æ®è®¾ç½®æ–¹å¼",
                            size: "xs",
                            options: [{
                                label: "é™æ€",
                                value: "1"
                            },
                            {
                                label: "æŽ¥å£èŽ·å–",
                                value: "2"
                            }]
                        },
                        {
                            name: "config",
                            visibleOn: "this._mode != 2",
                            type: "json-editor",
                            label: "Echarts é™æ€é…ç½®",
                            size: "lg",
                            pipeIn: function(e) {
                                return e ? JSON.stringify(e, null, 2) : ""
                            },
                            pipeOut: function(e) {
                                try {
                                    return e ? JSON.parse(e) : null
                                } catch(e) {}
                                return null
                            }
                        },
                        o.getSchemaTplByName("api", {
                            visibleOn: "this._mode == 2",
                            label: "èŽ·å–é…ç½®æŽ¥å£",
                            description: "é€šè¿‡æ­¤é…ç½®å¯ä»¥èŽ·å–åŠ¨æ€é…ç½®"
                        }), {
                            label: "åˆå§‹æ˜¯å¦æ‹‰å–",
                            type: "switch",
                            name: "initFetch",
                            visibleOn: "data.api",
                            pipeIn: o.defaultValue(!0),
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "interval",
                            label: "å®šæ—¶åˆ·æ–°é—´éš”",
                            type: "number",
                            step: 500,
                            visibleOn: "this._mode == 2 && data.api",
                            description: "è®¾ç½®åŽå°†è‡ªåŠ¨å®šæ—¶åˆ·æ–°ï¼Œæœ€å°3000, å•ä½ ms"
                        },
                        {
                            name: "dataFilter",
                            type: "js-editor",
                            label: "æ•°æ®åŠ å·¥",
                            size: "lg",
                            description: "\n            å¦‚æžœåŽç«¯æ²¡æœ‰ç›´æŽ¥è¿”å›ž Echart é…ç½®ï¼Œå¯ä»¥è‡ªå·±å†™ä¸€æ®µå‡½æ•°æ¥åŒ…è£…ã€‚\n\n            <p>ç­¾åï¼š(config, echarts) => config</p>\n\n            <p>å‚æ•°è¯´æ˜Ž</p>\n            <ul>\n            <li><code>config</code> åŽŸå§‹æ•°æ®</li>\n            <li><code>echarts</code> echarts å¯¹è±¡</li>\n            </ul>\n\n            <p>ç¤ºä¾‹</p>\n            <pre>debugger; // å¯ä»¥æµè§ˆå™¨ä¸­æ–­ç‚¹è°ƒè¯•\n\n// æŸ¥çœ‹åŽŸå§‹æ•°æ®\nconsole.log(config)\n\n// è¿”å›žæ–°çš„ç»“æžœ \nreturn {}</pre>\n            "
                        },
                        {
                            label: "Chart é…ç½®å®Œå…¨æ›¿æ¢ï¼Ÿ",
                            labelRemark: {
                                trigger: "click",
                                className: "m-l-xs",
                                rootClose: !0,
                                content: "é»˜è®¤ä¸ºè¿½åŠ æ¨¡å¼ï¼Œæ–°çš„é…ç½®ä¼šè·Ÿæ—§çš„é…ç½®åˆå¹¶ï¼Œå¦‚æžœå‹¾é€‰å°†ç›´æŽ¥å®Œå…¨è¦†ç›–ã€‚",
                                placement: "right"
                            },
                            name: "replaceChartOption",
                            type: "switch",
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "clickAction",
                            children: function(e) {
                                var a = e.onChange,
                                l = e.value;
                                return s.createElement("div", {
                                    className: "m-b"
                                },
                                s.createElement(r.Button, {
                                    size: "sm",
                                    level: l ? "danger": "info",
                                    onClick: t.handleEditDrillDown.bind(t)
                                },
                                "é…ç½® DrillDown"), l ? s.createElement(r.Button, {
                                    size: "sm",
                                    level: "link",
                                    className: "m-l",
                                    onClick: function() {
                                        return a("")
                                    }
                                },
                                "åˆ é™¤ DrillDown") : null)
                            }
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("name"), o.getSchemaTplByName("visible")]
                    }])
                },
                t.state = {
                    onAction: t.handleChildAction.bind(t)
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.handleChildAction = function(e, t, a) {
                this.handleEditDrillDown(e, a)
            },
            t.prototype.handleEditDrillDown = function(e, t) {
                void 0 === t && (t = {});
                var a = this.context.editor,
                i = this.props.$$id,
                n = d.JSONPipeOut(a.get(i)),
                o = n.clickAction && n.clickAction.dialog || {
                    title: "æ ‡é¢˜",
                    body: ["<p>å†…å®¹ <code>${value|json}</code></p>"]
                };
                a.openDialog("é…ç½® DrillDown è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        dialog: o
                    },
                    controls: [{
                        name: "dialog",
                        children: function(e) {
                            var i = e.value,
                            n = e.onChange;
                            return s.createElement(p.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                i), {
                                    type: "dialog"
                                }),
                                onChange: n,
                                data: t,
                                schemaFilter: a.schemaFilter,
                                theme: a.theme
                            })
                        }
                    }]
                },
                (function(e) {
                    return a.update(i, {
                        clickAction: {
                            actionType: "dialog",
                            dialog: c(d.JSONPipeIn(e.dialog), ["$$edittingDialog", "type"])
                        }
                    })
                }), "xl")
            },
            t = l.__decorate([i.Editor("chart", {
                name: "å›¾è¡¨",
                type: "chart",
                description: "ç”¨æ¥æ¸²æŸ“å›¾è¡¨ï¼ŒåŸºäºŽ echarts å›¾è¡¨åº“ï¼Œç†è®ºä¸Š echarts æ‰€æœ‰å›¾è¡¨ç±»åž‹éƒ½æ”¯æŒã€‚",
                previewSchema: {
                    type: "chart",
                    config: {
                        xAxis: {
                            type: "category",
                            data: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
                        },
                        yAxis: {
                            type: "value"
                        },
                        series: [{
                            data: [820, 932, 901, 934, 1290, 1330, 1320],
                            type: "line"
                        }]
                    }
                },
                icon: "fa fa-bar-chart",
                scaffold: {
                    type: "chart",
                    config: {
                        xAxis: {
                            type: "category",
                            data: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
                        },
                        yAxis: {
                            type: "value"
                        },
                        series: [{
                            data: [820, 932, 901, 934, 1290, 1330, 1320],
                            type: "line"
                        }]
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/ChartSchema.json"
            })], t)
        } (n.
    default);
        t.ChartEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CollapseEditor = void 0;
        var l = a(0),
        i = a(1),
        n = a(2),
        o = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Collapse",
                t.containers = ["body"],
                t.containerLabels = ["å†…å®¹åŒº"],
                t.dropable = !0,
                t.settingsSchema = {
                    title: "æŠ˜å å™¨é…ç½®",
                    controls: n.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "title",
                            label: "æ ‡é¢˜",
                            type: "text",
                            required: !0
                        },
                        {
                            name: "collapsable",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "æ˜¯å¦å¯æŠ˜å ",
                            pipeIn: n.defaultValue(!0)
                        },
                        {
                            name: "collapsed",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            label: "é»˜è®¤æŠ˜å ï¼Ÿ"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [n.getSchemaTplByName("className", {
                            pipeIn: n.defaultValue("bg-white wrapper")
                        }), n.getSchemaTplByName("className", {
                            name: "headingClassName",
                            label: "æ ‡é¢˜ CSS ç±»å",
                            pipeIn: n.defaultValue("font-thin b-b b-light text-lg p-b-xs")
                        }), n.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [n.getSchemaTplByName("ref"), n.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    collapsed: !1
                }))
            },
            t = l.__decorate([i.Editor("collapse", {
                name: "æŠ˜å å™¨",
                type: "collapse",
                description: "æŠ˜å å™¨ï¼Œç”¨æˆ·å¯ä»¥è§‰å¾—æ˜¯å¦å°†å†…å®¹åŒºå±•å¼€æˆ–è€…æ”¶ç¼©ã€‚",
                tags: ["åŠŸèƒ½"],
                icon: "fa fa-folder-open",
                previewSchema: {
                    type: "collapse",
                    className: "text-left",
                    body: "å†…å®¹",
                    title: "æ ‡é¢˜"
                },
                scaffold: {
                    type: "collapse",
                    body: "å†…å®¹",
                    title: "æ ‡é¢˜"
                },
                $schema: "https://isuda.baidu.com/schemas/CollapseSchema.json"
            })], t)
        } (l.__importDefault(a(9)).
    default);
        t.CollapseEditor = o
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.WrapperEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(5),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Container",
                t.containers = ["body"],
                t.containerLabels = ["å†…å®¹åŒº"],
                t.dropable = !0,
                t.settingsSchema = {
                    title: "å®¹å™¨é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                className: "m-b-sm",
                                level: "info",
                                block: !0,
                                onClick: function() {
                                    t.pickChild("body")
                                }
                            },
                            "æ–°å¢žå†…å®¹")
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                return t.body && t.body.length ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t = l.__decorate([n.Editor("container", {
                name: "å®¹å™¨",
                description: "ä¸€ä¸ªç®€å•çš„å®¹å™¨ï¼Œå¯ä»¥å°†å¤šä¸ªæ¸²æŸ“å™¨æ”¾ç½®åœ¨ä¸€èµ·ã€‚",
                type: "container",
                tags: ["å®¹å™¨"],
                icon: "fa fa-tablet",
                previewSchema: {
                    type: "container",
                    body: "å®¹å™¨",
                    className: "b-a b-light"
                },
                scaffold: {
                    type: "container",
                    body: "å†…å®¹"
                },
                $schema: "https://isuda.baidu.com/schemas/ContainerSchema.json"
            })], t)
        } (l.__importDefault(a(9)).
    default);
        t.WrapperEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.CRUDEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(2),
        s = a(4),
        p = a(12),
        c = a(4),
        d = l.__importDefault(a(10)),
        m = a(6),
        u = a(17),
        h = l.__importDefault(a(11)),
        b = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "å¢žåˆ æ”¹æŸ¥",
                t.settingsSchema = {
                    title: "å¢žåˆ æ”¹æŸ¥é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: m([{
                            type: "alert",
                            body: "å½“å‰é€‰åˆ™ä¸º CRUD éƒ¨åˆ†ï¼Œè¿˜æœ‰æ›´å¤šé…ç½®è¯·åˆ‡æ¢åˆ°å­èŠ‚ç‚¹è¿›è¡Œé…ç½®ã€‚è¯·ç•™æ„å¤§çº²ä¸­ç»„ä»¶çš„å±‚çº§å…³ç³»ã€‚"
                        },
                        {
                            name: "filter",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "å¯ç”¨æŸ¥è¯¢æ¡ä»¶",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e, a) {
                                return e ? t.oldFilter || s.JSONPipeIn({
                                    title: "æŸ¥è¯¢æ¡ä»¶",
                                    controls: [{
                                        type: "text",
                                        name: "keywords",
                                        label: "å…³é”®å­—"
                                    }]
                                }) : (t.oldFilter = a, null)
                            }
                        },
                        {
                            type: "divider"
                        },
                        {
                            label: "æ‰¹é‡æ“ä½œ",
                            name: "bulkActions",
                            type: "combo",
                            hiddenOn: "data.pickerMode && data.multiple",
                            inputClassName: "ae-BulkActions-control",
                            multiple: !0,
                            draggable: !0,
                            scaffold: {
                                label: "æŒ‰é’®",
                                type: "button"
                            },
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "é€šè¿‡æ­¤å¯ä»¥ç®¡ç†æ‰¹é‡æ“ä½œæŒ‰é’®ï¼Œåªæœ‰è®¾ç½®äº†æ‰¹é‡æ“ä½œæŒ‰é’®æ‰ä¼šå‡ºçŽ°é€‰æ‹©æ¡†ï¼Œå¯åœ¨å¤–è§‚ä¸­é…ç½®æ‰¹é‡æ“ä½œæŒ‰é’®ä½ç½®ã€‚",
                                placement: "right"
                            },
                            controls: [{
                                type: "tpl",
                                tpl: '<span class="label label-success">${label}</span>',
                                columnClassName: "p-t-xs"
                            },
                            {
                                columnClassName: "p-t-xs col-edit",
                                children: function(e) {
                                    var a = e.index;
                                    return i.
                                default.createElement("button", {
                                        onClick: t.handleBulkActionEdit.bind(t, a),
                                        "data-tooltip": "ä¿®æ”¹",
                                        "data-position": "bottom",
                                        className: "text-muted"
                                    },
                                    i.
                                default.createElement("i", {
                                        className: "fa fa-pencil"
                                    }))
                                }
                            }]
                        },
                        {
                            type: "divider"
                        },
                        {
                            label: "å•æ¡æ“ä½œ",
                            name: "itemActions",
                            type: "combo",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "è®¾ç½®åŽï¼Œå½“é¼ æ ‡æ‚¬åœè¡Œæ•°æ®ä¸Šï¼Œä¼šå‡ºçŽ°è¯¥æ“ä½œæŒ‰é’®ï¼ŒåŒæ—¶é¡¶éƒ¨æ“ä½œæ ä¹Ÿä¼šæ˜¾ç¤ºè¯¥æŒ‰é’®ï¼Œå‹¾é€‰æˆå‘˜æ—¶ä¸Žæ‰¹é‡æŒ‰é’®æ™ºèƒ½åˆ‡æ¢ã€‚",
                                placement: "right"
                            },
                            hiddenOn: 'this.mode && this.mode !== "table" || this.pickerMode',
                            inputClassName: "ae-BulkActions-control",
                            multiple: !0,
                            draggable: !0,
                            scaffold: {
                                label: "æŒ‰é’®",
                                type: "button"
                            },
                            controls: [{
                                type: "tpl",
                                tpl: '<span class="label label-success">${label}</span>',
                                columnClassName: "p-t-xs"
                            },
                            {
                                type: "checkbox",
                                className: "text-xs",
                                option: "æ‚¬åœéšè—",
                                name: "hiddenOnHover"
                            },
                            {
                                columnClassName: "p-t-xs col-edit",
                                children: function(e) {
                                    var a = e.index;
                                    return i.
                                default.createElement("button", {
                                        onClick: t.handleItemActionEdit.bind(t, a),
                                        "data-tooltip": "ä¿®æ”¹",
                                        "data-position": "bottom",
                                        className: "text-muted"
                                    },
                                    i.
                                default.createElement("i", {
                                        className: "fa fa-pencil"
                                    }))
                                }
                            }]
                        },
                        {
                            type: "divider",
                            hiddenOn: 'this.mode && this.mode !== "table" || this.pickerMode'
                        },
                        {
                            name: "syncLocation",
                            label: "åŒæ­¥åœ°å€æ ",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            pipeIn: r.defaultValue(!0),
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¼€å¯åŽä¼šæŠŠæŸ¥è¯¢æ¡ä»¶æ•°æ®å’Œåˆ†é¡µä¿¡æ¯åŒæ­¥åˆ°åœ°å€æ ä¸­ï¼Œé¡µé¢ä¸­å‡ºçŽ°å¤šä¸ªæ—¶ï¼Œå»ºè®®åªä¿ç•™ä¸€ä¸ªåŒæ­¥åœ°å€æ ï¼Œå¦åˆ™ä¼šç›¸äº’å½±å“ã€‚",
                                placement: "right"
                            }
                        },
                        {
                            label: "é»˜è®¤å‚æ•°",
                            type: "combo",
                            name: "defaultParams",
                            multiple: !0,
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¯ä»¥ç”¨æ¥è®¾ç½®é»˜è®¤å‚æ•°ï¼Œæ¯”å¦‚ <code>perPage:20</code>",
                                placement: "right"
                            },
                            pipeIn: function(e) {
                                if (!c.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    "$$id" != a && t.push({
                                        key: a || "",
                                        value: "string" == typeof e[a] ? e[a] : JSON.stringify(e[a])
                                    })
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var t = {};
                                return e.forEach((function(e) {
                                    var a = e.key || "",
                                    l = e.value;
                                    try {
                                        l = JSON.parse(l)
                                    } catch(e) {}
                                    t[a] = l
                                })),
                                t
                            },
                            controls: [{
                                placeholder: "Key",
                                type: "text",
                                unique: !0,
                                name: "key",
                                required: !0
                            },
                            {
                                placeholder: "Value",
                                type: "text",
                                name: "value"
                            }]
                        },
                        {
                            type: "divider"
                        },
                        {
                            name: "keepItemSelectionOnPageChange",
                            label: "ä¿ç•™æ¡ç›®é€‰æ‹©",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            visbileOn: "this.bulkActions && this.bulkActions.length || this.itemActions && this.itemActions.length",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "é»˜è®¤åˆ†é¡µã€æœç´¢åŽï¼Œç”¨æˆ·é€‰æ‹©æ¡ç›®ä¼šè¢«æ¸…ç©ºï¼Œå¼€å¯æ­¤é€‰é¡¹åŽä¼šä¿ç•™ç”¨æˆ·é€‰æ‹©ï¼Œå¯ä»¥å®žçŽ°è·¨é¡µé¢æ‰¹é‡æ“ä½œã€‚",
                                placement: "right"
                            }
                        },
                        {
                            name: "labelTpl",
                            type: "text",
                            label: "å•æ¡æè¿°æ¨¡æ¿",
                            visibleOn: "this.keepItemSelectionOnPageChange",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¼€å¯ã€ä¿ç•™æ¡ç›®é€‰æ‹©ã€‘åŽä¼šæŠŠæ‰€æœ‰å·²é€‰æ‹©æ¡ç›®åˆ—å‡ºæ¥ï¼Œæ­¤é€‰é¡¹å¯ä»¥ç”¨æ¥å®šåˆ¶æ¡ç›®å±•ç¤ºæ–‡æ¡ˆã€‚",
                                placement: "right"
                            }
                        },
                        {
                            name: "primaryField",
                            label: "æŒ‡å®šä¸»é”®",
                            type: "text",
                            pipeIn: r.defaultValue("id"),
                            description: "é»˜è®¤<code>id</code>ï¼Œç”¨äºŽæ‰¹é‡æ“ä½œèŽ·å–è¡Œçº§æ•°æ®"
                        }])
                    },
                    {
                        title: "æŽ¥å£",
                        controls: m([r.getSchemaTplByName("api", {
                            label: "æ•°æ®æ‹‰å–æŽ¥å£"
                        }), {
                            name: "initFetch",
                            type: "radios",
                            label: "æ˜¯å¦åˆå§‹æ‹‰å–",
                            pipeIn: function(e) {
                                return "boolean" == typeof e && e || "boolean" != typeof e && ""
                            },
                            inline: !0,
                            options: [{
                                label: "æ˜¯",
                                value: !0
                            },
                            {
                                label: "å¦",
                                value: !1
                            },
                            {
                                label: "è¡¨è¾¾å¼",
                                value: ""
                            }]
                        },
                        {
                            name: "initFetch",
                            autoComplete: !1,
                            visibleOn: 'typeof this.initFetch !== "boolean"',
                            type: "text",
                            placeholder: "ç”¨ JS è¡¨è¾¾å¼æ¥å†³å®š",
                            className: "m-t-n-sm"
                        },
                        {
                            name: "loadDataOnce",
                            label: "ä¸€æ¬¡æ€§æ‹‰å–",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "å¼€å¯åŽï¼Œæ•°æ®åªä¼šåœ¨åˆå§‹çš„æ—¶å€™æ‹‰å–ï¼ŒåŽç»­åˆ†é¡µã€æŽ’åºä¸å†è¯·æ±‚æŽ¥å£ï¼Œéƒ½ç”±å‰ç«¯ç›´æŽ¥å®Œæˆã€‚",
                                placement: "right"
                            }
                        },
                        {
                            label: "å¼€å¯å®šæ—¶åˆ·æ–°",
                            type: "switch",
                            name: "interval",
                            visibleOn: "data.api",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? 3e3: void 0
                            },
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "interval",
                            type: "number",
                            visibleOn: 'typeof data.interval === "number"',
                            step: 500,
                            className: "m-t-n-sm",
                            description: "è®¾ç½®åŽå°†è‡ªåŠ¨å®šæ—¶åˆ·æ–°ï¼Œå•ä½ ms"
                        },
                        {
                            name: "silentPolling",
                            label: "é™é»˜åˆ·æ–°",
                            type: "switch",
                            mode: "inline",
                            visibleOn: "!!data.interval",
                            description: "è®¾ç½®è‡ªåŠ¨å®šæ—¶åˆ·æ–°æ—¶æ˜¯å¦æ˜¾ç¤ºloading"
                        },
                        {
                            name: "stopAutoRefreshWhen",
                            label: "åœæ­¢å®šæ—¶åˆ·æ–°æ£€æµ‹è¡¨è¾¾å¼",
                            type: "text",
                            visibleOn: "!!data.interval",
                            description: "å®šæ—¶åˆ·æ–°ä¸€æ—¦è®¾ç½®ä¼šä¸€ç›´åˆ·æ–°ï¼Œé™¤éžç»™å‡ºè¡¨è¾¾å¼ï¼Œæ¡ä»¶æ»¡è¶³åŽåˆ™ä¸åˆ·æ–°äº†ã€‚"
                        },
                        {
                            name: "stopAutoRefreshWhenModalIsOpen",
                            label: "å½“æœ‰å¼¹æ¡†æ—¶å…³é—­è‡ªåŠ¨åˆ·æ–°",
                            type: "switch",
                            visibleOn: "!!data.interval",
                            mode: "inline",
                            className: "block",
                            description: "å¼¹æ¡†æ‰“å¼€å…³é—­è‡ªåŠ¨åˆ·æ–°ï¼Œå…³é—­å¼¹æ¡†åˆæ¢å¤ï¼"
                        },
                        {
                            type: "divider"
                        },
                        r.getSchemaTplByName("api", {
                            label: "é¡ºåºä¿å­˜æŽ¥å£",
                            name: "saveOrderApi",
                            visibleOn: "data.draggable"
                        }), {
                            type: "divider"
                        },
                        r.getSchemaTplByName("api", {
                            label: "å¿«é€Ÿä¿å­˜æŽ¥å£",
                            name: "quickSaveApi",
                            description: "å½“ column ä¸­è®¾ç½®äº†å¿«é€Ÿç¼–è¾‘åŽå°†ä½¿ç”¨æ­¤æŽ¥å£æ‰¹é‡ä¿å­˜æ•°æ®ã€‚"
                        }), {
                            type: "divider"
                        },
                        r.getSchemaTplByName("api", {
                            label: "å¿«é€Ÿä¿å­˜å•æ¡æŽ¥å£",
                            name: "quickSaveItemApi",
                            description: "å½“ column ä¸­è®¾ç½®äº†å¿«é€Ÿç¼–è¾‘ä¸”è®¾ç½®äº†ç«‹å³ä¿å­˜ï¼Œå°†ä½¿ç”¨æ­¤æŽ¥å£ä¿å­˜æ•°æ®ã€‚"
                        }), {
                            type: "divider"
                        },
                        {
                            label: "é»˜è®¤æ¶ˆæ¯æç¤º",
                            type: "combo",
                            name: "messages",
                            multiLine: !0,
                            description: "è¦†ç›–æ¶ˆæ¯æç¤ºï¼Œå¦‚æžœä¸æŒ‡å®šï¼Œå°†é‡‡ç”¨ api è¿”å›žçš„ message",
                            controls: [{
                                label: "èŽ·å–æˆåŠŸæç¤º",
                                type: "text",
                                name: "fetchSuccess"
                            },
                            {
                                label: "èŽ·å–å¤±è´¥æç¤º",
                                type: "text",
                                name: "fetchFailed"
                            },
                            {
                                label: "ä¿å­˜é¡ºåºæˆåŠŸæç¤º",
                                type: "text",
                                name: "saveOrderSuccess"
                            },
                            {
                                label: "ä¿å­˜é¡ºåºå¤±è´¥æç¤º",
                                type: "text",
                                name: "saveOrderFailed"
                            },
                            {
                                label: "å¿«é€Ÿä¿å­˜æˆåŠŸæç¤º",
                                type: "text",
                                name: "quickSaveSuccess"
                            },
                            {
                                label: "å¿«é€Ÿä¿å­˜å¤±è´¥æç¤º",
                                type: "text",
                                name: "quickSaveFailed"
                            }]
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: m([{
                            name: "mode",
                            type: "button-group",
                            size: "xs",
                            label: "å†…å®¹å±•ç¤ºæ¨¡å¼",
                            value: "table",
                            mode: "inline",
                            className: "block",
                            options: [{
                                value: "table",
                                label: "è¡¨æ ¼"
                            },
                            {
                                value: "cards",
                                label: "å¡ç‰‡"
                            },
                            {
                                value: "list",
                                label: "åˆ—è¡¨"
                            }]
                        },
                        {
                            name: "headerToolbar",
                            type: "combo",
                            draggable: !0,
                            draggableTip: "",
                            descrition: "éžå†…å»ºå†…å®¹è¯·åœ¨é¢„è§ˆåŒºé€‰ä¸­åŽç¼–è¾‘",
                            label: "é¡¶éƒ¨å·¥å…·æ é…ç½®",
                            pipeIn: function(e) {
                                return Array.isArray(e) || (e = e ? [e] : ["bulkActions", "pagination"]),
                                e.map((function(e) {
                                    var t = e.type;
                                    return "string" == typeof e && ~ ["bulkActions", "bulk-actions", "pagination", "statistics", "switch-per-page", "filter-toggler"].indexOf(e) ? e = {
                                        type: t = "bulkActions" === e ? "bulk-actions": e
                                    }: "string" == typeof e && (t = "tpl", e = "string" == typeof e ? {
                                        type: "tpl",
                                        tpl: e
                                    }: e),
                                    l.__assign({
                                        type: t
                                    },
                                    e)
                                }))
                            },
                            pipeOut: function(e) {
                                return Array.isArray(e) ? e.map((function(e) {
                                    return "button" === e.type ? s.JSONPipeIn(l.__assign({
                                        label: "æŒ‰é’®",
                                        type: "button"
                                    },
                                    e)) : "tpl" === e.type ? s.JSONPipeIn(l.__assign({
                                        type: "tpl",
                                        tpl: "å†…å®¹"
                                    },
                                    e)) : e
                                })) : []
                            },
                            scaffold: {
                                type: "tpl",
                                tpl: "å†…å®¹"
                            },
                            multiple: !0,
                            controls: [{
                                type: "select",
                                name: "type",
                                options: [{
                                    value: "bulk-actions",
                                    label: "æ“ä½œæ "
                                },
                                {
                                    value: "pagination",
                                    label: "åˆ†é¡µ"
                                },
                                {
                                    value: "statistics",
                                    label: "ç»Ÿè®¡æ•°æ®"
                                },
                                {
                                    value: "switch-per-page",
                                    label: "åˆ‡æ¢é¡µç "
                                },
                                {
                                    value: "columns-toggler",
                                    label: "åˆ—é€‰æ‹©å™¨",
                                    visibleOn: '!this.mode || this.mode === "table"'
                                },
                                {
                                    value: "filter-toggler",
                                    label: "æŸ¥è¯¢æ¡ä»¶åˆ‡æ¢"
                                },
                                {
                                    value: "drag-toggler",
                                    label: "æ‹–æ‹½åˆ‡æ¢"
                                },
                                {
                                    value: "check-all",
                                    label: "å…¨é€‰",
                                    hiddenOn: '!this.mode || this.mode === "table"'
                                },
                                {
                                    value: "tpl",
                                    label: "æ–‡æœ¬"
                                },
                                {
                                    value: "button",
                                    label: "æŒ‰é’®"
                                }]
                            },
                            {
                                name: "align",
                                placeholder: "å¯¹é½æ–¹å¼",
                                type: "select",
                                size: "xs",
                                options: [{
                                    label: "å·¦å¯¹é½",
                                    value: "left"
                                },
                                {
                                    label: "å³å¯¹é½",
                                    value: "right"
                                }]
                            },
                            {
                                type: "remark",
                                content: "è¯¦æƒ…è¯·åœ¨é¢„è§ˆåŒºåŸŸé€‰ä¸­åŽè¿›è¡Œç¼–è¾‘ã€‚",
                                trigger: ["click"],
                                rootClose: !0,
                                placement: "right",
                                visibleOn: '!~["bulkActions", "drag-toggler", "check-all", "bulk-actions", "pagination", "statistics", "switch-per-page", "filter-toggler", "load-more"].indexOf(this.type)',
                                columnClassName: "no-grow w-3x p-t-xs",
                                className: "m-l-none"
                            }]
                        },
                        {
                            name: "footerToolbar",
                            type: "combo",
                            draggable: !0,
                            draggableTip: "",
                            descrition: "éžå†…å»ºå†…å®¹è¯·åœ¨é¢„è§ˆåŒºé€‰ä¸­åŽç¼–è¾‘",
                            label: "åº•éƒ¨å·¥å…·æ é…ç½®",
                            pipeIn: function(e) {
                                return Array.isArray(e) || (e = e ? [e] : ["bulkActions", "pagination"]),
                                e.map((function(e) {
                                    var t = e.type;
                                    return "string" == typeof e && ~ ["bulkActions", "bulk-actions", "pagination", "statistics", "switch-per-page", "filter-toggler"].indexOf(e) ? e = {
                                        type: t = "bulkActions" === e ? "bulk-actions": e
                                    }: "string" == typeof e && (t = "tpl", e = "string" == typeof e ? {
                                        type: "tpl",
                                        tpl: e
                                    }: e),
                                    l.__assign({
                                        type: t
                                    },
                                    e)
                                }))
                            },
                            pipeOut: function(e) {
                                return Array.isArray(e) ? e.map((function(e) {
                                    return "button" === e.type ? s.JSONPipeIn(l.__assign({
                                        label: "æŒ‰é’®",
                                        type: "button"
                                    },
                                    e)) : "tpl" === e.type ? s.JSONPipeIn(l.__assign({
                                        type: "tpl",
                                        tpl: "å†…å®¹"
                                    },
                                    e)) : e
                                })) : []
                            },
                            scaffold: {
                                type: "tpl",
                                tpl: "å†…å®¹"
                            },
                            multiple: !0,
                            controls: [{
                                type: "select",
                                name: "type",
                                options: [{
                                    value: "bulk-actions",
                                    label: "æ“ä½œæ "
                                },
                                {
                                    value: "pagination",
                                    label: "åˆ†é¡µ"
                                },
                                {
                                    value: "statistics",
                                    label: "ç»Ÿè®¡æ•°æ®"
                                },
                                {
                                    value: "switch-per-page",
                                    label: "åˆ‡æ¢é¡µç "
                                },
                                {
                                    value: "columns-toggler",
                                    label: "åˆ—é€‰æ‹©å™¨",
                                    hiddenOn: '["grid", "cards", "list"].indexOf(this.mode)'
                                },
                                {
                                    value: "filter-toggler",
                                    label: "æŸ¥è¯¢æ¡ä»¶åˆ‡æ¢"
                                },
                                {
                                    value: "drag-toggler",
                                    label: "æ‹–æ‹½åˆ‡æ¢"
                                },
                                {
                                    value: "check-all",
                                    label: "å…¨é€‰",
                                    hiddenOn: '!this.mode || this.mode === "table"'
                                },
                                {
                                    value: "tpl",
                                    label: "æ–‡æœ¬"
                                },
                                {
                                    value: "button",
                                    label: "æŒ‰é’®"
                                }]
                            },
                            {
                                name: "align",
                                placeholder: "å¯¹é½æ–¹å¼",
                                size: "xs",
                                type: "select",
                                options: [{
                                    label: "å·¦å¯¹é½",
                                    value: "left"
                                },
                                {
                                    label: "å³å¯¹é½",
                                    value: "right"
                                }]
                            },
                            {
                                type: "remark",
                                content: "è¯¦æƒ…è¯·åœ¨é¢„è§ˆåŒºåŸŸé€‰ä¸­åŽè¿›è¡Œç¼–è¾‘ã€‚",
                                trigger: ["click"],
                                rootClose: !0,
                                placement: "right",
                                visibleOn: '!~["bulkActions", "drag-toggler", "check-all", "bulk-actions", "pagination", "statistics", "switch-per-page", "filter-toggler", "load-more"].indexOf(this.type)',
                                columnClassName: "no-grow w-3x p-t-xs",
                                className: "m-l-none"
                            }]
                        },
                        {
                            name: "filterTogglable",
                            type: "switch",
                            label: "æ˜¯å¦å¯æ˜¾éšæŸ¥è¯¢æ¡ä»¶",
                            mode: "inline",
                            className: "block",
                            visibleOn: "data.filter"
                        },
                        {
                            name: "filterDefaultVisible",
                            type: "switch",
                            label: "æŸ¥è¯¢æ¡ä»¶é»˜è®¤æ˜¯å¦å¯è§",
                            pipeIn: r.defaultValue(!0),
                            mode: "inline",
                            className: "block",
                            visibleOn: "data.filter && data.filterTogglable"
                        },
                        {
                            name: "hideQuickSaveBtn",
                            label: "éšè—é¡¶éƒ¨å¿«é€Ÿä¿å­˜æç¤º",
                            type: "switch",
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "hideCheckToggler",
                            type: "switch",
                            label: "éšè—é€‰æ‹©æŒ‰é’®",
                            mode: "inline",
                            className: "block",
                            visibleOn: "data.checkOnItemClick"
                        },
                        r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹ CSS ç±»å"
                        })])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: m([r.getSchemaTplByName("ref"), {
                            name: "source",
                            label: "æ•°æ®æº",
                            type: "text",
                            description: "ä¸å¡«å†™ï¼Œé»˜è®¤è¯»å–æŽ¥å£è¿”å›žçš„ items æˆ–è€… rows å±žæ€§ï¼Œå¦‚æžœæ˜¯åˆ«çš„ï¼Œè¯·åœ¨æ­¤è®¾ç½®ï¼Œå¦‚ï¼š <code>\\${xxxx}</code>"
                        },
                        {
                            name: "pageField",
                            label: "é¡µç å­—æ®µå",
                            type: "text",
                            pipeIn: r.defaultValue("page")
                        },
                        {
                            name: "perPageField",
                            label: "åˆ†é¡µæ­¥é•¿å­—æ®µå",
                            type: "text",
                            pipeIn: r.defaultValue("perPage")
                        },
                        {
                            name: "orderField",
                            label: "æŽ’åºæƒé‡å­—æ®µ",
                            type: "text",
                            labelRemark: {
                                className: "m-l-xs",
                                trigger: "click",
                                rootClose: !0,
                                content: "è®¾ç½®ç”¨æ¥ç¡®å®šä½ç½®çš„å­—æ®µåï¼Œè®¾ç½®åŽæ–°çš„é¡ºåºå°†è¢«èµ‹å€¼åˆ°è¯¥å­—æ®µä¸­ã€‚",
                                placement: "right"
                            }
                        },
                        {
                            name: "perPageAvailable",
                            label: "åˆ‡æ¢æ¯é¡µæ•°",
                            type: "text",
                            multiple: !0,
                            hiddenOn: "data.loadDataOnce",
                            pipeIn: function(e) {
                                return Array.isArray(e) ? e: e ? e.split(",") : ""
                            },
                            pipeOut: function(e) {
                                return Array.isArray(e) ? e: e ? e.split(",") : ""
                            },
                            options: ["5", "10", "20", "50", "100"]
                        },
                        r.getSchemaTplByName("name"), {
                            name: "draggable",
                            label: "æ˜¯å¦å¯æ‹–æ‹½æŽ’åº",
                            type: "switch",
                            mode: "inline",
                            className: "block"
                        },
                        {
                            name: "itemCheckableOn",
                            type: "text",
                            label: "é…ç½®å•æ¡å¯é€‰ä¸­çš„è¡¨è¾¾å¼",
                            description: "è¯·ä½¿ç”¨ js è¡¨è¾¾å¼ï¼Œä¸è®¾ç½®çš„è¯æ¯æ¡éƒ½å¯é€‰ä¸­ã€‚",
                            visibleOn: "data.bulkActions && data.bulkActions.length || data.pickerMode"
                        },
                        {
                            name: "checkOnItemClick",
                            type: "switch",
                            label: "å¼€å¯å•æ¡ç‚¹å‡»æ•´ä¸ªåŒºåŸŸé€‰ä¸­",
                            mode: "inline",
                            className: "block",
                            visibleOn: "data.bulkActions && data.bulkActions.length || data.pickerMode"
                        },
                        {
                            name: "autoJumpToTopOnPagerChange",
                            type: "switch",
                            label: "è‡ªåŠ¨è·³é¡¶éƒ¨",
                            mode: "inline",
                            className: "block",
                            description: "å½“åˆ‡åˆ†é¡µçš„æ—¶å€™ï¼Œæ˜¯å¦è‡ªåŠ¨è·³é¡¶éƒ¨ã€‚"
                        },
                        {
                            name: "syncResponse2Query",
                            type: "switch",
                            label: "åŒæ­¥æŸ¥è¯¢æ¡ä»¶",
                            mode: "inline",
                            className: "block",
                            description: "æ¯æ¬¡æŸ¥è¯¢åŽï¼Œå°†è¿”å›žçš„æ•°æ®åŒæ­¥åˆ°æŸ¥è¯¢æ¡ä»¶ä¸Šã€‚"
                        }])
                    }])]
                },
                t.schemaCaches = {},
                t
            }
            return l.__extends(t, e),
            t.prototype.componentDidMount = function() {
                e.prototype.componentDidMount.call(this),
                this.nodes.forEach((function(e) {
                    e.draggable = !1
                }))
            },
            t.prototype.modifyProps = function(e, t) {
                void 0 === t && (t = this.context);
                e.filter;
                var a = e.defaultParams,
                l = e.itemActions,
                i = e.bulkActions;
                t.editor;
                return l = l ? s.JSONPipeOut(l) : l,
                i = i ? s.JSONPipeOut(i) : i,
                {
                    defaultParams: s.JSONPipeOut(a),
                    itemActions: l,
                    bulkActions: i
                }
            },
            t.prototype.normalizeContainerHeaderToolbar = function(e) {
                return this.normalizeToolbar(e)
            },
            t.prototype.normalizeContainerFooterToolbar = function(e) {
                return this.normalizeToolbar(e)
            },
            t.prototype.normalizeToolbar = function(e) {
                if (Array.isArray(e)) {
                    var t = !1,
                    a = e.map((function(e) {
                        return "string" == typeof e ? (t = !0, s.JSONPipeIn(~ ["filter-toggler", "statistics", "bulkActions", "bulk-actions", "load-more", "pagination", "switch-per-page", "filter-toggler", "columns-toggler", "drag-toggler"].indexOf(e) ? {
                            type: e
                        }: {
                            type: "tpl",
                            tpl: e
                        })) : e
                    }));
                    return t ? a: e
                }
                return e
            },
            t.prototype.onChildSettingsGet = function(e, t) {
                if ("form" === e) return l.__assign({
                    title: "æ¡ä»¶è¿‡æ»¤",
                    mode: "inline",
                    submitText: "æœç´¢"
                },
                t);
                var a = this.context.editor,
                i = this.props.$$id,
                n = a.get(i);
                return n = l.__assign(l.__assign({},
                n), {
                    className: n.bodyClassName
                }),
                p(n, ["filter", "mode", "syncLocation", "bulkActions", "multiple"])
            },
            t.prototype.onChildSettingsSet = function(e, t, a) {
                if ("form" !== e) {
                    var i = this.context.editor,
                    n = this.props.$$id,
                    o = i.get(n);
                    if (c.isObjectShallowModified(o, t)) return t = l.__assign(l.__assign(l.__assign({},
                    t), u(o, ["filter", "mode", "syncLocation", "bulkActions", "multiple"])), {
                        bodyClassName: t.className,
                        className: a.className
                    }),
                    i.update(n, t, !0),
                    "__SKIP__"
                }
            },
            t.prototype.handleBulkActionEdit = function(e) {
                var t = this.context.editor,
                a = this.props.$$id,
                n = t.get(a).bulkActions,
                o = s.JSONPipeOut(n[e]);
                t.openDialog("é…ç½®æŒ‰é’®è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        button: o
                    },
                    controls: [{
                        name: "button",
                        children: function(e) {
                            var a = e.value,
                            n = e.onChange;
                            return i.
                        default.createElement(d.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({
                                    size: "sm"
                                },
                                a), {
                                    type: "button"
                                }),
                                onChange: n,
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(i) {
                    i = s.JSONPipeIn(i);
                    var o = n.concat();
                    o[e] = l.__assign(l.__assign({},
                    n[e]), p(i.button, ["type"])),
                    t.update(a, {
                        bulkActions: o
                    })
                }), "xl")
            },
            t.prototype.handleItemActionEdit = function(e) {
                var t = this.context.editor,
                a = this.props.$$id,
                n = t.get(a).itemActions,
                o = s.JSONPipeOut(n[e]);
                t.openDialog("é…ç½®æŒ‰é’®è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        button: o
                    },
                    controls: [{
                        name: "button",
                        children: function(e) {
                            var a = e.value,
                            n = e.onChange;
                            return i.
                        default.createElement(d.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({
                                    size: "sm"
                                },
                                a), {
                                    type: "button"
                                }),
                                onChange: n,
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(i) {
                    var o = n.concat();
                    o[e] = l.__assign(l.__assign({},
                    n[e]), p(s.JSONPipeIn(i.button), ["type"])),
                    t.update(a, {
                        itemActions: o
                    })
                }), "xl")
            },
            t.prototype.renderChild = function(t, a, i) {
                var n = this.props.$$id;
                return "body" !== t ? e.prototype.renderChild.call(this, t, a, i) : e.prototype.renderChild.call(this, t, l.__assign(l.__assign({},
                a), {
                    $$id: n.replace(/\-.*$/, "") + "-" + t
                }), l.__assign({},
                i))
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.context.editor,
                a = this.props.$$id,
                i = t.get(a);
                if (c.isObjectShallowModified(i, e)) {
                    for (var n = this.context.editorNode; n && n.component instanceof h.
                default;) n = n.component.context.editorNode;
                    if (n && n.component && n.component.onChildSettingsSet && (e = n.component.onChildSettingsSet(this.props.type, e, i) || e), "__SKIP__" !== e) {
                        if (e.mode !== i.mode) {
                            var o = "cards" === i.mode || "grid" === i.mode ? "card": "list" === i.mode ? "listItem": "columns";
                            this.schemaCaches[o] = e[o],
                            delete(e = l.__assign({},
                            e))[o],
                            "cards" === e.mode || "grid" === e.mode ? e.card = this.schemaCaches.card || {
                                title: "æ ‡é¢˜",
                                body: {
                                    name: "engine",
                                    label: "Engine"
                                },
                                actions: [{
                                    label: "æŒ‰é’®",
                                    type: "button"
                                }]
                            }: "list" === e.mode ? e.listItem = this.schemaCaches.listItem || {
                                title: "æ ‡é¢˜",
                                body: {
                                    name: "engine",
                                    label: "Engine"
                                },
                                actions: [{
                                    label: "æŒ‰é’®",
                                    type: "button",
                                    level: "default"
                                }]
                            }: e.columns = this.schemaCaches.columns || [{
                                name: "id",
                                label: "ID",
                                width: 20,
                                type: "text"
                            },
                            {
                                name: "engine",
                                label: "Engine"
                            },
                            {
                                type: "operation",
                                width: 100,
                                buttons: [{
                                    label: "æŒ‰é’®",
                                    type: "button"
                                }]
                            }]
                        }
                        t.update(a, e, this.replaceSettings, "form")
                    }
                }
            },
            t = l.__decorate([n.Editor("crud", {
                name: "å¢žåˆ æ”¹æŸ¥",
                type: "crud",
                icon: "fa fa-th",
                description: "ç”¨æ¥å®žçŽ°å¯¹æ•°æ®çš„å¢žåˆ æ”¹æŸ¥ï¼Œæ”¯æŒä¸‰ç§æ¨¡å¼å±•ç¤ºï¼štableã€cardså’Œlist. è´Ÿè´£æ•°æ®çš„æ‹‰å–ï¼Œåˆ†é¡µï¼Œå•æ¡æ“ä½œï¼Œæ‰¹é‡æ“ä½œï¼ŒæŽ’åºï¼Œå¿«é€Ÿç¼–è¾‘ç­‰ç­‰åŠŸèƒ½ã€‚é›†æˆæŸ¥è¯¢æ¡ä»¶ã€‚",
                tags: ["åŠŸèƒ½", "å®¹å™¨"],
                previewSchema: {
                    syncLocation: !1,
                    type: "crud",
                    className: "text-left",
                    bodyClassName: "m-b-none",
                    affixHeader: !1,
                    data: {
                        items: [{
                            a: 1,
                            b: 2
                        },
                        {
                            a: 3,
                            b: 4
                        },
                        {
                            a: 5,
                            b: 6
                        }]
                    },
                    source: "${items}",
                    columns: [{
                        label: "A",
                        name: "a"
                    },
                    {
                        label: "B",
                        name: "b"
                    },
                    {
                        type: "operation",
                        label: "æ“ä½œ",
                        buttons: [{
                            icon: "fa fa-eye",
                            type: "button"
                        },
                        {
                            icon: "fa fa-edit",
                            type: "button"
                        }]
                    }]
                },
                scaffold: {
                    type: "crud",
                    api: "",
                    columns: [{
                        name: "id",
                        label: "ID",
                        type: "text"
                    },
                    {
                        name: "engine",
                        label: "Rendering engine"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/CRUDSchema.json"
            },
            {})], t)
        } (o.
    default);
        t.CRUDEditor = b
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TimeFieldEditor = t.DateTimeFieldEditor = t.DateFieldEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Date",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "æ—¥æœŸå±•ç¤ºé…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            type: "text",
                            name: "format",
                            label: "æ˜¾ç¤ºæ—¥æœŸæ ¼å¼",
                            description: "è¯·å‚è€ƒ moment ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚",
                            pipeIn: o.defaultValue("YYYY-MM-DD")
                        },
                        {
                            type: "text",
                            name: "valueFormat",
                            label: "æ•°æ®æ—¥æœŸæ ¼å¼",
                            description: "è¯·å‚è€ƒ moment ä¸­çš„æ ¼å¼ç”¨æ³•ã€‚",
                            pipeIn: o.defaultValue("X")
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            pipeIn: o.defaultValue("-"),
                            label: "å ä½ç¬¦"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                return t.value || void 0 === t.placeholder || t.placeholder ? e.prototype.renderRenderer.call(this, t) : this.renderPlaceholder(t)
            },
            t = l.__decorate([i.Editor("date-field", {
                name: "æ—¥æœŸå±•ç¤º",
                icon: "fa fa-calendar",
                tags: ["å±•ç¤º"],
                description: "ä¸»è¦ç”¨æ¥å…³è”å­—æ®µååšæ—¥æœŸå±•ç¤ºï¼Œæ”¯æŒå„ç§æ ¼å¼å¦‚ï¼šXï¼ˆæ—¶é—´æˆ³ï¼‰ï¼ŒYYYY-MM-DD HH:mm:ssã€‚",
                previewSchema: {
                    type: "date",
                    format: "YYYY-MM-DD HH:mm:ss",
                    value: Math.round(Date.now() / 1e3)
                },
                type: "date",
                $schema: "https://isuda.baidu.com/schemas/DateSchema.json"
            })], t)
        } (n.
    default);
        t.DateFieldEditor = r;
        var s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Datetime",
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("datetime-field", {
                type: "datetime"
            })], t)
        } (r);
        t.DateTimeFieldEditor = s;
        var p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Time",
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("time-field", {
                type: "time"
            })], t)
        } (r);
        t.TimeFieldEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DialogEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(4),
        r = a(2),
        s = l.__importDefault(a(11)),
        p = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.regionDefaultNodes = {
                    actions: [{
                        label: "ç¡®è®¤",
                        type: "button"
                    },
                    {
                        label: "å–æ¶ˆ",
                        type: "button"
                    }]
                },
                t.tipName = "Dialog",
                t.removable = !1,
                t.replaceable = !1,
                t.dropable = !0,
                t.containers = ["body", "actions"],
                t.containerLabels = ["å†…å®¹åŒº", "æŒ‰é’®é›†åˆ"],
                t.settingsSchema = {
                    title: "å¼¹æ¡†é…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            label: "æ ‡é¢˜",
                            type: "text",
                            name: "title"
                        },
                        {
                            type: "switch",
                            label: "æ•°æ®æ˜ å°„",
                            name: "data",
                            mode: "inline",
                            className: "block m-b-xs",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? {
                                    "&": "$$"
                                }: null
                            }
                        },
                        {
                            type: "tpl",
                            visibleOn: "!this.data",
                            tpl: '<p class="text-sm text-muted">å½“æ²¡å¼€å¯æ•°æ®æ˜ å°„æ—¶ï¼Œå¼¹æ¡†ä¸­é»˜è®¤ä¼šæ‹¥æœ‰è§¦å‘æ‰“å¼€å¼¹æ¡†æŒ‰é’®æ‰€åœ¨çŽ¯å¢ƒçš„æ‰€æœ‰æ•°æ®ã€‚</p>'
                        },
                        {
                            type: "combo",
                            syncDefaultValue: !1,
                            name: "data",
                            visibleOn: "this.data",
                            descriptionClassName: "help-block text-xs m-b-none",
                            description: '<p>å½“å¼€å¯æ•°æ®æ˜ å°„æ—¶ï¼Œå¼¹æ¡†ä¸­çš„æ•°æ®åªä¼šåŒ…å«è®¾ç½®çš„éƒ¨åˆ†ï¼Œè¯·ç»‘å®šæ•°æ®ã€‚å¦‚ï¼š<code>{"a": "\\${a}", "b": 2}</code></p><p>å¦‚æžœå¸Œæœ›åœ¨é»˜è®¤çš„åŸºç¡€ä¸Šå®šåˆ¶ï¼Œè¯·å…ˆæ·»åŠ ä¸€ä¸ª Key ä¸º `&` Value ä¸º `\\$$` ä½œä¸ºç¬¬ä¸€è¡Œã€‚</p><div>å½“å€¼ä¸º <code>__undefined</code>æ—¶ï¼Œè¡¨ç¤ºåˆ é™¤å¯¹åº”çš„å­—æ®µï¼Œå¯ä»¥ç»“åˆ<code>{"&": "\\$$"}</code>æ¥è¾¾åˆ°é»‘åå•æ•ˆæžœã€‚</div>',
                            multiple: !0,
                            messages: {
                                validateFailed: "æ•°æ®æ˜ å°„ä¸­å­˜åœ¨é”™è¯¯ï¼Œè¯·ä»”ç»†æ£€æŸ¥"
                            },
                            pipeIn: function(e) {
                                if (!o.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    t.push({
                                        key: a || "",
                                        value: "string" == typeof e[a] ? e[a] : JSON.stringify(e[a])
                                    })
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var t = {};
                                return e.forEach((function(e) {
                                    var a = e.key || "",
                                    l = e.value;
                                    try {
                                        l = JSON.parse(l)
                                    } catch(e) {}
                                    t[a] = l
                                })),
                                t
                            },
                            controls: [{
                                placeholder: "Key",
                                type: "text",
                                unique: !0,
                                name: "key",
                                required: !0
                            },
                            {
                                placeholder: "Value",
                                type: "text",
                                name: "value"
                            }]
                        },
                        {
                            label: "æŒ‰ Esc å…³é—­å¼¹æ¡†",
                            type: "switch",
                            name: "closeOnEsc",
                            mode: "inline",
                            className: "block",
                            value: !1
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "å°ºå¯¸",
                            type: "button-group",
                            name: "size",
                            size: "sm",
                            className: "block",
                            pipeIn: r.defaultValue(""),
                            options: [{
                                label: "å°",
                                value: "sm"
                            },
                            {
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "ä¸­",
                                value: "md"
                            },
                            {
                                label: "å¤§",
                                value: "lg"
                            },
                            {
                                label: "è¶…å¤§",
                                value: "xl"
                            }]
                        },
                        {
                            label: "æ˜¯å¦æ˜¾ç¤ºå…³é—­æŒ‰é’®",
                            type: "switch",
                            name: "showCloseButton",
                            mode: "inline",
                            className: "block",
                            value: !0
                        },
                        r.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "é¡¶éƒ¨ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹ CSS ç±»å"
                        })]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.pickChild = function(e) {
                var t = this.context.editor,
                a = this.props,
                l = a.$path,
                i = a.$$id,
                n = a.actions,
                r = function(a) {
                    var l, n = t.get(i)[e]; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(o.JSONPipeIn(a)),
                    t.update(i, ((l = {})[e] = n, l))
                };
                if ("actions" === e) return r(n && Array.isArray(n) && n.some((function(e) {
                    return "confirm" === e.actionType
                })) ? {
                    type: "button",
                    label: "å–æ¶ˆ",
                    actionType: "cancel"
                }: {
                    type: "button",
                    label: "ç¡®è®¤",
                    actionType: "confirm",
                    level: "primary"
                });
                t.pickRenderer(l + "/" + e, "", "", r)
            },
            t.prototype.renderRenderer = function(e) {
                var t = this.props.$$id,
                a = this.context.editorNode;
                return ! t || a && "global" !== a.id ? i.
            default.createElement(this.Renderer, l.__assign({},
                e, {
                    ref: this.childRef
                })) : i.
            default.createElement(this.Renderer, l.__assign({},
                e, {
                    wrapperComponent: c,
                    onClose: o.noop,
                    ref: this.childRef
                }))
            },
            t.prototype.onChildSettingsGet = function(e, t) {
                if ("form" === e) return l.__assign({
                    title: "æ¡ä»¶è¿‡æ»¤",
                    mode: "horizontal"
                },
                t)
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !("action" === (a = "actions" === a ? "action": a) && !~ ["button", "submit", "reset"].indexOf(t)) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.render = function() {
                var t = this.props,
                a = t.$$id,
                i = (t.activeId, t.hoverId, t.$$edittingDialog, l.__rest(t, ["$$id", "activeId", "hoverId", "$$edittingDialog"])),
                n = this.context.editorNode;
                return ! a || n && "global" !== n.id ? this.renderRenderer(i) : e.prototype.render.call(this)
            },
            t.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            t = l.__decorate([n.Editor("dialog", {
                type: "dialog",
                $schema: "https://isuda.baidu.com/schemas/DialogSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || a.disabledContainers && ~a.disabledContainers.indexOf("body") || "number" == typeof e[1]) return this.super.apply(this, e);
                    var l = this.props.regionRef;
                    return i.
                default.createElement(s.
                default, {
                        key: e[1],
                        ref: function(e) {
                            return l("body", e)
                        },
                        name: "body",
                        label: "å†…å®¹åŒº",
                        hostId: a.props.$$id
                    },
                    this.super.apply(this, e))
                },
                renderFooter: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || a.disabledContainers && ~a.disabledContainers.indexOf("actions")) return this.super.apply(this, e);
                    var l = this.super.apply(this, e),
                    n = this.props.regionRef;
                    if (!l) return l;
                    var o = l.props.children.concat(),
                    r = o.splice(1, o.length - 1);
                    return o.push(i.
                default.createElement(s.
                default, {
                        className: "ae-Dialog-footerRegion",
                        key: "actions",
                        ref: function(e) {
                            return n("actions", e)
                        },
                        name: "actions",
                        label: "æŒ‰é’®é›†åˆ",
                        hostId: a.props.$$id
                    },
                    r)),
                    i.
                default.cloneElement(l, {
                        children: o
                    })
                }
            })], t)
        } (l.__importDefault(a(9)).
    default);
        t.DialogEditor = p;
        var c = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e),
            t.prototype.render = function() {
                var e = this.props.children;
                return i.
            default.createElement("div", {
                    className: "b-a r h-full",
                    style: {
                        display: "flex",
                        flexDirection: "column"
                    }
                },
                e)
            },
            t
        } (i.
    default.Component)
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DiffEditorControlEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(23),
        r = a(2),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Diff Editor",
                t.settingsSchema = {
                    title: "diffç¼–è¾‘å™¨é…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "textarea",
                            name: "diffValue",
                            label: "å·¦ä¾§é»˜è®¤å€¼",
                            pipeOut: r.valuePipeOut,
                            description: "æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡"
                        },
                        {
                            type: "textarea",
                            name: "value",
                            label: "å³ä¾§é»˜è®¤å€¼",
                            pipeOut: r.valuePipeOut
                        },
                        {
                            label: "è¯­è¨€",
                            name: "language",
                            type: "select",
                            value: "javascript",
                            searchable: !0,
                            options: o.availableLanguages.concat()
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "size",
                            type: "button-group",
                            size: "xs",
                            pipeIn: r.defaultValue(""),
                            options: [{
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "ä¸­",
                                value: "md"
                            },
                            {
                                label: "å¤§",
                                value: "lg"
                            },
                            {
                                label: "åŠ å¤§",
                                value: "xl"
                            },
                            {
                                label: "åŠ åŠ å¤§",
                                value: "xxl"
                            }]
                        },
                        r.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("diff-editor", {
                name: "diffç¼–è¾‘å™¨",
                type: "diff-editor",
                description: "å¯ä»¥ç”¨æ¥å±•ç¤ºé…ç½®æˆ–è€…ä»£ç çš„ Diff ç»“æžœï¼ŒåŒæ—¶è¿˜æ”¯æŒç¼–è¾‘ã€‚",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "diff-editor",
                    diffValue: "a\nb\nc",
                    value: "b\nc"
                },
                scaffold: {
                    type: "diff-editor",
                    label: "diffç¼–è¾‘å™¨"
                },
                $schema: "https://isuda.baidu.com/schemas/DiffEditorControlSchema.json"
            })], t)
        } (n.
    default);
        t.DiffEditorControlEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DividerEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Divider",
                t.settingsSchema = {
                    title: "åˆ†éš”çº¿é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("divider", {
                name: "åˆ†éš”çº¿",
                description: "ç”¨æ¥å±•ç¤ºä¸€ä¸ªåˆ†å‰²çº¿ï¼Œå¯ç”¨æ¥åšè§†è§‰ä¸Šçš„éš”ç¦»ã€‚",
                previewSchema: {
                    type: "divider",
                    className: "m-t-none m-b-none"
                },
                type: "divider"
            })], t)
        } (n.
    default);
        t.DividerEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DrawerEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(4),
        r = a(2),
        s = a(4),
        p = a(5),
        c = l.__importDefault(a(11)),
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Drawer",
                t.removable = !1,
                t.replaceable = !1,
                t.dropable = !0,
                t.containers = ["body", "actions"],
                t.containerLabels = ["å†…å®¹åŒº", "æŒ‰é’®é›†åˆ"],
                t.regionDefaultNodes = {
                    actions: [{
                        label: "ç¡®è®¤",
                        type: "button"
                    },
                    {
                        label: "å–æ¶ˆ",
                        type: "button"
                    }]
                },
                t.settingsSchema = {
                    title: "æŠ½å‡ºå¼¹æ¡†é…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            label: "æ ‡é¢˜",
                            type: "text",
                            name: "title"
                        },
                        {
                            children: i.
                        default.createElement(p.Button, {
                                size: "sm",
                                className: "m-b-sm",
                                level: "info",
                                block: !0,
                                onClick: function() {
                                    t.pickChild("body")
                                }
                            },
                            "æ–°å¢žå†…å®¹")
                        },
                        {
                            type: "divider"
                        },
                        {
                            label: "ä½ç½®",
                            type: "button-group",
                            name: "position",
                            value: "right",
                            size: "sm",
                            mode: "inline",
                            className: "block",
                            options: [{
                                label: "å·¦",
                                value: "left"
                            },
                            {
                                label: "ä¸Š",
                                value: "top"
                            },
                            {
                                label: "å³",
                                value: "right"
                            },
                            {
                                label: "ä¸‹",
                                value: "bottom"
                            }],
                            description: "å®šä¹‰å¼¹æ¡†ä»Žä»€ä¹ˆä½ç½®å‘¼å‡º"
                        },
                        {
                            type: "switch",
                            label: "æ•°æ®æ˜ å°„",
                            name: "data",
                            mode: "inline",
                            className: "w-full m-b-xs",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? {
                                    "&": "$$"
                                }: null
                            }
                        },
                        {
                            type: "tpl",
                            visibleOn: "!this.data",
                            tpl: '<p class="text-sm text-muted">å½“æ²¡å¼€å¯æ•°æ®æ˜ å°„æ—¶ï¼Œå¼¹æ¡†ä¸­é»˜è®¤ä¼šæ‹¥æœ‰è§¦å‘æ‰“å¼€å¼¹æ¡†æŒ‰é’®æ‰€åœ¨çŽ¯å¢ƒçš„æ‰€æœ‰æ•°æ®ã€‚</p>'
                        },
                        {
                            type: "combo",
                            syncDefaultValue: !1,
                            name: "data",
                            visibleOn: "this.data",
                            descriptionClassName: "help-block text-xs m-b-none",
                            description: '<p>å½“å¼€å¯æ•°æ®æ˜ å°„æ—¶ï¼Œå¼¹æ¡†ä¸­çš„æ•°æ®åªä¼šåŒ…å«è®¾ç½®çš„éƒ¨åˆ†ï¼Œè¯·ç»‘å®šæ•°æ®ã€‚å¦‚ï¼š<code>{"a": "\\${a}", "b": 2}</code></p><p>å¦‚æžœå¸Œæœ›åœ¨é»˜è®¤çš„åŸºç¡€ä¸Šå®šåˆ¶ï¼Œè¯·å…ˆæ·»åŠ ä¸€ä¸ª Key ä¸º `&` Value ä¸º `\\$$` ä½œä¸ºç¬¬ä¸€è¡Œã€‚</p><div>å½“å€¼ä¸º <code>__undefined</code>æ—¶ï¼Œè¡¨ç¤ºåˆ é™¤å¯¹åº”çš„å­—æ®µï¼Œå¯ä»¥ç»“åˆ<code>{"&": "\\$$"}</code>æ¥è¾¾åˆ°é»‘åå•æ•ˆæžœã€‚</div>',
                            multiple: !0,
                            pipeIn: function(e) {
                                if (!o.isObject(e)) return e;
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    t.push({
                                        key: a || "",
                                        value: "string" == typeof e[a] ? e[a] : JSON.stringify(e[a])
                                    })
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var t = {};
                                return e.forEach((function(e) {
                                    var a = e.key || "",
                                    l = e.value;
                                    try {
                                        l = JSON.parse(l)
                                    } catch(e) {}
                                    t[a] = l
                                })),
                                t
                            },
                            controls: [{
                                placeholder: "Key",
                                type: "text",
                                unique: !0,
                                name: "key"
                            },
                            {
                                placeholder: "Value",
                                type: "text",
                                name: "value"
                            }]
                        },
                        {
                            type: "switch",
                            name: "closeOnOutside",
                            label: "ç‚¹å‡»å¤–éƒ¨å…³é—­å¼¹æ¡†",
                            mode: "inline",
                            className: "block"
                        },
                        {
                            label: "æŒ‰ Esc å¯å…³é—­ï¼Ÿ",
                            type: "switch",
                            name: "closeOnEsc",
                            mode: "inline",
                            className: "block"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "å°ºå¯¸",
                            type: "button-group",
                            name: "size",
                            size: "sm",
                            mode: "inline",
                            className: "block",
                            options: [{
                                label: "è¶…å°",
                                value: "xs"
                            },
                            {
                                label: "å°",
                                value: "sm"
                            },
                            {
                                label: "ä¸­",
                                value: "md"
                            },
                            {
                                label: "å¤§",
                                value: "lg"
                            },
                            {
                                label: "è¶…å¤§",
                                value: "xl"
                            }]
                        },
                        {
                            type: "switch",
                            name: "overlay",
                            label: "æ˜¯å¦æ˜¾ç¤ºè’™å±‚",
                            mode: "inline",
                            className: "block",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            type: "switch",
                            name: "resizable",
                            label: "å¯æ‹‰æ‹½",
                            mode: "inline",
                            className: "block",
                            pipeIn: r.defaultValue(!1),
                            description: "å®šä¹‰å¼¹æ¡†æ˜¯å¦å¯æ‹‰æ‹½è°ƒæ•´å¤§å°"
                        },
                        r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            label: "bodyClassName ç±»å",
                            name: "bodyClassName"
                        })]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.pickChild = function(e) {
                var t = this.context.editor,
                a = this.props,
                l = a.$path,
                i = a.$$id,
                n = a.actions,
                o = function(a) {
                    var l, n = t.get(i)[e]; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(s.JSONPipeIn(a)),
                    t.update(i, ((l = {})[e] = n, l))
                };
                if ("actions" === e) return o(n && Array.isArray(n) && n.some((function(e) {
                    return "confirm" === e.actionType
                })) ? {
                    type: "button",
                    label: "å–æ¶ˆ",
                    actionType: "cancel"
                }: {
                    type: "button",
                    label: "ç¡®è®¤",
                    actionType: "confirm",
                    level: "primary"
                });
                t.pickRenderer(l + "/" + e, "", "", o)
            },
            t.prototype.renderRenderer = function(e) {
                var t = this.props.$$id,
                a = this.context.editorNode;
                return ! t || a && "global" !== a.id ? i.
            default.createElement(this.Renderer, l.__assign({},
                e, {
                    ref: this.childRef
                })) : i.
            default.createElement(this.Renderer, l.__assign({},
                e, {
                    wrapperComponent: m,
                    onClose: o.noop,
                    ref: this.childRef
                }))
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !("action" === (a = "actions" === a ? "action": a) && !~ ["button", "submit", "reset"].indexOf(t)) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderChild = function(e, t, a) {
                return (0, this.props.render)(e, t, l.__assign(l.__assign({},
                a), {
                    $editor: this,
                    regionRef: this.regionRef
                }))
            },
            t.prototype.render = function() {
                var t = this.props,
                a = t.$$id,
                i = (t.activeId, t.hoverId, l.__rest(t, ["$$id", "activeId", "hoverId"])),
                n = this.context.editorNode;
                return ! a || n && "global" !== n.id ? this.renderRenderer(i) : e.prototype.render.call(this)
            },
            t = l.__decorate([n.Editor("drawer", {
                type: "drawer",
                $schema: "https://isuda.baidu.com/schemas/DrawerSchema.json"
            },
            {
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || "number" == typeof e[1]) return this.super.apply(this, e);
                    var l = this.props.regionRef;
                    return i.
                default.createElement(c.
                default, {
                        key: e[1],
                        ref: function(e) {
                            return l("body", e)
                        },
                        name: "body",
                        label: "å†…å®¹åŒº",
                        hostId: a.props.$$id
                    },
                    this.super.apply(this, e))
                },
                renderFooter: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.regionRef,
                    n = this.super.apply(this, e);
                    return Array.isArray(n) || n ? i.
                default.createElement(c.
                default, {
                        ref: function(e) {
                            return l("actions", e)
                        },
                        name: "actions",
                        label: "æŒ‰é’®é›†åˆ",
                        hostId: a.props.$$id
                    },
                    n) : n
                }
            })], t)
        } (l.__importDefault(a(9)).
    default);
        t.DrawerEditor = d;
        var m = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e),
            t.prototype.render = function() {
                var e = this.props.children;
                return i.
            default.createElement("div", {
                    className: "b-a r h-full ae-Drawer-preview"
                },
                e)
            },
            t
        } (i.
    default.Component)
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.DropDownButtonEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = l.__importDefault(a(10)),
        p = l.__importDefault(a(9)),
        c = a(4),
        d = function(e) {
            function t(t, a) {
                var l = e.call(this, t, a) || this;
                return l.containers = ["buttons"],
                l.settingsSchema = {
                    title: "æŒ‰é’®ç»„é…ç½®",
                    controls: l.props.$$contentMode ? [{
                        children: i.
                    default.createElement("div", null, i.
                    default.createElement(o.Button, {
                            block: !0,
                            level: "info",
                            size: "sm",
                            className: "m-t-sm m-b-sm",
                            onClick: l.handleAdd.bind(l)
                        },
                        "æ·»åŠ èœå•"))
                    }] : [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(o.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: l.handleEditDropDown.bind(l)
                            },
                            "é…ç½®ä¸‹æ‹‰è¯¦æƒ…"))
                        },
                        {
                            label: "åç§°",
                            type: "text",
                            name: "label"
                        },
                        {
                            name: "closeOnOutside",
                            label: "ç‚¹å‡»å¤–éƒ¨å…³é—­",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            pipeIn: r.defaultValue(!0)
                        },
                        {
                            name: "closeOnClick",
                            label: "ç‚¹å‡»å†…å®¹å…³é—­",
                            type: "switch",
                            mode: "inline",
                            className: "block"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [r.getSchemaTplByName("size"), {
                            label: "å±•ç¤ºæ ·å¼",
                            type: "button-group",
                            size: "xs",
                            name: "level",
                            btnActiveClassName: "active",
                            clearable: !1,
                            options: [{
                                label: "é»˜è®¤",
                                value: "default",
                                level: "default"
                            },
                            {
                                label: "æ— ",
                                value: "link",
                                level: "link"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "primary",
                                level: "primary"
                            },
                            {
                                label: "æç¤º",
                                value: "info",
                                level: "info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "success",
                                level: "success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "warning",
                                level: "warning"
                            },
                            {
                                label: "ä¸¥é‡",
                                value: "danger",
                                level: "danger"
                            }]
                        },
                        r.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("disabled"), r.getSchemaTplByName("visible")]
                    }])]
                },
                l.tipName = "DropDown Button",
                l.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-paste",
                    tooltip: "ç²˜è´´",
                    id: "paste",
                    test: function(e) {
                        var t = e.clipboard;
                        return t && l.acceptChild(t.type, "buttons")
                    }
                },
                l.props.$$contentMode ? {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ èœå•",
                    id: "add"
                }: {
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®ä¸‹æ‹‰æŒ‰é’®è¯¦æƒ…",
                    id: "details"
                }),
                l
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                return "details" === t ? this.handleEditDropDown() : "add" === t ? this.handleAdd() : ("paste" === t && this.addChild("buttons", this.props.clipboard), void e.prototype.handleToolbarAction.call(this, t))
            },
            t.prototype.handleAdd = function() {
                this.pickChild("buttons", "buttons", void 0, ["button", "divider"])
            },
            t.prototype.handleEditDropDown = function() {
                var e = this.context.editor,
                t = this.props.$$id,
                a = c.JSONPipeOut(e.get(t).buttons);
                e.openDialog("é…ç½®ä¸‹æ‹‰æŒ‰é’®è¯¦æƒ…", {
                    mode: "normal",
                    type: "form",
                    data: {
                        buttons: a
                    },
                    controls: [{
                        name: "buttons",
                        children: function(t) {
                            var a = t.value,
                            l = t.onChange;
                            return i.
                        default.createElement(s.
                        default, {
                                previewClassName: "wrapper-xs",
                                autoFocus: !0,
                                value: {
                                    buttons: a,
                                    type: "dropdown-button"
                                },
                                onChange: function(e) {
                                    return l(e.buttons)
                                },
                                schemaFilter: e.schemaFilter,
                                theme: e.theme,
                                $$contentMode: !0
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        buttons: c.JSONPipeIn(a.buttons)
                    })
                }), "xl")
            },
            t.prototype.renderRenderer = function(t) {
                if (this.props.$$contentMode) {
                    var a = this.props.render,
                    n = this.props.buttons;
                    return i.
                default.createElement("ul", {
                        key: t.key,
                        "data-editor-id": this.props.$$id,
                        className: "dropdown-menu preview"
                    },
                    Array.isArray(n) ? n.map((function(e, t) {
                        return i.
                    default.createElement("li", {
                            key: t
                        },
                        a("button/" + t, l.__assign(l.__assign({},
                        e), {
                            isMenuItem: !0
                        })))
                    })) : null)
                }
                return e.prototype.renderRenderer.call(this, t)
            },
            t = l.__decorate([n.Editor("dropdown-button", {
                name: "ä¸‹æ‹‰æŒ‰é’®",
                tags: ["æŒ‰é’®"],
                icon: "fa fa-stop-circle",
                type: "dropdown-button",
                description: "ä¸‹æ‹‰æŒ‰é’®ï¼Œæ›´å¤šçš„æŒ‰é’®é€šè¿‡ç‚¹å‡»åŽå±•ç¤ºå¼€æ¥ã€‚",
                previewSchema: {
                    type: "dropdown-button",
                    label: "ä¸‹æ‹‰æŒ‰é’®",
                    closeOnOutside: !1,
                    buttons: [{
                        type: "button",
                        label: "æŒ‰é’®"
                    }]
                },
                scaffold: {
                    type: "dropdown-button",
                    label: "ä¸‹æ‹‰æŒ‰é’®",
                    buttons: [{
                        type: "button",
                        label: "æŒ‰é’®1",
                        actionType: "dialog",
                        dialog: {
                            title: "ç³»ç»Ÿæç¤º",
                            body: "å¯¹ä½ ç‚¹å‡»äº†"
                        }
                    },
                    {
                        type: "button",
                        label: "æŒ‰é’®2",
                        actionType: "dialog",
                        dialog: {
                            title: "ç³»ç»Ÿæç¤º",
                            body: "å¯¹ä½ ç‚¹å‡»äº†"
                        }
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/DropdownButtonSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (p.
    default);
        t.DropDownButtonEditor = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.EachEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(5),
        s = a(2),
        p = a(4),
        c = a(4),
        d = l.__importDefault(a(10)),
        m = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                return n.tipName = "Each",
                n.settingsSchema = {
                    title: "å¾ªçŽ¯æŽ§ä»¶é…ç½®",
                    controls: n.props.$$contentMode ? [{
                        children: i.
                    default.createElement(r.Button, {
                            size: "sm",
                            level: "info",
                            className: "m-t-sm m-b-sm",
                            onClick: function() {
                                n.pickChild("item/0", "items")
                            },
                            block: !0
                        },
                        "æ–°å¢žå†…å®¹")
                    }] : s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "text",
                            name: "name",
                            label: "å­—æ®µå",
                            description: "æŒ‡å®šå˜é‡ï¼Œç›®æ ‡å¯ä»¥æ˜¯æ•°ç»„æˆ–è€…å¯¹è±¡"
                        },
                        {
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                level: "danger",
                                className: "m-b",
                                onClick: n.handleEditItem.bind(n),
                                block: !0
                            },
                            "é…ç½®å•æ¡è¯¦æƒ…")
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [s.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [s.getSchemaTplByName("ref"), s.getSchemaTplByName("visible")]
                    }])
                },
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                n.props.$$contentMode || n.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®å•æ¡è¯¦æƒ…",
                    id: "edit-contents"
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                c.anyChanged(["items", "$$contentMode"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.handleToolbarAction = function(t) {
                return "edit-contents" === t ? this.handleEditItem() : ("add" === t && this.handleAdd(), e.prototype.handleToolbarAction.call(this, t))
            },
            t.prototype.modifyProps = function(e, t) {
                var a = this;
                void 0 === t && (t = this.context);
                var l = e.items,
                i = e.$$contentMode,
                n = e.$$id,
                o = t.editor.getActiveId();
                return i ? o === n && (l && !Array.isArray(l) && (l = [l]), l = this.attachAddBtn(l, [this.renderButton((function(e) {
                    e.stopPropagation(),
                    e.preventDefault(),
                    a.pickChild("item/0", "items")
                }), "åœ¨å†…å®¹åŒºæ–°å¢žå†…å®¹")])) : l = Array.isArray(l) ? l.map((function(e) {
                    return p.JSONPipeOut(e)
                })) : p.JSONPipeOut(l),
                {
                    items: l
                }
            },
            t.prototype.handleAdd = function() {
                this.pickChild("body", "items", void 0, void 0, !0)
            },
            t.prototype.handleEditItem = function() {
                var e = this.context.editor,
                t = this.props,
                a = t.$$id,
                l = t.data,
                n = t.value,
                o = p.JSONPipeOut(e.get(a)),
                s = o.items,
                m = o.name,
                u = void 0 !== n ? c.isObject(n) ? Object.keys(n).map((function(e) {
                    return {
                        key: e,
                        value: n[e]
                    }
                })) : Array.isArray(n) ? n: [] : r.resolveVariable(m, l) || [];
                e.openDialog("é…ç½®å•æ¡è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        items: s
                    },
                    controls: [{
                        name: "items",
                        children: function(t) {
                            var a = t.value,
                            l = t.onChange;
                            return i.
                        default.createElement(d.
                        default, {
                                autoFocus: !0,
                                previewClassName: "padder-md p-t-xs",
                                value: {
                                    type: "each",
                                    name: m,
                                    items: a || []
                                },
                                onChange: function(e) {
                                    return l(e.items)
                                },
                                previewProps: {
                                    onChange: c.noop,
                                    value: [u[0] || {}]
                                },
                                $$contentMode: !0,
                                $$codeEditable: !1,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(t) {
                    return e.update(a, {
                        items: p.JSONPipeIn(t.items)
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("each", {
                name: "å¾ªçŽ¯ Each",
                description: "åŠŸèƒ½æ¸²æŸ“å™¨ï¼Œå¯ä»¥åŸºäºŽçŽ°æœ‰å˜é‡å¾ªçŽ¯è¾“å‡ºæ¸²æŸ“å™¨ã€‚",
                tags: ["åŠŸèƒ½"],
                type: "each",
                previewSchema: {
                    type: "each",
                    name: "arr",
                    value: [1, 2, 3],
                    items: {
                        type: "tpl",
                        tpl: "å†…å®¹<%= data.item %> "
                    }
                },
                scaffold: {
                    type: "each",
                    name: "arr",
                    value: [1],
                    items: {
                        type: "tpl",
                        tpl: "å†…å®¹"
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/EachSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (o.
    default);
        t.EachEditor = m
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.GridEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = l.__importDefault(a(11)),
        p = function(e) {
            function t(t, a) {
                var l = e.call(this, t, a) || this;
                return l.tipName = "Grid",
                l.settingsSchema = {
                    title: "Grid é…ç½®",
                    controls: [{
                        children: i.
                    default.createElement(o.Button, {
                            level: "info",
                            size: "sm",
                            className: "m-t-sm m-b-sm",
                            onClick: l.handleAdd.bind(l),
                            block: !0
                        },
                        "æ–°å¢žä¸€åˆ—")
                    },
                    {
                        name: "columns",
                        type: "combo",
                        label: "åˆ—å®½åº¦é…ç½®",
                        multiple: !0,
                        removable: !0,
                        addable: !1,
                        multiLine: !0,
                        minLength: 1,
                        controls: [{
                            type: "switch",
                            name: "mode",
                            label: "è‡ªåŠ¨åˆ†é…",
                            mode: "inline",
                            className: "block",
                            pipeIn: r.defaultValue(!0),
                            columnClassName: "w-xs v-middle"
                        },
                        {
                            type: "tabs",
                            visibleOn: "!data.mode",
                            tabs: [{
                                title: "xs",
                                controls: [{
                                    type: "switch",
                                    name: "xsHidden",
                                    label: "æ˜¯å¦éšè—",
                                    mode: "inline",
                                    className: "block",
                                    pipeIn: r.defaultValue("false")
                                },
                                {
                                    label: "å®½åº¦å æ¯”",
                                    type: "range",
                                    name: "xs",
                                    min: 1,
                                    max: 12,
                                    step: 1,
                                    pipeIn: r.defaultValue(6)
                                },
                                {
                                    label: "åç§»é‡",
                                    type: "range",
                                    name: "xsOffset",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å·¦çš„è·ç¦»",
                                    type: "range",
                                    name: "xsPull",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å³çš„è·ç¦»",
                                    type: "range",
                                    name: "xsPush",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                }]
                            },
                            {
                                title: "sm",
                                controls: [{
                                    type: "switch",
                                    name: "xsHidden",
                                    label: "æ˜¯å¦éšè—",
                                    mode: "inline",
                                    className: "block",
                                    pipeIn: r.defaultValue("false")
                                },
                                {
                                    label: "å®½åº¦å æ¯”",
                                    type: "range",
                                    name: "sm",
                                    min: 1,
                                    max: 12,
                                    step: 1,
                                    pipeIn: r.defaultValue(6)
                                },
                                {
                                    label: "åç§»é‡",
                                    type: "range",
                                    name: "smOffset",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å·¦çš„è·ç¦»",
                                    type: "range",
                                    name: "smPull",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å³çš„è·ç¦»",
                                    type: "range",
                                    name: "smPush",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                }]
                            },
                            {
                                title: "md",
                                controls: [{
                                    type: "switch",
                                    name: "mdHidden",
                                    label: "æ˜¯å¦éšè—",
                                    mode: "inline",
                                    className: "block",
                                    pipeIn: r.defaultValue("false")
                                },
                                {
                                    label: "å®½åº¦å æ¯”",
                                    type: "range",
                                    name: "md",
                                    min: 1,
                                    max: 12,
                                    step: 1,
                                    pipeIn: r.defaultValue(6)
                                },
                                {
                                    label: "åç§»é‡",
                                    type: "range",
                                    name: "mdOffset",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å·¦çš„è·ç¦»",
                                    type: "range",
                                    name: "mdPull",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å³çš„è·ç¦»",
                                    type: "range",
                                    name: "mdPush",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                }]
                            },
                            {
                                title: "lg",
                                controls: [{
                                    type: "switch",
                                    name: "lgHidden",
                                    label: "æ˜¯å¦éšè—",
                                    mode: "inline",
                                    className: "block",
                                    pipeIn: r.defaultValue("false")
                                },
                                {
                                    label: "å®½åº¦å æ¯”",
                                    type: "range",
                                    name: "lg",
                                    min: 1,
                                    max: 12,
                                    step: 1,
                                    pipeIn: r.defaultValue(6)
                                },
                                {
                                    label: "åç§»é‡",
                                    type: "range",
                                    name: "lgOffset",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å·¦çš„è·ç¦»",
                                    type: "range",
                                    name: "lgPull",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                },
                                {
                                    label: "é å³çš„è·ç¦»",
                                    type: "range",
                                    name: "lgPush",
                                    min: 0,
                                    max: 11,
                                    step: 1
                                }]
                            }]
                        }]
                    },
                    r.getSchemaTplByName("className"), {
                        name: "columns",
                        label: "å„åˆ— CSS ç±»å",
                        type: "combo",
                        addable: !1,
                        removable: !1,
                        multiple: !0,
                        controls: [r.getSchemaTplByName("className", {
                            label: !1,
                            name: "columnClassName"
                        })]
                    }]
                },
                l.containers = ["columns"],
                l.containerLabels = ["å†…å®¹åŒº"],
                l.dropable = !0,
                l.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ ä¸€åˆ—",
                    id: "add"
                }),
                l.acceptChild = l.acceptChild.bind(l),
                l.handleAdd = l.handleAdd.bind(l),
                l
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                if ("add" === t) return this.handleAdd();
                "paste" === t && this.addChild("columns", this.props.clipboard),
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleAdd = function() {
                this.pickChild("columns", "columns", void 0, this.acceptChild, !0)
            },
            t.prototype.acceptChild = function(t, a, l) {
                void 0 === a && (a = "body");
                for (var i = this.context.editorNode; i && i.component instanceof s.
            default;) i = i.component.context.editorNode;
                return i && i.component && i.component.acceptChild ? i.component.acceptChild(t, a, l) : e.prototype.acceptChild.call(this, t, a, l)
            },
            t = l.__decorate([n.Editor("grid", {
                name: "Gridæ ¼å­å¸ƒå±€",
                description: "ç”¨æ¥åšæ ¼å­å¸ƒå±€çš„ï¼Œå°†ä¸€è¡Œåˆ†æˆ12ç­‰ä»½ï¼Œå¯ä»¥ç»™æ¯ä¸€åˆ—è®¾ç½®å æ¯”ã€‚",
                type: "grid",
                tags: ["å®¹å™¨"],
                icon: "fa fa-columns",
                previewSchema: {
                    type: "grid",
                    columns: [{
                        type: "tpl",
                        tpl: "å æ¯” 4/12",
                        inline: !1,
                        sm: 4,
                        md: 4,
                        className: "bg-primary"
                    },
                    {
                        type: "tpl",
                        tpl: "å æ¯” 8/12",
                        className: "bg-info",
                        inline: !1,
                        sm: 8,
                        md: 8
                    }]
                },
                scaffold: {
                    type: "grid",
                    columns: [{
                        type: "tpl",
                        tpl: "ç¬¬ä¸€åˆ—"
                    },
                    {
                        type: "tpl",
                        tpl: "ç¬¬äºŒåˆ—"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/GridSchema.json"
            },
            {
                renderColumns: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.regionRef;
                    return i.
                default.createElement(s.
                default, {
                        ref: function(e) {
                            return l("columns", e)
                        },
                        name: "columns",
                        label: "å†…å®¹åŒº",
                        hostId: a.props.$$id
                    },
                    this.super.apply(this, e))
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (l.__importDefault(a(9)).
    default);
        t.GridEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.HBoxEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = l.__importDefault(a(9)),
        p = l.__importDefault(a(11)),
        c = function(e) {
            function t(t, a) {
                var l = e.call(this, t, a) || this;
                return l.tipName = "HBox",
                l.settingsSchema = {
                    title: "HBoxé…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(o.Button, {
                                level: "info",
                                size: "sm",
                                className: "m-b-sm",
                                block: !0,
                                onClick: l.handleAdd.bind(l)
                            },
                            "æ–°å¢žä¸€åˆ—"))
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "columns",
                            label: "å„åˆ— CSS ç±»å",
                            type: "combo",
                            addable: !1,
                            removable: !1,
                            multiple: !0,
                            controls: [r.getSchemaTplByName("className", {
                                name: "columnClassName",
                                labelRemark: "",
                                label: ""
                            })]
                        },
                        r.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])
                },
                l.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-paste",
                    tooltip: "ç²˜è´´",
                    id: "paste",
                    test: function(e) {
                        var t = e.clipboard;
                        return t && l.acceptChild(t.type, "columns")
                    }
                },
                {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ ä¸€åˆ—",
                    id: "add"
                }),
                l
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                if ("add" === t) return this.handleAdd();
                "paste" === t && this.addChild("columns", this.props.clipboard),
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleAdd = function() {
                this.pickChild("columns", "columns", void 0, this.acceptChild)
            },
            t.prototype.acceptChild = function(t, a, l) {
                void 0 === a && (a = "body");
                for (var i = this.context.editorNode; i && i.component instanceof p.
            default;) i = i.component.context.editorNode;
                return i && i.component && i.component.acceptChild ? i.component.acceptChild(t, a, l) : e.prototype.acceptChild.call(this, t, a, l)
            },
            t = l.__decorate([n.Editor("hbox", {
                name: "å·¦å³å¸ƒå±€",
                type: "hbox",
                icon: "fa fa-columns",
                tags: ["å®¹å™¨"],
                description: "ç”¨æ¥å®žçŽ°å·¦å³æŽ’ç‰ˆå¸ƒå±€ï¼Œé»˜è®¤å¹³å‡åˆ†é…ï¼Œå¯ä»¥é€šè¿‡ columnClassName é…ç½®æŸåˆ—çš„å®½åº¦ã€‚",
                previewSchema: {
                    type: "hbox",
                    columns: [{
                        type: "tpl",
                        tpl: "å›ºå®šå®½åº¦<br />w-xs",
                        columnClassName: "bg-primary w-xs"
                    },
                    {
                        type: "tpl",
                        tpl: "è‡ªåŠ¨å¡«æ»¡",
                        columnClassName: "bg-info"
                    }]
                },
                scaffold: {
                    type: "hbox",
                    columns: [{
                        type: "tpl",
                        tpl: "ç¬¬ä¸€åˆ—"
                    },
                    {
                        type: "tpl",
                        tpl: "ç¬¬äºŒåˆ—"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/HBoxSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (s.
    default);
        t.HBoxEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.IFrameEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(2),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "iFrame",
                t.settingsSchema = {
                    title: "iFrameé…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "src",
                            label: "é¡µé¢åœ°å€",
                            type: "text",
                            description: ""
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "width",
                            label: "iFrame å®½åº¦",
                            type: "text",
                            pipeIn: r.defaultValue("100%"),
                            pipeOut: r.valuePipeOut
                        },
                        {
                            name: "height",
                            label: "iFrame é«˜åº¦",
                            type: "text",
                            pipeOut: r.valuePipeOut
                        },
                        r.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(t) {
                var a = this.props.$$id;
                return i.
            default.createElement("div", {
                    className: "ae-Widget-iframe",
                    "data-editor-id": a,
                    key: t.key
                },
                e.prototype.renderRenderer.call(this, t))
            },
            t = l.__decorate([n.Editor("iframe", {
                name: "iFrame",
                type: "iframe",
                description: "å¯ä»¥ç”¨æ¥åµŒå…¥çŽ°æœ‰é¡µé¢ã€‚",
                previewSchema: {
                    type: "tpl",
                    tpl: "iFrame"
                },
                scaffold: {
                    type: "iframe",
                    src: "//www.baidu.com"
                },
                $schema: "https://isuda.baidu.com/schemas/IFrameSchema.json"
            })], t)
        } (o.
    default);
        t.IFrameEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ImageEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Image",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "å›¾ç‰‡é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            name: "title",
                            type: "text",
                            label: "å›¾ç‰‡æ ‡é¢˜"
                        },
                        {
                            name: "description",
                            type: "text",
                            label: "å›¾ç‰‡æè¿°"
                        },
                        {
                            name: "defaultImage",
                            pipeIn: o.defaultValue("https://fex.bdstatic.com/n/static/amis/renderers/crud/field/placeholder_cfad9b1.png"),
                            label: "é»˜è®¤å›¾ç‰‡åœ°å€",
                            type: "text"
                        },
                        t.isUnderField ? null: {
                            name: "src",
                            type: "text",
                            label: "å›¾ç‰‡åœ°å€, æ”¯æŒå–å˜é‡ã€‚",
                            description: "å¦‚æžœå·²ç»‘å®šå­—æ®µåï¼Œå¯ä»¥ä¸ç”¨è®¾ç½®"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "className",
                            label: "å±•ç¤ºæ ·å¼",
                            type: "select",
                            pipeIn: function(e) {
                                return /\b(thumb\-(?:sm|md|lg|xl))\b/.test(e) ? RegExp.$1: void 0 === e ? "thumb-lg": ""
                            },
                            pipeOut: function(e, t) {
                                return t ? t.replace(/\b(thumb\-(?:sm|md|lg|xl))\b/, e) : e
                            },
                            options: [{
                                label: "å°ç¼©ç•¥å›¾",
                                value: "thumb-sm"
                            },
                            {
                                label: "ä¸­ç¼©ç•¥å›¾",
                                value: "thumb-md"
                            },
                            {
                                label: "å¤§ç¼©ç•¥å›¾",
                                value: "thumb-lg"
                            },
                            {
                                label: "è¶…å¤§ç¼©ç•¥å›¾",
                                value: "thumb-xl"
                            },
                            {
                                label: "æ— ",
                                value: ""
                            }]
                        },
                        o.getSchemaTplByName("className", {
                            autoComplete: !1,
                            pipeIn: o.defaultValue("thumb-lg")
                        }), o.getSchemaTplByName("className", {
                            name: "imageClassName",
                            label: "å›¾ç‰‡ CSS ç±»å",
                            pipeIn: o.defaultValue("r")
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("image", {
                name: "å›¾ç‰‡å±•ç¤º",
                tags: ["å±•ç¤º"],
                description: "å¯ä»¥ç”¨æ¥å±•ç¤ºä¸€å¼ å›¾ç‰‡ï¼Œæ”¯æŒé™æ€è®¾ç½®å›¾ç‰‡åœ°å€ï¼Œä¹Ÿå¯ä»¥é…ç½® <code>name</code> ä¸Žå˜é‡å…³è”ã€‚",
                previewSchema: {
                    type: "image",
                    className: "w-sm inline",
                    imageClassName: "r w-full",
                    src: "https://fex.bdstatic.com/n/static/amis/renderers/crud/field/placeholder_cfad9b1.png"
                },
                type: "image",
                $schema: "https://isuda.baidu.com/schemas/ImageSchema.json"
            })], t)
        } (n.
    default);
        t.ImageEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.JsonEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = a(6),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Json",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "Jsoné…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: r([t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            name: "levelExpand",
                            type: "number",
                            label: "é»˜è®¤å±•å¼€çº§åˆ«",
                            pipeIn: o.defaultValue(1)
                        }])
                    },
                    {
                        title: "å¤–è§‚",
                        controls: r([o.getSchemaTplByName("className")])
                    },
                    {
                        title: "å…¶ä»–",
                        controls: r([o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")])
                    }])]
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("json", {
                name: "JSONå±•ç¤º",
                description: "ç”¨æ¥å±•ç¤º JSON æ•°æ®ã€‚",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "json",
                    name: "json",
                    value: {
                        a: 1,
                        b: {
                            c: 2
                        }
                    }
                },
                type: "json",
                $schema: "https://isuda.baidu.com/schemas/JsonSchema.json"
            })], t)
        } (n.
    default);
        t.JsonEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.LinkEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Link",
                t.settingsSchema = {
                    title: "é“¾æŽ¥é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "href",
                            type: "text",
                            label: "ç›®æ ‡åœ°å€, æ”¯æŒå–å˜é‡ã€‚",
                            description: "å¦‚æžœå·²ç»‘å®šå­—æ®µåï¼Œå¯ä»¥ä¸ç”¨è®¾ç½®"
                        },
                        {
                            name: "body",
                            type: "text",
                            label: "å†…å®¹",
                            description: "ä¸å¡«å†™æ—¶ï¼Œè‡ªåŠ¨ä½¿ç”¨ç›®æ ‡åœ°å€å€¼"
                        },
                        {
                            name: "blank",
                            type: "switch",
                            label: "æ˜¯å¦æ–°çª—å£æ‰“å¼€",
                            mode: "inline",
                            className: "w-full"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className", {
                            autoComplete: !1
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("link", {
                name: "é“¾æŽ¥",
                icon: "fa fa-link",
                description: "ç”¨æ¥å±•ç¤ºæ–‡å­—é“¾æŽ¥",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "link",
                    value: "http://www.baidu.com/"
                },
                type: "link",
                $schema: "https://isuda.baidu.com/schemas/LinkSchema.json"
            })], t)
        } (n.
    default);
        t.LinkEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ListItemFieldEditor = t.ListItemEditor = t.ListEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(5),
        s = a(2),
        p = a(4),
        c = a(4),
        d = l.__importDefault(a(10)),
        m = a(12),
        u = a(17),
        h = function(e) {
            function t(t, a) {
                var n = e.call(this, t, a) || this;
                return n.tipName = "List",
                n.isCRUDBody = /\/crud\/body\/list$/.test(n.props.$path),
                n.isUnderField = /\/field\/\w+$/.test(n.props.$path),
                n.dropable = !0,
                n.containers = ["header", "footer"],
                n.settingsSchema = {
                    title: "åˆ—è¡¨é…ç½®",
                    controls: s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [n.isCRUDBody ? {
                            type: "tpl",
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰é€‰ä¸­ä¸º CRUD ä¸­çš„ List éƒ¨åˆ†ï¼Œé€‰ä¸­çˆ¶çº§ CRUD è¿˜æœ‰æ›´å¤šé…ç½®ï¼Œå¯ä»¥åœ¨å¯¼èˆªä¸­åˆ‡æ¢ï¼Œä¹Ÿå¯ä»¥åœ¨ List å³é¡¶å·¥å…·æ ç‚¹å‡»ã€é€‰æ‹©ä¸Šå±‚ã€‘æˆ–è€…æŒ‰å¿«æ·é”®ã€shift + â†‘ã€‘åˆ‡æ¢ã€‚</p>"
                        }: null, n.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            type: "divider"
                        },
                        {
                            children: i.
                        default.createElement("div", {
                                className: "m-b"
                            },
                            i.
                        default.createElement(r.Button, {
                                level: "success",
                                size: "sm",
                                block: !0,
                                onClick: function() {
                                    return n.handleEditlistItem()
                                }
                            },
                            "é…ç½®å•é¡¹ä¿¡æ¯"))
                        },
                        {
                            type: "divider"
                        },
                        {
                            name: "title",
                            type: "text",
                            label: "æ ‡é¢˜"
                        },
                        n.isCRUDBody ? null: {
                            name: "source",
                            type: "text",
                            label: "æ•°æ®æº",
                            pipeIn: s.defaultValue("${items}"),
                            description: "ç»‘å®šå½“å‰çŽ¯å¢ƒå˜é‡",
                            test: !n.isCRUDBody
                        },
                        {
                            name: "placeholder",
                            pipeIn: s.defaultValue("æ²¡æœ‰æ•°æ®"),
                            type: "text",
                            label: "æ— æ•°æ®æç¤º"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "showHeader",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦æ˜¾ç¤ºå¤´éƒ¨",
                            pipeIn: s.defaultValue(!0)
                        },
                        {
                            name: "showFooter",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦æ˜¾ç¤ºåº•éƒ¨",
                            pipeIn: s.defaultValue(!0)
                        },
                        s.getSchemaTplByName("className", {
                            label: "CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "å¤´éƒ¨ CSS ç±»å"
                        }), s.getSchemaTplByName("className", {
                            name: "footerClassName",
                            label: "åº•éƒ¨ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [s.getSchemaTplByName("ref"), s.getSchemaTplByName("visible")]
                    }])
                },
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                t.$$contentMode || n.toolbarBtns.push({
                    icon: "fa fa-expand",
                    tooltip: "é…ç½®å•é¡¹ä¿¡æ¯",
                    placement: "left",
                    id: "edit-contents"
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                p.anyChanged(["header", "footer", "listItem"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                var a = this;
                void 0 === t && (t = this.context);
                var l = e.header,
                n = e.footer,
                o = e.data,
                r = e.listItem,
                s = e.clipboard,
                p = e.$$id,
                d = e.$$contentMode,
                m = t.editor,
                u = m.getActiveId(),
                h = m.getDropId();
                if (d || (r = c.JSONPipeOut(r)), u !== p && h !== p || d) return {
                    header: l,
                    footer: n,
                    data: o,
                    listItem: r
                };
                var b = h === p;
                return {
                    header: l = this.attachAddBtn(l, b ? i.
                default.createElement("span", null) : [s && this.acceptChild(s.type, "header") ? this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.pickChild("header")
                    }), "ç²˜è´´", "fa fa-paste") : null, this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.pickChild("header")
                    }), "åœ¨é¡¶éƒ¨æ–°å¢žå†…å®¹")]),
                    footer: n = this.attachAddBtn(n, b ? i.
                default.createElement("span", null) : [s && this.acceptChild(s.type, "footer") ? this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.addChild("footer", s)
                    }), "ç²˜è´´", "fa fa-paste") : null, this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.pickChild("footer")
                    }), "åœ¨åº•éƒ¨æ–°å¢žå†…å®¹")]),
                    data: o,
                    listItem: r
                }
            },
            t.prototype.handleToolbarAction = function(t) {
                if ("edit-contents" === t) return this.handleEditlistItem();
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleEditlistItem = function() {
                var e, t = this.context.editor,
                a = this.props.$$id,
                n = {};
                this.ref && (e = this.ref.props.store) && e.items[0] && (n = e.items[0].data);
                var o = c.JSONPipeOut(t.get(a).listItem);
                t.openDialog("é…ç½®å•æ¡ä¿¡æ¯", {
                    type: "form",
                    mode: "normal",
                    data: {
                        listItem: o
                    },
                    controls: [{
                        name: "listItem",
                        children: function(e) {
                            var a = e.value,
                            o = e.onChange;
                            return i.
                        default.createElement(d.
                        default, {
                                previewClassName: "wrapper-xs",
                                pathPrefix: "list/body",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "list-item"
                                }),
                                onChange: function(e) {
                                    return o(e)
                                },
                                $$contentMode: !0,
                                data: n,
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(e) {
                    return t.update(a, {
                        listItem: c.JSONPipeIn(e.listItem)
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("list", {
                name: "åˆ—è¡¨",
                type: "list",
                description: "å±•ç¤ºä¸€ä¸ªåˆ—è¡¨ï¼Œå¯ä»¥è‡ªå®šæ ‡é¢˜ã€å‰¯æ ‡é¢˜ï¼Œå†…å®¹åŠæŒ‰é’®ç»„éƒ¨åˆ†ã€‚å½“å‰ç»„ä»¶éœ€è¦é…ç½®æ•°æ®æºï¼Œä¸è‡ªå¸¦æ•°æ®æ‹‰å–ï¼Œè¯·ä¼˜å…ˆä½¿ç”¨ ã€ŒCRUDã€ ç»„ä»¶ã€‚",
                previewSchema: {
                    type: "list",
                    className: "text-left m-b-none",
                    items: [{
                        a: 1,
                        b: 2
                    },
                    {
                        a: 3,
                        b: 4
                    },
                    {
                        a: 5,
                        b: 6
                    }],
                    listItem: {
                        body: [{
                            type: "tpl",
                            tpl: "ç®€å•çš„å±•ç¤ºæ•°æ®ï¼š$a $b"
                        }],
                        actions: [{
                            icon: "fa fa-eye",
                            type: "button"
                        }]
                    }
                },
                icon: "fa fa-list",
                scaffold: {
                    type: "list",
                    listItem: {
                        title: "æ ‡é¢˜"
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/ListSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (l.__importDefault(a(9)).
    default);
        t.ListEditor = h;
        var b = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                return n.tipName = "ListItem",
                n.containers = ["body"],
                n.handleAdd = function() {
                    return n.pickChild("field", "body", (function(e, t, a) {
                        var i = a.get(t).body;
                        i = Array.isArray(i) ? i.concat() : i ? [i] : [],
                        e = c.JSONPipeIn(e),
                        ~ ["html", "tpl", "text", "plain"].indexOf(e.type) && (e = l.__assign(l.__assign({},
                        e), {
                            tpl: ""
                        })),
                        e.label = "å­—æ®µè¯´æ˜Ž",
                        i.push(e),
                        a.update(t, {
                            body: i
                        })
                    }), p.blackList(["form", "button", "submit", "reset", "table", "crud", "divider", "page", "wizard"]), !1, ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"])
                },
                n.settingsSchema = {
                    title: "åˆ—è¡¨å•è¡Œé…ç½®",
                    controls: [s.getSchemaTplByName("tabs", [{
                        title: "åŸºæœ¬",
                        controls: [{
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                className: "m-b-sm",
                                level: "info",
                                block: !0,
                                onClick: function() {
                                    n.pickChild("actions", "actions", void 0, ["button"])
                                }
                            },
                            "æ–°å¢žæŒ‰é’®")
                        },
                        {
                            children: i.
                        default.createElement("div", null, i.
                        default.createElement(r.Button, {
                                level: "primary",
                                size: "sm",
                                block: !0,
                                onClick: n.handleAdd
                            },
                            "æ–°å¢žå†…å®¹"))
                        },
                        {
                            type: "divider"
                        },
                        {
                            name: "title",
                            type: "text",
                            label: "æ ‡é¢˜",
                            descrition: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š ${xxx}"
                        },
                        {
                            name: "subTitle",
                            type: "text",
                            label: "å‰¯æ ‡é¢˜",
                            descrition: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š ${xxx}"
                        },
                        {
                            name: "avatar",
                            type: "text",
                            label: "å›¾ç‰‡åœ°å€",
                            descrition: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š ${xxx}"
                        },
                        {
                            name: "desc",
                            type: "textarea",
                            label: "æè¿°",
                            descrition: "æ”¯æŒæ¨¡æ¿è¯­æ³•å¦‚ï¼š ${xxx}"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [s.getSchemaTplByName("className", {
                            name: "avatarClassName",
                            label: "å›¾ç‰‡ CSS ç±»å",
                            pipeIn: s.defaultValue("thumb-sm avatar m-r")
                        }), s.getSchemaTplByName("className", {
                            name: "titleClassName",
                            label: "æ ‡é¢˜ CSS ç±»å"
                        })]
                    }])]
                },
                n.state = l.__assign({},
                n.modifyProps(t, a)),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                p.anyChanged(["body", "actions"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e)))
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                var a = this;
                void 0 === t && (t = this.context);
                var i = e.body,
                n = e.$$id,
                o = e.clipboard,
                r = t.editor;
                return r.getActiveId() !== n ? {
                    body: i
                }: {
                    body: i = this.attachAddBtn(i, [o && this.acceptChild(o.type, "field") ? this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.addChild("body", o)
                    }), "ç²˜è´´", "fa fa-paste") : null, this.renderButton((function(e) {
                        e.stopPropagation(),
                        e.preventDefault(),
                        a.pickChild("field", "body", (function(e) {
                            var t;
                            e = l.__assign({
                                label: "Label"
                            },
                            e);
                            var a = r.get(n).body;
                            a = Array.isArray(a) ? a.concat() : a ? [a] : [],
                            e = c.JSONPipeIn(e),
                            ~ ["html", "tpl", "text", "plain"].indexOf(e.type) && (e = l.__assign(l.__assign({},
                            e), {
                                tpl: ""
                            })),
                            a.push(e),
                            r.update(n, ((t = {}).body = a, t))
                        }), p.blackList(["form", "button", "submit", "reset", "table", "crud", "divider", "page", "wizard"]))
                    }), "åœ¨å†…å®¹åŒºæ–°å¢žå­—æ®µ")])
                }
            },
            t = l.__decorate([n.Editor("list-item", {
                type: "list-item"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (o.
    default);
        t.ListItemEditor = b;
        var f = Math.round(Date.now() / 1e3),
        y = function(e) {
            function t(t, a) {
                var n = e.call(this, t) || this;
                n.tipName = "Field",
                n.replaceable = !1,
                n.settingsSchema = {
                    title: "å­—æ®µé…ç½®",
                    controls: [s.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "tpl",
                            className: "text-info text-sm",
                            tpl: "<p>æ³¨æ„ï¼šå½“å‰é¢æ¿åªèƒ½é…ç½®å½“å‰å­—æ®µç›¸å…³çš„ä¿¡æ¯ï¼Œå¦‚éœ€é…ç½®å…·ä½“çš„å†…å®¹ï¼Œè¯·åœ¨é¢„è§ˆåŒºæˆ–è€…åœ¨å¯¼èˆªä¸­é€‰æ‹©å­å†…å®¹å†è¿›è¡Œç¼–è¾‘ã€‚</p>"
                        },
                        {
                            name: "label",
                            label: "åç§°ï¼ˆLabelï¼‰",
                            type: "text"
                        },
                        {
                            name: "name",
                            type: "text",
                            label: "ç»‘å®šå­—æ®µå"
                        },
                        {
                            name: "value",
                            label: "è°ƒè¯•å€¼",
                            type: "text",
                            pipeOut: s.valuePipeOut
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            label: "å ä½ç¬¦",
                            pipeIn: s.defaultValue("æ²¡æœ‰æ•°æ®"),
                            description: "å½“æ²¡æœ‰å€¼æ—¶ç”¨è¿™ä¸ªæ¥æ›¿ä»£å±•ç¤º"
                        }]
                    },
                    {
                        title: "é«˜çº§",
                        controls: [{
                            name: "quickEdit",
                            label: "å¯ç”¨å¿«é€Ÿç¼–è¾‘",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.mode",
                            type: "button-group",
                            value: "popOver",
                            label: "å¿«é€Ÿç¼–è¾‘æ¨¡å¼",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            options: [{
                                label: "ä¸‹æ‹‰",
                                value: "popOver"
                            },
                            {
                                label: "å†…åµŒ",
                                value: "inline"
                            }]
                        },
                        {
                            visibleOn: "data.quickEdit",
                            name: "quickEdit.saveImmediately",
                            label: "æ˜¯å¦ç«‹å³ä¿å­˜",
                            type: "switch",
                            mode: "inline",
                            className: "w-full",
                            description: "å¼€å¯åŽä¿®æ”¹å³æäº¤ï¼Œè€Œä¸æ˜¯æ ‡è®°ä¿®æ”¹æ‰¹é‡æäº¤ã€‚",
                            descriptionClassName: "help-block m-b-none",
                            pipeIn: function(e) {
                                return !! e
                            }
                        },
                        s.getSchemaTplByName("api", {
                            label: "ç«‹å³ä¿å­˜æŽ¥å£",
                            description: "æ˜¯å¦å•ç‹¬ç»™ç«‹å³ä¿å­˜é…ç½®æŽ¥å£ï¼Œå¦‚æžœä¸é…ç½®ï¼Œåˆ™é»˜è®¤ä½¿ç”¨quickSaveItemApiã€‚",
                            name: "quickEdit.saveImmediately.api",
                            visibleOn: "quickEdit.saveImmediately"
                        }), {
                            visibleOn: "data.quickEdit",
                            children: i.
                        default.createElement(r.Button, {
                                level: "info",
                                className: "m-b",
                                size: "sm",
                                block: !0,
                                onClick: n.handleQuickEditSetting.bind(n)
                            },
                            "é…ç½®å¿«é€Ÿç¼–è¾‘æ–¹å¼")
                        },
                        {
                            name: "popOver",
                            label: "å¯ç”¨æŸ¥çœ‹æ›´å¤šå±•ç¤º",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            name: "popOver.mode",
                            label: "æŸ¥çœ‹æ›´å¤šå¼¹å‡ºæ¨¡å¼",
                            type: "select",
                            visibleOn: "data.popOver",
                            pipeIn: s.defaultValue("popOver"),
                            options: [{
                                label: "é»˜è®¤",
                                value: "popOver"
                            },
                            {
                                label: "å¼¹æ¡†",
                                value: "dialog"
                            },
                            {
                                label: "æŠ½å‡ºå¼å¼¹æ¡†",
                                value: "drawer"
                            }]
                        },
                        {
                            name: "popOver.position",
                            label: "æŸ¥çœ‹æ›´å¤šå¼¹å‡ºæ¨¡å¼",
                            type: "select",
                            visibleOn: '!data.popOver.mode || data.popOver.mode === "popOver"',
                            pipeIn: s.defaultValue("center"),
                            options: [{
                                label: "ç›®æ ‡ä¸­éƒ¨",
                                value: "center"
                            },
                            {
                                label: "ç›®æ ‡å·¦ä¸Šè§’",
                                value: "left-top"
                            },
                            {
                                label: "ç›®æ ‡å³ä¸Šè§’",
                                value: "right-top"
                            },
                            {
                                label: "ç›®æ ‡å·¦ä¸‹è§’",
                                value: "left-bottom"
                            },
                            {
                                label: "ç›®æ ‡å³ä¸‹è§’",
                                value: "right-bottom"
                            },
                            {
                                label: "é¡µé¢å·¦ä¸Šè§’",
                                value: "fixed-left-top"
                            },
                            {
                                label: "é¡µé¢å³ä¸Šè§’",
                                value: "fixed-right-top"
                            },
                            {
                                label: "é¡µé¢å·¦ä¸‹è§’",
                                value: "fixed-left-bottom"
                            },
                            {
                                label: "é¡µé¢å³ä¸‹è§’",
                                value: "fixed-right-bottom"
                            }]
                        },
                        {
                            visibleOn: "data.popOver",
                            children: i.
                        default.createElement(r.Button, {
                                level: "info",
                                className: "m-b",
                                block: !0,
                                onClick: n.handlePopOverSetting.bind(n)
                            },
                            "æŸ¥çœ‹æ›´å¤šå†…å®¹é…ç½®")
                        },
                        {
                            name: "copyable",
                            label: "å¯ç”¨å†…å®¹å¤åˆ¶åŠŸèƒ½",
                            type: "switch",
                            pipeIn: function(e) {
                                return !! e
                            },
                            mode: "inline",
                            className: "w-full"
                        },
                        {
                            visibleOn: "data.copyable",
                            name: "copyable.content",
                            type: "textarea",
                            label: "å¤åˆ¶å†…å®¹æ¨¡æ¿",
                            description: "é»˜è®¤ä¸ºå½“å‰å­—æ®µå€¼ï¼Œå¯å®šåˆ¶ã€‚"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [s.getSchemaTplByName("className", {
                            name: "labelClassName",
                            label: "Label çš„ CSS ç±»å",
                            pipeIn: s.defaultValue("pull-left w-xs text-muted")
                        }), s.getSchemaTplByName("className")]
                    }])]
                },
                n.childrenOrder = ["plain", "mapping", "operation", "date", "status", "switch", "image", "operation", "tpl", "container"];
                var o = t.field.type,
                c = t.value;
                return c || (c = "å†…å®¹ç¤ºä¾‹", "image" === o ? c = "": ~ ["date", "datetime", "time"].indexOf(o) ? c = f: "progress" === o ? c = 85.6 : "status" === o ? c = !0 : "operation" === o && (c = "")),
                n.state = l.__assign(l.__assign({},
                n.modifyProps(t, a)), {
                    value: c,
                    onQuickChange: p.noop
                }),
                n
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                p.anyChanged(["quickEdit", "popOver"], t, e) && this.setState(l.__assign({},
                this.modifyProps(e))),
                t.value !== e.value && this.setState({
                    value: e.value
                })
            },
            t.prototype.editorWillUpdate = function(t, a, i) {
                if (!1 === e.prototype.editorWillUpdate.call(this, t, a, i)) return ! 1;
                this.setState(l.__assign({},
                this.modifyProps(this.props)))
            },
            t.prototype.modifyProps = function(e, t) {
                void 0 === t && (t = this.context);
                var a = e.quickEdit,
                l = e.popOver;
                t.editor;
                return {
                    quickEdit: a = c.JSONPipeOut(a),
                    popOver: l = c.JSONPipeOut(l)
                }
            },
            t.prototype.deleteSelf = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-field$/, ""),
                a = e.getActiveId();
                e.delete(t),
                a === t && e.unSelectEditor()
            },
            t.prototype.onChildSettingsGet = function(e, t) {
                return l.__assign(l.__assign({},
                t), {
                    className: t.innerClassName
                })
            },
            t.prototype.onChildSettingsSet = function(e, t, a, i) {
                return i ? l.__assign(l.__assign({},
                u(a, ["label", "name", "sortable", "quickEdit", "toggled", "copyable", "popOver", "width", "breakpoint"])), t) : l.__assign(l.__assign({},
                t), {
                    innerClassName: t.className,
                    className: a.className
                })
            },
            t.prototype.getSettingsValue = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-field$/, "");
                return l.__assign(l.__assign({},
                e.get(t)), {
                    value: this.state.value
                })
            },
            t.prototype.setSettingsValue = function(e) {
                var t = this.context.editor,
                a = this.props.$$id.replace(/\-field$/, ""),
                i = (e = l.__assign({},
                e)).value;
                delete e.value,
                this.mounted && this.setState({
                    value: i
                }),
                t.update(a, e, void 0, "form")
            },
            t.prototype.handleQuickEditSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-field$/, ""),
                a = c.JSONPipeOut(e.get(t).quickEdit),
                n = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    type: "text",
                    name: this.props.name
                },
                a),
                e.openDialog("é…ç½®å¿«é€Ÿç¼–è¾‘ç±»åž‹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        quickEdit: a
                    },
                    controls: [{
                        name: "quickEdit",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(d.
                        default, {
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "/page/body/form/0/control",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        quickEdit: m(c.JSONPipeIn(a.quickEdit), ["$$replaceable"])
                    })
                }), "xl")
            },
            t.prototype.handlePopOverSetting = function() {
                var e = this.context.editor,
                t = this.props.$$id.replace(/\-column$/, ""),
                a = c.JSONPipeOut(e.get(t).popOver),
                n = this.props.data; ! 0 === a && (a = {}),
                a = l.__assign({
                    title: "æŸ¥çœ‹è¯¦æƒ…",
                    body: "å†…å®¹è¯¦æƒ…"
                },
                a),
                e.openDialog("é…ç½®æŸ¥çœ‹æ›´å¤šå±•ç¤ºå†…å®¹", {
                    type: "form",
                    mode: "normal",
                    data: {
                        popOver: a
                    },
                    controls: [{
                        name: "popOver",
                        children: function(t) {
                            var a = t.value,
                            o = t.onChange;
                            return i.
                        default.createElement(d.
                        default, {
                                autoFocus: !0,
                                previewClassName: "wrapper-xs",
                                value: l.__assign(l.__assign({},
                                a), {
                                    type: "panel",
                                    $$replaceable: !0
                                }),
                                onChange: o,
                                data: n,
                                schemaFilter: e.schemaFilter,
                                theme: e.theme
                            })
                        }
                    }]
                },
                (function(a) {
                    return e.update(t, {
                        popOver: m(c.JSONPipeIn(a.popOver), ["$$replaceable", "type"])
                    })
                }), "xl")
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                !["form", "button", "submit", "reset", "table", "crud", "divider", "page", "wizard"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.renderRenderer = function(t) {
                return e.prototype.renderRenderer.call(this, l.__assign(l.__assign({},
                t), {
                    $$movable: !1
                }))
            },
            t = l.__decorate([n.Editor("list-item-field"), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (o.
    default);
        t.ListItemFieldEditor = y
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.StatusFieldEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = a(4),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Mapping",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "æ˜ å°„é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            label: "æ˜ å°„è¡¨",
                            type: "combo",
                            required: !0,
                            name: "map",
                            descriptionClassName: "help-block text-xs m-b-none",
                            description: "<p>å½“å€¼å‘½ä¸­å·¦ä¾§ Key æ—¶ï¼Œå±•ç¤ºå³ä¾§å†…å®¹ï¼Œå½“æ²¡æœ‰å‘½ä¸­æ—¶ï¼Œé»˜è®¤å®žçŽ° Key ä¸º <code>*</code>çš„å†…å®¹</div>",
                            multiple: !0,
                            pipeIn: function(e) {
                                if (!r.isObject(e)) return [{
                                    key: "*",
                                    value: "é€šé…å€¼"
                                }];
                                var t = [];
                                return Object.keys(e).forEach((function(a) {
                                    t.push({
                                        key: a || "",
                                        value: "string" == typeof e[a] ? e[a] : JSON.stringify(e[a])
                                    })
                                })),
                                t
                            },
                            pipeOut: function(e) {
                                if (!Array.isArray(e)) return e;
                                var t = {};
                                return e.forEach((function(e) {
                                    var a = e.key || "",
                                    l = e.value;
                                    try {
                                        l = JSON.parse(l)
                                    } catch(e) {}
                                    t[a] = l
                                })),
                                t
                            },
                            controls: [{
                                placeholder: "Key",
                                type: "text",
                                unique: !0,
                                name: "key",
                                required: !0,
                                columnClassName: "w-xs"
                            },
                            {
                                placeholder: "å†…å®¹",
                                type: "text",
                                name: "value"
                            }]
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            pipeIn: o.defaultValue("-"),
                            label: "å ä½ç¬¦"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("mapping", {
                name: "æ˜ å°„",
                type: "mapping",
                tags: ["å±•ç¤º"],
                description: "å¯¹çŽ°æœ‰å€¼åšæ˜ å°„å±•ç¤ºï¼Œæ¯”å¦‚åŽŸå§‹å€¼æ˜¯ï¼š1ã€2ã€3...ï¼Œéœ€è¦å±•ç¤ºæˆï¼šä¸‹çº¿ã€ä¸Šçº¿ã€è¿‡æœŸç­‰ç­‰ã€‚",
                previewSchema: {
                    type: "mapping",
                    value: 1,
                    map: {
                        1 : '<span class="label label-success">ä¸Šçº¿</span>'
                    }
                },
                scaffold: {
                    type: "mapping",
                    label: "æ˜ å°„",
                    value: 2,
                    map: {
                        0 : '<span class="label label-info">ä¸€</span>',
                        1 : '<span class="label label-success">äºŒ</span>',
                        2 : '<span class="label label-danger">ä¸‰</span>',
                        3 : '<span class="label label-warning">å››</span>',
                        4 : '<span class="label label-primary">äº”</span>',
                        "*": '<span class="label label-default">-</span>'
                    }
                },
                $schema: "https://isuda.baidu.com/schemas/MappingSchema.json"
            })], t)
        } (n.
    default);
        t.StatusFieldEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.NavigationEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Nav",
                t.settingsSchema = {
                    title: "å¯¼èˆªé…ç½®",
                    definitions: {
                        links: {
                            label: "èœå•ç®¡ç†",
                            name: "links",
                            type: "combo",
                            multiple: !0,
                            draggable: !0,
                            addButtonText: "æ–°å¢žèœå•",
                            multiLine: !0,
                            messages: {
                                validateFailed: "èœå•ä¸­å­˜åœ¨é…ç½®é”™è¯¯ï¼Œè¯·ä»”ç»†æ£€æŸ¥"
                            },
                            scaffold: {
                                label: "",
                                to: ""
                            },
                            controls: [{
                                type: "text",
                                name: "label",
                                label: "åç§°",
                                required: !0
                            },
                            {
                                type: "text",
                                name: "to",
                                label: "è·³è½¬åœ°å€",
                                required: !0
                            },
                            {
                                type: "icon-picker",
                                name: "icon",
                                label: "å›¾æ ‡"
                            },
                            {
                                type: "group",
                                label: "æ˜¯å¦é«˜äº®",
                                direction: "vertical",
                                className: "m-b-none",
                                labelRemark: {
                                    trigger: "click",
                                    rootClose: !0,
                                    className: "m-l-xs",
                                    content: "å¯ä»¥é…ç½®è¯¥èœå•æ˜¯å¦è¦é«˜äº®",
                                    placement: "right"
                                },
                                controls: [{
                                    name: "active",
                                    type: "radios",
                                    inline: !0,
                                    options: [{
                                        label: "æ˜¯",
                                        value: !0
                                    },
                                    {
                                        label: "å¦",
                                        value: !1
                                    },
                                    {
                                        label: "è¡¨è¾¾å¼",
                                        value: ""
                                    }]
                                },
                                {
                                    name: "activeOn",
                                    autoComplete: !1,
                                    visibleOn: 'typeof this.active !== "boolean"',
                                    type: "text",
                                    placeholder: "ç•™ç©ºå°†è‡ªåŠ¨åˆ†æžèœå•åœ°å€",
                                    className: "m-t-n-sm"
                                }]
                            },
                            {
                                type: "switch",
                                label: "åŒ…å«å­èœå•",
                                name: "children",
                                mode: "inline",
                                className: "block",
                                pipeIn: function(e) {
                                    return !! e
                                },
                                pipeOut: function(e) {
                                    return e ? [{
                                        label: "",
                                        to: ""
                                    }] : void 0
                                },
                                messages: {
                                    validateFailed: "å­èœå•ä¸­å­˜åœ¨é…ç½®é”™è¯¯ï¼Œè¯·ä»”ç»†æ£€æŸ¥"
                                }
                            },
                            {
                                name: "children",
                                $ref: "links",
                                visibleOn: 'this.hasOwnProperty("children") && this.children',
                                label: "å­èœå•ç®¡ç†",
                                addButtonText: "æ–°å¢žå­èœå•"
                            }]
                        }
                    },
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            $ref: "links",
                            name: "links"
                        },
                        {
                            type: "divider"
                        },
                        o.getSchemaTplByName("api", {
                            name: "source",
                            label: "èŽ·å–èœå•æŽ¥å£",
                            description: "å¦‚æžœèœå•åœ°å€å¸Œæœ›å¯ä»¥åŠ¨æ€è®¾ç½®ï¼Œè¯·åœ¨æ­¤å¡«å…¥æŽ¥å£åœ°å€"
                        })]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "stacked",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "æ˜¯å¦ç«–ç€æ‘†æ”¾"
                        },
                        o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("nav", {
                name: "å¯¼èˆª",
                description: "ç”¨æ¥æ¸²æŸ“å¯¼èˆªèœå•ï¼Œæ”¯æŒæ¨ªæŽ’å’Œç«–æŽ’ã€‚",
                type: "nav",
                previewSchema: {
                    type: "nav",
                    stacked: !0,
                    className: "text-left",
                    links: [{
                        label: "é¡µé¢1"
                    },
                    {
                        label: "é¡µé¢2"
                    },
                    {
                        label: "é¡µé¢3",
                        active: !0,
                        children: [{
                            label: "é¡µé¢4"
                        },
                        {
                            label: "é¡µé¢5"
                        }]
                    }]
                },
                scaffold: {
                    type: "nav",
                    stacked: !0,
                    links: [{
                        label: "é¡µé¢1",
                        to: "?id=1"
                    },
                    {
                        label: "é¡µé¢2",
                        to: "?id=2"
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/NavSchema.json"
            })], t)
        } (n.
    default);
        t.NavigationEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.OperationEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(5),
        r = a(2),
        s = function(e) {
            function t(t, a) {
                var l = e.call(this, t, a) || this;
                return l.tipName = "Operation",
                l.isUnderField = /\/field\/\w+$/.test(l.props.$path),
                l.settingsSchema = {
                    title: "æ“ä½œæ é…ç½®",
                    controls: [l.isUnderField ? {
                        type: "tpl",
                        inline: !1,
                        className: "m-t-sm text-info text-sm",
                        tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                    }: null, {
                        children: i.
                    default.createElement("div", null, i.
                    default.createElement(o.Button, {
                            level: "info",
                            size: "sm",
                            className: "m-b-sm",
                            block: !0,
                            onClick: l.handleAdd.bind(l)
                        },
                        "æ·»åŠ æŒ‰é’®"))
                    },
                    r.getSchemaTplByName("className")]
                },
                l.toolbarBtns.splice( - 1, 0, {
                    icon: "fa fa-paste",
                    tooltip: "ç²˜è´´",
                    id: "paste",
                    test: function(e) {
                        var t = e.clipboard;
                        return t && l.acceptChild(t.type, "buttons")
                    }
                },
                {
                    icon: "fa fa-plus",
                    tooltip: "æ·»åŠ æŒ‰é’®",
                    id: "add"
                }),
                l
            }
            return l.__extends(t, e),
            t.prototype.handleToolbarAction = function(t) {
                if ("add" === t) return this.handleAdd();
                "paste" === t && this.addChild("buttons", this.props.clipboard),
                e.prototype.handleToolbarAction.call(this, t)
            },
            t.prototype.handleAdd = function() {
                this.pickChild("buttons", "buttons", void 0, ["button", "button-group"])
            },
            t.prototype.onChildSettingsGet = function(e, t) {
                if ("button" === e || "button-group" === e) return l.__assign({
                    size: "sm"
                },
                t)
            },
            t.prototype.renderRenderer = function(t) {
                return t.buttons && t.buttons.length ? e.prototype.renderRenderer.call(this, t) : i.
            default.createElement("p", {
                    key: t.key,
                    "data-editor-id": this.props.$$id,
                    className: "text-muted"
                },
                "æš‚æ— æ“ä½œæŒ‰é’®")
            },
            t.prototype.acceptChild = function(t, a, l) {
                return !! ~ ["button", "button-group"].indexOf(t) && e.prototype.acceptChild.call(this, t, a, l)
            },
            t = l.__decorate([n.Editor("operation", {
                name: "æ“ä½œæ ",
                type: "operation",
                scaffold: {
                    type: "operation",
                    label: "æ“ä½œæ "
                },
                $schema: "https://isuda.baidu.com/schemas/OperationSchema.json"
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (l.__importDefault(a(9)).
    default);
        t.OperationEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.PageEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(5),
        s = l.__importDefault(a(10)),
        p = l.__importDefault(a(9)),
        c = a(4),
        d = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {},
                t.replaceable = !1,
                t.settingsSchema = {
                    title: "é¡µé¢é…ç½®",
                    controls: [o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            label: "æ ‡é¢˜",
                            name: "title",
                            type: "text"
                        },
                        {
                            label: "å‰¯æ ‡é¢˜",
                            name: "subTitle",
                            type: "text"
                        },
                        {
                            label: "æç¤º",
                            name: "remark",
                            type: "textarea",
                            visibleOn: "data.title",
                            description: "æ ‡é¢˜é™„è¿‘ä¼šå‡ºçŽ°ä¸€ä¸ªæç¤ºå›¾æ ‡ï¼Œé¼ æ ‡æ”¾ä¸ŠåŽ»ä¼šæç¤ºè¯¥å†…å®¹ã€‚"
                        }]
                    },
                    {
                        title: "æŽ¥å£",
                        controls: [o.getSchemaTplByName("api", {
                            label: "æ•°æ®åˆå§‹åŒ–æŽ¥å£",
                            name: "initApi"
                        }), o.getSchemaTplByName("initFetch"), {
                            label: "å¼€å¯å®šæ—¶åˆ·æ–°",
                            type: "switch",
                            name: "interval",
                            visibleOn: "data.initApi",
                            pipeIn: function(e) {
                                return !! e
                            },
                            pipeOut: function(e) {
                                return e ? 3e3: void 0
                            },
                            mode: "inline"
                        },
                        {
                            name: "interval",
                            type: "number",
                            visibleOn: 'typeof this.interval === "number"',
                            step: 500
                        },
                        {
                            name: "silentPolling",
                            label: "é™é»˜åˆ·æ–°",
                            type: "switch",
                            mode: "inline",
                            visibleOn: "!!data.interval",
                            description: "è®¾ç½®è‡ªåŠ¨å®šæ—¶åˆ·æ–°æ—¶æ˜¯å¦æ˜¾ç¤ºloading"
                        },
                        {
                            name: "stopAutoRefreshWhen",
                            label: "åœæ­¢å®šæ—¶åˆ·æ–°æ£€æµ‹è¡¨è¾¾å¼",
                            type: "text",
                            visibleOn: "!!data.interval",
                            description: "å®šæ—¶åˆ·æ–°ä¸€æ—¦è®¾ç½®ä¼šä¸€ç›´åˆ·æ–°ï¼Œé™¤éžç»™å‡ºè¡¨è¾¾å¼ï¼Œæ¡ä»¶æ»¡è¶³åŽåˆ™ä¸åˆ·æ–°äº†ã€‚"
                        },
                        {
                            label: "é»˜è®¤æ¶ˆæ¯æç¤º",
                            type: "combo",
                            name: "messages",
                            multiLine: !0,
                            description: "è®¾ç½® ajax é»˜è®¤æç¤ºä¿¡æ¯ï¼Œå½“ ajax æ²¡æœ‰è¿”å›ž msg ä¿¡æ¯æ—¶æœ‰ç”¨ï¼Œå¦‚æžœ ajax è¿”å›žæºå¸¦äº† msg å€¼ï¼Œåˆ™è¿˜æ˜¯ä»¥ ajax è¿”å›žä¸ºä¸»",
                            controls: [{
                                label: "èŽ·å–æˆåŠŸæç¤º",
                                type: "text",
                                name: "fetchSuccess"
                            },
                            {
                                label: "èŽ·å–å¤±è´¥æç¤º",
                                type: "text",
                                name: "fetchFailed"
                            },
                            {
                                label: "ä¿å­˜æˆåŠŸæç¤º",
                                type: "text",
                                name: "saveSuccess"
                            },
                            {
                                label: "ä¿å­˜å¤±è´¥æç¤º",
                                type: "text",
                                name: "saveFailed"
                            }]
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "å¤´éƒ¨CSSç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹CSSç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "asideClassName",
                            label: "è¾¹æ CSSç±»å"
                        }), o.getSchemaTplByName("className", {
                            name: "toolbarClassName",
                            label: "å·¥å…·æ CSSç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("name"), {
                            type: "combo",
                            name: "definitions",
                            multiple: !0,
                            multiLine: !0,
                            label: "å®šä¹‰",
                            description: "å®šä¹‰ç±»åž‹ï¼Œå®šä¹‰å®ŒæˆåŽå¯è¢«å­èŠ‚ç‚¹å¼•ç”¨ã€‚",
                            pipeIn: function(e) {
                                return e ? Object.keys(e).map((function(t) {
                                    return {
                                        key: t,
                                        value: e[t]
                                    }
                                })) : []
                            },
                            pipeOut: function(e) {
                                return Array.isArray(e) ? e.reduce((function(e, t) {
                                    var a;
                                    return l.__assign(l.__assign({},
                                    e), ((a = {})[t.key || ""] = t.value ? t.value: {
                                        type: "tpl",
                                        tpl: "å†…å®¹"
                                    },
                                    a))
                                }), {}) : void 0
                            },
                            controls: [{
                                type: "text",
                                name: "key",
                                label: "Key",
                                required: !0
                            },
                            {
                                children: function(e) {
                                    var a = e.index;
                                    return i.
                                default.createElement(r.Button, {
                                        size: "sm",
                                        level: "danger",
                                        onClick: t.handleEditDefinitionDetail.bind(t, a),
                                        block: !0
                                    },
                                    "é…ç½®è¯¦æƒ…")
                                }
                            }]
                        }]
                    }])]
                },
                t.tipName = "é¡µé¢",
                t.dropable = !0,
                t.containers = ["toolbar", "aside", "body"],
                t.containerLabels = ["å·¥å…·æ ", "è¾¹æ ", "å†…å®¹åŒº"],
                t
            }
            return l.__extends(t, e),
            t.prototype.modifyProps = function(t, a) {
                void 0 === a && (a = this.context);
                var i = t.definitions,
                n = (t.$$id, t.data);
                i && (n = l.__assign(l.__assign({},
                n), {
                    definitionKeys: Object.keys(i).filter((function(e) {
                        return "$$id" !== e
                    })).map((function(e) {
                        return {
                            label: e,
                            value: e
                        }
                    }))
                }));
                var o = e.prototype.modifyProps.call(this, t, a);
                return o.data = n,
                o
            },
            t.prototype.handleEditDefinitionDetail = function(e) {
                var t = this.context.editor,
                a = this.props,
                n = a.$$id,
                o = (a.data, l.__assign({},
                c.JSONPipeOut(t.get(n).definitions))),
                r = Object.keys(o).filter((function(e) {
                    return "$$id" !== e
                }))[e] || "a",
                p = o[r] || {
                    type: "tpl",
                    tpl: "å†…å®¹"
                };
                t.openDialog("é…ç½®å®šä¹‰è¯¦æƒ…", {
                    type: "form",
                    mode: "normal",
                    data: {
                        items: p
                    },
                    controls: [{
                        name: "items",
                        children: function(e) {
                            var a = e.value,
                            n = e.onChange;
                            return i.
                        default.createElement(s.
                        default, {
                                previewClassName: "padder-md p-t-xs",
                                pathPrefix: "/page/body/form/0/control",
                                autoFocus: !0,
                                value: l.__assign(l.__assign({},
                                a), {
                                    $$replaceable: !0
                                }),
                                onChange: n,
                                schemaFilter: t.schemaFilter,
                                theme: t.theme
                            })
                        }
                    }]
                },
                (function(e) {
                    o[r] = c.JSONPipeIn(e.items),
                    delete o[r].$$replaceable,
                    t.update(n, {
                        definitions: o
                    })
                }), "xl")
            },
            t = l.__decorate([n.Editor("page", {
                name: "é¡µé¢",
                type: "page",
                description: "é¡µé¢æ¸²æŸ“å™¨ï¼Œé¡µé¢çš„é¡¶çº§å…¥å£ã€‚åŒ…å«å¤šä¸ªåŒºåŸŸï¼Œæ‚¨å¯ä»¥é€‰æ‹©åœ¨ä¸åŒçš„åŒºåŸŸé‡Œé¢æ”¾ç½®ä¸åŒçš„æ¸²æŸ“å™¨ã€‚",
                tags: "å®¹å™¨",
                icon: "fa fa-desktop",
                previewSchema: {
                    type: "page",
                    className: "text-left b-a",
                    asideClassName: "w-xs",
                    title: "æ ‡é¢˜",
                    subTitle: "å‰¯æ ‡é¢˜",
                    aside: "è¾¹æ ",
                    body: "å†…å®¹"
                },
                scaffold: {
                    type: "page",
                    title: "é¡µé¢",
                    body: "å†…å®¹"
                },
                $schema: "https://isuda.baidu.com/schemas/PageSchema.json"
            })], t)
        } (p.
    default);
        t.PageEditor = d
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.PanelEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(3)),
        o = l.__importDefault(a(11)),
        r = a(2),
        s = l.__importDefault(a(9)),
        p = a(5),
        c = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Panel",
                t.schemaCaches = {},
                t.dropable = !0,
                t.containers = ["body", "actions"],
                t.containerLabels = ["å†…å®¹åŒº", "æŒ‰é’®æ "],
                t.diyContainer = ["body"],
                t.settingsSchema = {
                    title: "é¢æ¿é…ç½®",
                    controls: r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            label: "æ ‡é¢˜",
                            name: "title",
                            type: "text"
                        },
                        {
                            children: n.
                        default.createElement(p.Button, {
                                size: "sm",
                                level: "info",
                                className: "m-b",
                                onClick: function() {
                                    return t.pickChild("body")
                                },
                                block: !0
                            },
                            "å†…å®¹åŒºæ–°å¢žå†…å®¹")
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "affixFooter",
                            label: "å›ºå®šåº•éƒ¨",
                            type: "switch",
                            value: !1,
                            mode: "inline",
                            className: "block"
                        },
                        r.getSchemaTplByName("horizontal", {
                            visibleOn: '(data.mode || data.$$formMode) == "horizontal" && data.$$mode == "form"'
                        }), {
                            name: "className",
                            label: "æ ·å¼",
                            type: "button-group",
                            size: "sm",
                            pipeIn: function(e) {
                                return "string" == typeof e && /(?:^|\s)(Panel\-\-(\w+))(?:$|\s)/.test(e) ? RegExp.$1: ""
                            },
                            pipeOut: function(e, t) {
                                return t ? (t.replace(/(?:^|\s)(Panel\-\-(\w+))(?=($|\s))/g, "") + " " + e).replace(/\s+/g, " ").trim() : e
                            },
                            options: [{
                                label: "é»˜è®¤",
                                value: "Panel--default"
                            },
                            {
                                label: "ä¸»è‰²",
                                value: "Panel--primary"
                            },
                            {
                                label: "æç¤º",
                                value: "Panel--info"
                            },
                            {
                                label: "æˆåŠŸ",
                                value: "Panel--success"
                            },
                            {
                                label: "è­¦å‘Š",
                                value: "Panel--warning"
                            },
                            {
                                label: "å±é™©",
                                value: "Panel--danger"
                            }]
                        },
                        r.getSchemaTplByName("className", {
                            pipeIn: r.defaultValue("Panel--default")
                        }), r.getSchemaTplByName("className", {
                            name: "headerClassName",
                            label: "å¤´éƒ¨åŒºåŸŸ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "bodyClassName",
                            label: "å†…å®¹åŒºåŸŸ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "footerClassName",
                            label: "åº•éƒ¨åŒºåŸŸ CSS ç±»å"
                        }), r.getSchemaTplByName("className", {
                            name: "actionsClassName",
                            label: "æŒ‰é’®å¤–å±‚ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("panel", {
                name: "é¢æ¿(Panel)",
                type: "panel",
                description: "å±•ç¤ºä¸€ä¸ªé¢æ¿ï¼Œå¯ä»¥é…ç½®æ ‡é¢˜ï¼Œå†…å®¹åŒºã€‚",
                tags: ["å®¹å™¨"],
                previewSchema: {
                    type: "panel",
                    title: "è¿™æ˜¯ä¸€ä¸ªé¢æ¿",
                    body: "è¿™æ˜¯å†…å®¹åŒº",
                    className: "Panel--default text-left m-b-none",
                    actions: [{
                        label: "æŒ‰é’®1",
                        type: "button"
                    },
                    {
                        label: "æŒ‰é’®2",
                        type: "button"
                    }]
                },
                scaffold: {
                    type: "panel",
                    title: "æ ‡é¢˜",
                    body: "å†…å®¹"
                },
                $schema: "https://isuda.baidu.com/schemas/PanelSchema.json"
            },
            {
                renderActions: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a) return this.super.apply(this, e);
                    var l = this.props.regionRef || a.regionRef;
                    return n.
                default.createElement(o.
                default, {
                        ref: function(e) {
                            return l("actions", e)
                        },
                        name: "actions",
                        label: "æŒ‰é’®é›†åˆ",
                        hostId: a.props.$$id
                    },
                    this.super.apply(this, e))
                },
                renderBody: function() {
                    for (var e = [], t = 0; t < arguments.length; t++) e[t] = arguments[t];
                    var a = this.props.$editor;
                    if (!a || this.props.children) return this.super.apply(this, e);
                    var l = this.super.apply(this, e),
                    i = this.props.regionRef;
                    return n.
                default.createElement(o.
                default, {
                        key: "body",
                        ref: function(e) {
                            return i("body", e)
                        },
                        name: "body",
                        label: "å†…å®¹åŒº",
                        hostId: a.props.$$id
                    },
                    l)
                }
            })], t)
        } (s.
    default);
        t.PanelEditor = c
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.PlainEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Plain",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "æ–‡æœ¬é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            label: "å†…å®¹",
                            type: "textarea",
                            pipeIn: function(e, t) {
                                return e || t && t.text
                            },
                            name: "tpl",
                            description: 'å¦‚æžœå½“å‰å­—æ®µæœ‰å€¼ï¼Œè¯·ä¸è¦è®¾ç½®ï¼Œå¦åˆ™è¦†ç›–ã€‚æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡ï¼Œæˆ–è€…ç”¨ lodash.template è¯­æ³•æ¥å†™æ¨¡æ¿é€»è¾‘ã€‚<a target="_blank" href="/docs/renderers/Tpl">è¯¦æƒ…</a>'
                        },
                        {
                            name: "placeholder",
                            label: "å ä½ç¬¦",
                            type: "text",
                            pipeIn: o.defaultValue("-")
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "å†…è”æ¨¡å¼",
                            type: "switch",
                            name: "inline",
                            mode: "inline",
                            className: "w-full",
                            value: !0
                        },
                        o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("plain", {
                name: "çº¯æ–‡æœ¬",
                description: "ç”¨æ¥å±•ç¤ºçº¯æ–‡å­—ï¼Œhtml æ ‡ç­¾ä¼šè¢«è½¬ä¹‰ã€‚",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "plain",
                    text: "è¿™æ˜¯çº¯æ–‡æœ¬",
                    className: "text-center",
                    inline: !1
                },
                type: "plain",
                scaffold: {
                    type: "plain",
                    tpl: "å†…å®¹",
                    inline: !1
                },
                $schema: "https://isuda.baidu.com/schemas/PlainSchema.json"
            })], t)
        } (n.
    default);
        t.PlainEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.ProgressFieldEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Progresss",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "è¿›åº¦é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            name: "showLabel",
                            type: "switch",
                            inline: !0,
                            pipeIn: o.defaultValue(!0),
                            label: "æ˜¯å¦æ˜¾ç¤ºæ–‡å­—"
                        },
                        {
                            name: "map",
                            label: "ç­‰çº§é…ç½®",
                            type: "array",
                            items: {
                                type: "text"
                            },
                            descrition: "é…ç½®ä¸é€šçš„å€¼æ®µï¼Œç”¨ä¸é€šçš„æ ·å¼æç¤ºç”¨æˆ·",
                            pipeIn: o.defaultValue(["bg-danger", "bg-warning", "bg-info", "bg-success", "bg-success"])
                        },
                        o.getSchemaTplByName("switchDefaultValue"), {
                            type: "text",
                            name: "value",
                            label: "é»˜è®¤å€¼",
                            validations: "isNumeric",
                            visibleOn: 'typeof this.value !== "undefined"'
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            pipeIn: o.defaultValue("-"),
                            label: "å ä½ç¬¦"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className"), o.getSchemaTplByName("className", {
                            name: "progressClassName",
                            label: "è¿›åº¦å¤–å±‚ CSS ç±»å",
                            pipeIn: o.defaultValue("progress-xs progress-striped active m-t-xs m-b-none")
                        }), o.getSchemaTplByName("className", {
                            name: "progressBarClassName",
                            label: "è¿›åº¦æ¡ CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("progress", {
                name: "è¿›åº¦å±•ç¤º",
                description: "ç”¨æ¥å±•ç¤ºè¿›åº¦ã€‚å¯é…ç½®å„ä¸ªè¿›åº¦æ®µç”¨ä¸åŒçš„é¢œè‰²å±•ç¤ºã€‚",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "progress",
                    value: 66.66
                },
                scaffold: {
                    type: "progress",
                    value: 66.66
                },
                type: "progress",
                icon: "fa fa-spinner",
                $schema: "https://isuda.baidu.com/schemas/ProgressSchema.json"
            })], t)
        } (n.
    default);
        t.ProgressFieldEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.QRCodeEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "QRCode",
                t.settingsSchema = {
                    title: "äºŒç»´ç é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "value",
                            type: "text",
                            label: "äºŒç»´ç å€¼",
                            pipeIn: o.defaultValue("https://www.baidu.com"),
                            description: "æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡"
                        },
                        {
                            name: "level",
                            type: "select",
                            label: "å¤æ‚åº¦",
                            pipeIn: o.defaultValue("L"),
                            options: [{
                                label: "L",
                                value: "L"
                            },
                            {
                                label: "M",
                                value: "M"
                            },
                            {
                                label: "Q",
                                value: "Q"
                            },
                            {
                                label: "H",
                                value: "H"
                            }]
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "codeSize",
                            type: "number",
                            label: "å®½é«˜å€¼",
                            pipeIn: o.defaultValue(128)
                        },
                        {
                            name: "backgroundColor",
                            type: "color",
                            label: "èƒŒæ™¯è‰²",
                            pipeIn: o.defaultValue("#fff")
                        },
                        {
                            name: "foregroundColor",
                            type: "color",
                            label: "å‰æ™¯è‰²",
                            pipeIn: o.defaultValue("#000")
                        },
                        o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("qrcode", {
                name: "äºŒç»´ç ",
                type: "qr-code",
                description: "å¯ä»¥ç”¨æ¥ç”ŸæˆäºŒç»´ç ",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "qrcode",
                    value: "https://amis.baidu.com"
                }
            })], t)
        } (n.
    default);
        t.QRCodeEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.OutterServiceEditor = void 0;
        var l = a(0),
        i = a(1),
        n = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.dropable = !0,
                t.containers = ["body"],
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("service", {
                name: "æœåŠ¡(Service)",
                tags: ["å®¹å™¨", "åŠŸèƒ½"],
                icon: "fa fa-cloud",
                description: "åŠŸèƒ½æ€§å®¹å™¨ï¼Œå¯ä»¥ç”¨æ¥åŠ è½½æ•°æ®æˆ–è€…åŠ è½½æ¸²æŸ“å™¨é…ç½®ã€‚åŠ è½½åˆ°çš„æ•°æ®åœ¨å®¹å™¨å¯ä»¥ä½¿ç”¨ã€‚",
                type: "service",
                scaffold: {
                    type: "service",
                    body: "å†…å®¹"
                },
                $schema: "https://isuda.baidu.com/schemas/ServiceSchema.json"
            })], t)
        } (a(32).ServiceEditor);
        t.OutterServiceEditor = n
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.StatusFieldEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Status",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "çŠ¶æ€æ˜¾ç¤ºé…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: null, {
                            name: "map",
                            label: "å›¾æ ‡é…ç½®",
                            type: "array",
                            items: {
                                type: "text"
                            },
                            descrition: "é…ç½®ä¸é€šçš„å€¼æ®µï¼Œç”¨ä¸é€šçš„æ ·å¼æç¤ºç”¨æˆ·",
                            pipeIn: o.defaultValue(["fa fa-times text-danger", "fa fa-check text-success"])
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            pipeIn: o.defaultValue("-"),
                            label: "å ä½ç¬¦"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("status", {
                name: "çŠ¶æ€æ˜¾ç¤º",
                description: "ç”¨å›¾æ ‡æ›´å…·å…³è”å­—æ®µæ¥å±•ç¤ºçŠ¶æ€ï¼Œæ¯”å¦‚ 1 å±•ç¤º âˆšã€0 å±•ç¤º xã€‚è¿™å—å¯ä»¥è‡ªå®šä¹‰é…ç½®",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "status",
                    value: 1
                },
                type: "status",
                icon: "fa fa-check-square-o",
                $schema: "https://isuda.baidu.com/schemas/StatusSchema.json"
            })], t)
        } (n.
    default);
        t.StatusFieldEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.SwitchFieldEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Switch",
                t.isUnderField = /\/field\/\w+$/.test(t.props.$path),
                t.settingsSchema = {
                    title: "å¼€å…³é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [t.isUnderField ? {
                            type: "tpl",
                            inline: !1,
                            className: "text-info text-sm",
                            tpl: "<p>å½“å‰ä¸ºå­—æ®µå†…å®¹èŠ‚ç‚¹é…ç½®ï¼Œé€‰æ‹©ä¸Šå±‚è¿˜æœ‰æ›´å¤šçš„é…ç½®ã€‚</p>"
                        }: {
                            name: "name",
                            type: "text",
                            label: "å­—æ®µå"
                        },
                        {
                            name: "option",
                            type: "text",
                            label: "é€‰é¡¹è¯´æ˜Ž"
                        },
                        {
                            type: "text",
                            label: "å‹¾é€‰åŽçš„å€¼",
                            name: "trueValue",
                            value: !0,
                            pipeOut: o.valuePipeOut
                        },
                        {
                            type: "text",
                            label: "æœªå‹¾é€‰çš„å€¼",
                            name: "falseValue",
                            value: !1,
                            pipeOut: o.valuePipeOut
                        },
                        {
                            name: "placeholder",
                            type: "text",
                            pipeIn: o.defaultValue("-"),
                            label: "å ä½ç¬¦"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("switch", {
                name: "å¼€å…³å±•ç¤º",
                type: "switch",
                description: "ç”¨å¼€å…³çš„æ ·å¼æ¥å±•ç¤ºæ•°æ®ã€‚",
                tags: ["å±•ç¤º"],
                icon: "fa fa-toggle-on",
                previewSchema: {
                    type: "switch",
                    value: !0,
                    onQuickChange: function() {}
                },
                $schema: "https://isuda.baidu.com/schemas/SwitchSchema.json"
            })], t)
        } (n.
    default);
        t.SwitchFieldEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TaskEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Tasks",
                t.settingsSchema = {
                    title: "å¼‚æ­¥ä»»åŠ¡é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "items",
                            label: "åˆå§‹ä»»åŠ¡ä¿¡æ¯",
                            type: "combo",
                            multiple: !0,
                            multiLine: !0,
                            controls: [{
                                name: "label",
                                type: "text",
                                label: "ä»»åŠ¡åç§°"
                            },
                            {
                                name: "key",
                                type: "text",
                                label: "ä»»åŠ¡ID"
                            },
                            {
                                name: "status",
                                type: "number",
                                label: "ä»»åŠ¡çŠ¶æ€"
                            },
                            {
                                name: "remark",
                                type: "textarea",
                                label: "ä»»åŠ¡è¯´æ˜Ž"
                            }],
                            addButtonText: "æ–°å¢žä»»åŠ¡ä¿¡æ¯",
                            scaffold: {
                                label: "åç§°",
                                key: "key",
                                status: 0,
                                remark: "è¯´æ˜Ž"
                            },
                            description: "å¯ä»¥ä¸è®¾ç½®ï¼Œå¦‚æžœæ£€æµ‹æŽ¥å£è¿”å›žè¿™äº›ä¿¡æ¯çš„è¯ã€‚"
                        },
                        o.getSchemaTplByName("api", {
                            name: "checkApi",
                            label: "çŠ¶æ€æ£€æµ‹æŽ¥å£"
                        }), {
                            name: "interval",
                            type: "number",
                            min: 3e3,
                            step: 500,
                            visibleOn: "data.checkApi",
                            pipeIn: o.defaultValue(3e3),
                            label: "å®šæ—¶æ£€æµ‹é—´éš”"
                        },
                        o.getSchemaTplByName("api", {
                            name: "submitApi",
                            label: "æäº¤æŽ¥å£"
                        }), o.getSchemaTplByName("api", {
                            name: "reSubmitApi",
                            label: "é‡è¯•æŽ¥å£"
                        }), {
                            name: "taskNameLabel",
                            type: "text",
                            pipeIn: o.defaultValue("ä»»åŠ¡åç§°"),
                            label: "ä»»åŠ¡åç§°æ æ ‡é¢˜"
                        },
                        {
                            name: "operationLabel",
                            type: "text",
                            pipeIn: o.defaultValue("æ“ä½œ"),
                            label: "æ“ä½œæ æ ‡é¢˜"
                        },
                        {
                            name: "statusLabel",
                            type: "text",
                            pipeIn: o.defaultValue("çŠ¶æ€"),
                            label: "çŠ¶æ€æ æ ‡é¢˜"
                        },
                        {
                            name: "remarkLabel",
                            type: "text",
                            pipeIn: o.defaultValue("å¤‡æ³¨è¯´æ˜Ž"),
                            label: "å¤‡æ³¨æ æ ‡é¢˜"
                        },
                        {
                            name: "btnText",
                            label: "æŒ‰é’®åç§°",
                            type: "text",
                            pipeIn: o.defaultValue("ä¸Šçº¿")
                        },
                        {
                            name: "retryBtnText",
                            label: "é‡è¯•æŒ‰é’®åç§°",
                            type: "text",
                            pipeIn: o.defaultValue("é‡è¯•")
                        },
                        {
                            name: "statusTextMap",
                            pipeIn: o.defaultValue(["æœªå¼€å§‹", "å°±ç»ª", "è¿›è¡Œä¸­", "å‡ºé”™", "å·²å®Œæˆ", "å‡ºé”™"]),
                            type: "array",
                            label: "çŠ¶æ€æ ‡ç­¾æ–‡å­—é…ç½®",
                            multiple: !0,
                            addable: !1,
                            removable: !1,
                            items: {
                                type: "text",
                                placeholder: "åç§°"
                            }
                        },
                        {
                            name: "initialStatusCode",
                            label: "åˆå§‹çŠ¶æ€ç ",
                            pipeIn: o.defaultValue(0),
                            type: "number"
                        },
                        {
                            name: "readyStatusCode",
                            label: "å°±ç»ªçŠ¶æ€ç ",
                            pipeIn: o.defaultValue(1),
                            type: "number"
                        },
                        {
                            name: "loadingStatusCode",
                            label: "è¿›è¡Œä¸­çŠ¶æ€ç ",
                            pipeIn: o.defaultValue(2),
                            type: "number"
                        },
                        {
                            name: "errorStatusCode",
                            label: "é”™è¯¯çŠ¶æ€ç ",
                            pipeIn: o.defaultValue(3),
                            type: "number"
                        },
                        {
                            name: "finishStatusCode",
                            label: "å®ŒæˆçŠ¶æ€ç ",
                            pipeIn: o.defaultValue(4),
                            type: "number"
                        },
                        {
                            name: "canRetryStatusCode",
                            label: "å‡ºé”™ä½†å¯é‡è¯•çŠ¶æ€ç ",
                            pipeIn: o.defaultValue(5),
                            type: "number"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [o.getSchemaTplByName("className", {
                            pipeIn: o.defaultValue("b-a bg-white table-responsive")
                        }), o.getSchemaTplByName("className", {
                            name: "tableClassName",
                            label: "è¡¨æ ¼ CSS ç±»å",
                            pipeIn: o.defaultValue("table table-striped m-b-none")
                        }), o.getSchemaTplByName("className", {
                            name: "btnClassName",
                            label: "æŒ‰é’® CSS ç±»å",
                            pipeIn: o.defaultValue("btn-sm btn-default")
                        }), o.getSchemaTplByName("className", {
                            name: "retryBtnClassName",
                            label: "é‡è¯•æŒ‰é’® CSS ç±»å",
                            pipeIn: o.defaultValue("btn-sm btn-danger")
                        }), {
                            name: "statusLabelMap",
                            pipeIn: o.defaultValue(["label-warning", "label-info", "label-info", "label-danger", "label-success", "label-danger"]),
                            type: "array",
                            label: "çŠ¶æ€æ ‡ç­¾ CSS ç±»åé…ç½®",
                            multiple: !0,
                            addable: !1,
                            removable: !1,
                            items: {
                                type: "text",
                                placeholder: "CSS ç±»å"
                            }
                        }]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("tasks", {
                name: "å¼‚æ­¥ä»»åŠ¡",
                type: "tasks",
                description: "ç”¨æ¥åšå¼‚æ­¥ä»»åŠ¡å‘ˆçŽ°æˆ–è€…æ“ä½œã€‚",
                previewSchema: {
                    type: "tasks",
                    name: "tasks",
                    items: [{
                        label: "hive ä»»åŠ¡",
                        key: "hive",
                        status: 4,
                        remark: 'æŸ¥çœ‹è¯¦æƒ…<a target="_blank" href="http://www.baidu.com">æ—¥å¿—</a>ã€‚'
                    },
                    {
                        label: "å°æµé‡",
                        key: "partial",
                        status: 4
                    },
                    {
                        label: "å…¨é‡",
                        key: "full",
                        status: 4
                    }]
                },
                scaffold: {
                    type: "tasks",
                    name: "tasks",
                    items: [{
                        label: "hive ä»»åŠ¡",
                        key: "hive",
                        status: 4,
                        remark: 'æŸ¥çœ‹è¯¦æƒ…<a target="_blank" href="http://www.baidu.com">æ—¥å¿—</a>ã€‚'
                    },
                    {
                        label: "å°æµé‡",
                        key: "partial",
                        status: 4
                    },
                    {
                        label: "å…¨é‡",
                        key: "full",
                        status: 4
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/TasksSchema.json"
            })], t)
        } (n.
    default);
        t.TaskEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.TplEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "æ¨¡æ¿",
                t.settingsSchema = {
                    title: "æ¨¡æ¿é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            type: "button-group",
                            name: "__mode",
                            label: "ç¼–è¾‘æ¨¡å¼",
                            value: "source",
                            size: "sm",
                            options: [{
                                label: "æºç ",
                                value: "source"
                            },
                            {
                                label: "å¯Œæ–‡æœ¬",
                                value: "rich-text"
                            }]
                        },
                        {
                            label: "å†…å®¹",
                            type: "rich-text",
                            visibleOn: 'data.__mode =="rich-text"',
                            required: !0,
                            buttons: ["paragraphFormat", "quote", "color", "|", "bold", "italic", "underline", "strikeThrough", "|", "formatOL", "formatUL", "align", "|", "insertLink", "insertImage", "insertTable", "|", "undo", "redo", "fullscreen"],
                            pipeIn: function(e, t) {
                                return e || t && t.html
                            },
                            name: "tpl",
                            description: 'æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡ï¼Œæˆ–è€…ç”¨ lodash.template è¯­æ³•æ¥å†™æ¨¡æ¿é€»è¾‘ã€‚<a target="_blank" href="/docs/renderers/Tpl">è¯¦æƒ…</a>',
                            size: "lg"
                        },
                        {
                            label: "å†…å®¹",
                            type: "textarea",
                            required: !0,
                            minRows: 5,
                            language: "html",
                            visibleOn: 'data.__mode !="rich-text"',
                            pipeIn: function(e, t) {
                                return e || t && t.html
                            },
                            name: "tpl",
                            description: 'æ”¯æŒä½¿ç”¨ <code>\\${xxx}</code> æ¥èŽ·å–å˜é‡ï¼Œæˆ–è€…ç”¨ lodash.template è¯­æ³•æ¥å†™æ¨¡æ¿é€»è¾‘ã€‚<a target="_blank" href="/docs/renderers/Tpl">è¯¦æƒ…</a>'
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            label: "å†…è”æ¨¡å¼",
                            type: "switch",
                            name: "inline",
                            mode: "inline",
                            className: "w-full",
                            pipeIn: o.defaultValue(!0),
                            labelRemark: {
                                trigger: "click",
                                className: "m-l-xs",
                                rootClose: !0,
                                content: "å†…è”æ¨¡å¼é‡‡ç”¨ <code>span</code> æ ‡ç­¾ã€éžå†…è”å°†é‡‡ç”¨ <code>div</code> æ ‡ç­¾ä½œä¸ºå®¹å™¨ã€‚",
                                placement: "right"
                            }
                        },
                        o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("tpl", {
                name: "æ¨¡æ¿ï¼ˆTplï¼‰",
                type: "tpl",
                description: "æ¨¡æ¿ç±»åž‹æ¸²æŸ“å™¨ï¼Œå¯ä»¥åŸºäºŽæ•°æ®ç›´æŽ¥æ¸²æŸ“å‡º htmlï¼Œç›®å‰æœ‰ä¸¤ç§è¯­æ³•ï¼Œä¸è¦äº¤å‰ä½¿ç”¨ã€‚",
                tags: ["å±•ç¤º"],
                previewSchema: {
                    type: "tpl",
                    tpl: "æ¨¡æ¿ï¼ˆTplï¼‰"
                },
                scaffold: {
                    type: "tpl",
                    tpl: "å†…å®¹",
                    inline: !1
                },
                $schema: "https://isuda.baidu.com/schemas/TplSchema.json"
            })], t)
        } (n.
    default);
        t.TplEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.VideoEditor = void 0;
        var l = a(0),
        i = a(1),
        n = l.__importDefault(a(8)),
        o = a(2),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Video",
                t.settingsSchema = {
                    title: "è§†é¢‘é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "src",
                            type: "text",
                            label: "è§†é¢‘åœ°å€",
                            description: "å¯ä»¥å†™é™æ€å€¼ï¼Œä¹Ÿå¯ä»¥ç”¨å˜é‡å–æ¯”å¦‚ï¼š<code>\\${videoSrc}</code>"
                        },
                        {
                            name: "poster",
                            type: "text",
                            label: "è§†é¢‘å°é¢å›¾ç‰‡åœ°å€",
                            description: "å¯ä»¥å†™é™æ€å€¼ï¼Œä¹Ÿå¯ä»¥ç”¨å˜é‡å–æ¯”å¦‚ï¼š<code>\\${videoPoster}</code>"
                        },
                        {
                            name: "autoPlay",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "è‡ªåŠ¨æ’­æ”¾"
                        },
                        {
                            name: "muted",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "é™éŸ³"
                        }]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "aspectRatio",
                            label: "è§†é¢‘æ¯”ä¾‹",
                            type: "button-group",
                            size: "sm",
                            mode: "inline",
                            className: "block",
                            value: "auto",
                            options: [{
                                label: "è‡ªåŠ¨",
                                value: "auto"
                            },
                            {
                                label: "4:3",
                                value: "4:3"
                            },
                            {
                                label: "16:9",
                                value: "16:9"
                            }]
                        },
                        {
                            name: "splitPoster",
                            type: "switch",
                            mode: "inline",
                            className: "block",
                            label: "åˆ†å¼€æ˜¾ç¤ºå°é¢"
                        },
                        o.getSchemaTplByName("className")]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [o.getSchemaTplByName("ref"), {
                            type: "text",
                            name: "rates",
                            label: "è§†é¢‘é€ŸçŽ‡",
                            multiple: !0,
                            joinValues: !1,
                            extractValue: !0,
                            options: [.5, 1, 1.25, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5].map((function(e) {
                                return {
                                    label: e,
                                    value: e
                                }
                            }))
                        },
                        {
                            name: "frames",
                            type: "text",
                            label: "è§†é¢‘å¸§ä¿¡æ¯",
                            description: "æ¯”å¦‚å¡«å†™ï¼š<code>\\${videoFrames}</code>ä¼šåœ¨å½“å‰ä½œç”¨åŸŸä¸­æŸ¥æ‰¾ videoFrames å˜é‡ï¼Œå¦‚æžœæ˜¯å¯¹è±¡ï¼Œå°†ç”Ÿæˆè§†é¢‘æˆªå›¾åˆ—è¡¨ï¼Œç‚¹å‡»åŽå¯è·³è½¬åˆ°å¯¹åº”çš„å¸§ã€‚"
                        },
                        o.getSchemaTplByName("visible")]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([i.Editor("video", {
                name: "è§†é¢‘",
                type: "video",
                description: "è§†é¢‘æŽ§ä»¶ï¼Œå¯ä»¥ç”¨æ¥æ’­æ”¾å„ç§è§†é¢‘æ–‡ä»¶ï¼ŒåŒ…æ‹¬ flv å’Œ hls æ ¼å¼ã€‚",
                tags: ["å±•ç¤º"],
                icon: "fa fa-youtube-play",
                previewSchema: {
                    type: "video",
                    autoPlay: !1,
                    poster: "https://video-react.js.org/assets/poster.png"
                },
                scaffold: {
                    type: "video",
                    autoPlay: !1,
                    src: "https://media.w3.org/2010/05/sintel/trailer_hd.mp4",
                    poster: "https://video-react.js.org/assets/poster.png"
                },
                $schema: "https://isuda.baidu.com/schemas/VideoSchema.json"
            })], t)
        } (n.
    default);
        t.VideoEditor = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.WizardEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = l.__importDefault(a(8)),
        r = a(2),
        s = a(142),
        p = function(e) {
            function t(t, a) {
                var l = e.call(this, t) || this;
                return l.tipName = "Wizard",
                l.settingsSchema = {
                    title: "è¡¨å•å‘å¯¼é…ç½®",
                    controls: [r.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "steps",
                            label: "æ­¥éª¤è®¾ç½®",
                            type: "combo",
                            multiple: !0,
                            multiLine: !0,
                            addButtonText: "æ–°å¢žä¸€æ­¥",
                            scaffold: {
                                title: "æ ‡é¢˜",
                                controls: [{
                                    type: "text",
                                    name: "var1",
                                    label: "æ–‡æœ¬"
                                }]
                            },
                            controls: [{
                                name: "title",
                                type: "text",
                                label: "æ ‡é¢˜",
                                pipeIn: function(e, t) {
                                    return e || t.label
                                }
                            },
                            {
                                type: "fieldSet",
                                title: "å…¶ä»–è®¾ç½®",
                                collapsed: !0,
                                collapsable: !0,
                                className: "fieldset m-b-none",
                                controls: [{
                                    name: "mode",
                                    label: "å±•ç¤ºæ¨¡å¼",
                                    type: "button-group",
                                    size: "xs",
                                    mode: "inline",
                                    className: "w-full",
                                    value: "normal",
                                    options: [{
                                        label: "é»˜è®¤",
                                        value: "normal"
                                    },
                                    {
                                        label: "å·¦å³æ‘†æ”¾",
                                        value: "horizontal"
                                    },
                                    {
                                        label: "å†…è”",
                                        value: "inline"
                                    }]
                                },
                                r.getSchemaTplByName("horizontal", {
                                    visibleOn: 'data.mode == "horizontal"'
                                }), r.getSchemaTplByName("api", {
                                    label: "ä¿å­˜æŽ¥å£",
                                    description: "å¦‚æžœæŽ¥å£è¿”å›žäº† <code>step</code> å˜é‡ï¼Œä¸”æ•°å€¼æ˜¯æ•°å­—ç±»åž‹ï¼Œæ¯”å¦‚ <code>3</code>ï¼Œæäº¤å®ŒåŽå›žè·³åˆ°ç¬¬ 3 æ­¥"
                                }), {
                                    label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼?",
                                    remark: {
                                        trigger: "click",
                                        rootClose: !0,
                                        title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                        content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                        placement: "right"
                                    },
                                    type: "switch",
                                    name: "asyncApi",
                                    visibleOn: "data.api",
                                    pipeIn: function(e) {
                                        return null != e
                                    },
                                    pipeOut: function(e) {
                                        return e ? "": void 0
                                    },
                                    mode: "inline",
                                    className: "block"
                                },
                                r.getSchemaTplByName("api", {
                                    name: "asyncApi",
                                    label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                                    visibleOn: "data.asyncApi != null",
                                    description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•æäº¤å‘é€ä¿å­˜æŽ¥å£åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                                }), {
                                    type: "divider"
                                },
                                r.getSchemaTplByName("api", {
                                    name: "initApi",
                                    label: "åˆå§‹åŒ–æŽ¥å£",
                                    description: "ç”¨æ¥åˆå§‹åŒ–è¡¨å•æ•°æ®"
                                }), {
                                    label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                    remark: {
                                        trigger: "click",
                                        rootClose: !0,
                                        title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                        content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                        placement: "right"
                                    },
                                    type: "switch",
                                    name: "initAsyncApi",
                                    visibleOn: "data.initApi",
                                    pipeIn: function(e) {
                                        return null != e
                                    },
                                    pipeOut: function(e) {
                                        return e ? "": void 0
                                    },
                                    mode: "inline",
                                    className: "block"
                                },
                                r.getSchemaTplByName("api", {
                                    name: "initAsyncApi",
                                    label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                                    visibleOn: "data.initAsyncApi != null",
                                    description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•è¯·æ±‚ initApi åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                                }), r.getSchemaTplByName("initFetch"), {
                                    label: "æ˜¯å¦å¯è¢«ç‚¹å¼€",
                                    type: "text",
                                    name: "jumpableOn",
                                    description: "ç”¨è¡¨è¾¾å¼æ¥å†³å®šï¼Œå½“å‰æ­¥éª¤æ˜¯å¦å¯è¢«ç‚¹å¼€ã€‚é¢å¤–å¯ç”¨å˜é‡ï¼šcurrentStep è¡¨ç¤ºå½“å‰æ­¥éª¤ã€‚"
                                }]
                            }]
                        }]
                    },
                    {
                        title: "æŽ¥å£",
                        controls: [r.getSchemaTplByName("api", {
                            name: "initApi",
                            label: "åˆå§‹åŒ–æŽ¥å£",
                            description: "ç”¨æ¥åˆå§‹åŒ–å‘å¯¼æ•°æ®ï¼Œå½“æŽ¥å£ä¸­è¿”å›ž <code>step</code> å­—æ®µæ—¶ï¼Œå¯ä»¥æŽ§åˆ¶é»˜è®¤è·³è½¬åˆ°ç¬¬å‡ æ­¥ï¼Œæ³¨æ„æ•°å€¼ä¸€å®šå¾—æ˜¯æ•°å­—ç±»åž‹ã€‚å½“è¿”å›ž <code>submiting</code> å¹¶ä¸”å½“å‰æ­¥éª¤ä¸­å­˜åœ¨å¼‚æ­¥ä¿å­˜æŽ¥å£æ—¶ï¼Œå¯ä»¥è®© wizard åˆå§‹è¿›å…¥å¼‚æ­¥æäº¤çŠ¶æ€ã€‚"
                        }), {
                            label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                            remark: {
                                trigger: "click",
                                rootClose: !0,
                                title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                placement: "right"
                            },
                            type: "switch",
                            name: "initAsyncApi",
                            visibleOn: "data.initApi",
                            pipeIn: function(e) {
                                return null != e
                            },
                            pipeOut: function(e) {
                                return e ? "": void 0
                            },
                            mode: "inline"
                        },
                        r.getSchemaTplByName("api", {
                            name: "initAsyncApi",
                            label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                            visibleOn: "data.initAsyncApi != null",
                            description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•è¯·æ±‚ initApi åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                        }), {
                            name: "initFetch",
                            type: "radios",
                            label: "æ˜¯å¦åˆå§‹æ‹‰å–",
                            inline: !0,
                            options: [{
                                label: "æ˜¯",
                                value: !0
                            },
                            {
                                label: "å¦",
                                value: !1
                            },
                            {
                                label: "è¡¨è¾¾å¼",
                                value: ""
                            }]
                        },
                        {
                            name: "initFetch",
                            autoComplete: !1,
                            visibleOn: 'typeof this.initFetch !== "boolean"',
                            type: "text",
                            placeholder: "",
                            className: "m-t-n-sm"
                        },
                        {
                            type: "divider"
                        },
                        r.getSchemaTplByName("api", {
                            label: "ä¿å­˜æŽ¥å£",
                            description: "ç”¨æ¥ä¿å­˜è¡¨å•æ•°æ®, æœ€åŽä¸€æ­¥ç‚¹å‡»å®Œæˆè§¦å‘ï¼Œ<code>å¦‚æžœæœ€åŽä¸€æ­¥ä¸­å·²ç»è®¾ç½®ä¿å­˜æŽ¥å£ï¼Œåˆ™æ­¤å¤„è®¾ç½®æ— æ•ˆã€‚</code>"
                        }), {
                            label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼?",
                            remark: {
                                trigger: "click",
                                rootClose: !0,
                                title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                placement: "right"
                            },
                            type: "switch",
                            name: "asyncApi",
                            visibleOn: "data.api",
                            pipeIn: function(e) {
                                return null != e
                            },
                            pipeOut: function(e) {
                                return e ? "": void 0
                            },
                            mode: "inline"
                        },
                        r.getSchemaTplByName("api", {
                            name: "asyncApi",
                            label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                            visibleOn: "data.asyncApi != null",
                            description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•æäº¤å‘é€ä¿å­˜æŽ¥å£åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                        })]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "mode",
                            label: "å±•ç¤ºæ¨¡å¼",
                            type: "button-group",
                            size: "sm",
                            mode: "inline",
                            className: "w-full",
                            value: "horizontal",
                            options: [{
                                label: "æ°´å¹³",
                                value: "horizontal"
                            },
                            {
                                label: "åž‚ç›´",
                                value: "vertical"
                            }]
                        },
                        {
                            name: "actionPrevLabel",
                            label: "ä¸Šä¸€æ­¥æŒ‰é’®åç§°",
                            type: "text",
                            pipeIn: r.defaultValue("ä¸Šä¸€æ­¥")
                        },
                        {
                            name: "actionNextLabel",
                            label: "ä¸‹ä¸€æ­¥æŒ‰é’®åç§°",
                            type: "text",
                            pipeIn: r.defaultValue("ä¸‹ä¸€æ­¥")
                        },
                        {
                            name: "actionNextSaveLabel",
                            label: "ä¿å­˜å¹¶ä¸‹ä¸€æ­¥æŒ‰é’®åç§°",
                            type: "text",
                            pipeIn: r.defaultValue("ä¿å­˜å¹¶ä¸‹ä¸€æ­¥")
                        },
                        {
                            name: "actionFinishLabel",
                            label: "å®ŒæˆæŒ‰é’®åç§°",
                            type: "text",
                            pipeIn: r.defaultValue("å®Œæˆ")
                        },
                        {
                            type: "alert",
                            level: "info",
                            body: "æ¸©é¦¨æç¤ºï¼šæ“ä½œæŒ‰é’®æ¯ä¸ªæ­¥éª¤å¯ä»¥å•ç‹¬é…ç½®ï¼Œè¯·åœ¨å³ä¾§åˆ‡æ¢åˆ°éœ€è¦å•ç‹¬é…ç½®çš„æ­¥éª¤åŽï¼Œç‚¹å‡»ä¸‹æ–¹çš„ã€è‡ªå®šä¹‰æŒ‰é’®ã€‘å®šåˆ¶ã€‚"
                        },
                        r.getSchemaTplByName("className"), r.getSchemaTplByName("className", {
                            name: "actionClassName",
                            label: "æŒ‰é’® CSS ç±»å"
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [r.getSchemaTplByName("ref"), r.getSchemaTplByName("name"), r.getSchemaTplByName("reload"), {
                            label: "è·³è½¬",
                            name: "redirect",
                            type: "text",
                            description: "å½“è®¾ç½®æ­¤å€¼åŽï¼Œè¡¨å•æäº¤å®ŒåŽè·³è½¬åˆ°ç›®æ ‡åœ°å€ã€‚"
                        },
                        r.getSchemaTplByName("visible")]
                    }])]
                },
                l.handleJumpPrev = l.handleJumpPrev.bind(l),
                l.handleJumpNext = l.handleJumpNext.bind(l),
                l.switchTo = l.switchTo.bind(l),
                l
            }
            return l.__extends(t, e),
            t.prototype.handleJumpPrev = function() {
                var e = this.ref;
                if (e || e.gotoStep) {
                    var t = e.state.currentStep;
                    e.gotoStep(t - 1)
                }
            },
            t.prototype.handleJumpNext = function() {
                var e = this.ref;
                if (e || e.gotoStep) {
                    var t = e.state.currentStep;
                    e.gotoStep(t + 1)
                }
            },
            t.prototype.switchTo = function(e) {
                var t = this.ref; (t || t.gotoStep) && t.gotoStep(e + 1)
            },
            t.prototype.renderSecondaryToolbars = function() {
                return i.
            default.createElement("div", {
                    className: "ae-Editor-toolbar sencondary",
                    key: "secondary-toolbar"
                },
                i.
            default.createElement("button", {
                    type: "button",
                    "data-tooltip": "ä¸Šä¸€æ­¥",
                    "data-position": "bottom",
                    onClick: this.handleJumpPrev
                },
                i.
            default.createElement("i", {
                    className: "fa fa-chevron-left"
                })), i.
            default.createElement("button", {
                    type: "button",
                    "data-tooltip": "ä¸‹ä¸€æ­¥",
                    "data-position": "bottom",
                    onClick: this.handleJumpNext
                },
                i.
            default.createElement("i", {
                    className: "fa fa-chevron-right"
                })))
            },
            t = l.__decorate([n.Editor("wizard", {
                name: "è¡¨å•å‘å¯¼",
                type: "wizard",
                tags: ["åŠŸèƒ½"],
                icon: "fa fa-list-ol",
                description: "è¡¨å•å‘å¯¼ï¼Œå¯ä»¥å°†å¤æ‚çš„å¤šä¸ªè¡¨å•é¡¹æ‹†åˆ†æˆå¤šä¸ªæ­¥éª¤ï¼Œä¸€æ­¥ä¸€æ­¥æŒ‡å¼•ç”¨æˆ·å®Œæˆå¡«å†™ã€‚",
                previewSchema: {
                    type: "wizard",
                    className: "text-left m-b-none",
                    steps: [{
                        title: "ç¬¬ä¸€æ­¥",
                        controls: [{
                            type: "text",
                            label: "æ–‡æœ¬",
                            name: "var1"
                        }]
                    },
                    {
                        title: "ç¬¬äºŒæ­¥",
                        controls: []
                    }]
                },
                scaffold: {
                    type: "wizard",
                    steps: [{
                        title: "ç¬¬ä¸€æ­¥",
                        controls: [{
                            type: "text",
                            label: "æ–‡æœ¬",
                            name: "var1"
                        }]
                    },
                    {
                        title: "ç¬¬äºŒæ­¥",
                        controls: [{
                            type: "text",
                            label: "æ–‡æœ¬2",
                            name: "var2"
                        }]
                    }]
                },
                $schema: "https://isuda.baidu.com/schemas/WizardSchema.json"
            },
            {
                renderWizard: function() {
                    var e = this,
                    t = this.super();
                    if (!this.props.$editor) return t;
                    var a = t.props.children,
                    n = this.props.steps,
                    o = this.state.currentStep - 1;
                    return Array.isArray(n) && a && (a = n.map((function(t, n) {
                        if (n === o) {
                            var r = a[3].props.children[0],
                            p = a[0];
                            return i.
                        default.createElement(s.WizardStepEditor, l.__assign({},
                            t, {
                                key: "outter_" + n,
                                $path: e.props.$path + "/form/0",
                                $$replaceable: !1,
                                index: n,
                                classnames: e.props.classnames,
                                render: e.props.render,
                                stepsDom: p,
                                actionsDom: r
                            }))
                        }
                        return i.
                    default.createElement(s.WizardStepEditor, l.__assign({},
                        t, {
                            key: "outter_" + n,
                            index: n,
                            $path: e.props.$path,
                            $$replaceable: !1
                        }))
                    })), t = i.
                default.cloneElement(t, {
                        children: a
                    })),
                    t
                }
            }), l.__metadata("design:paramtypes", [Object, Object])], t)
        } (o.
    default);
        t.WizardEditor = p
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.WizardStepEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(9)),
        n = a(3),
        o = a(2),
        r = l.__importDefault(a(11)),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "æ­¥éª¤" + (t.props.index + 1),
                t.containers = ["controls", "actions"],
                t.containerLabels = ["è¡¨å•é¡¹", "æŒ‰é’®æ "],
                t.settingsSchema = {
                    title: "æ­¥éª¤é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "å¸¸è§„",
                        controls: [{
                            name: "title",
                            type: "text",
                            label: "æ ‡é¢˜",
                            pipeIn: function(e, t) {
                                return e || t.label
                            }
                        },
                        o.getSchemaTplByName("api", {
                            label: "ä¿å­˜æŽ¥å£",
                            description: "å¦‚æžœæŽ¥å£è¿”å›žäº† <code>step</code> å˜é‡ï¼Œä¸”æ•°å€¼æ˜¯æ•°å­—ç±»åž‹ï¼Œæ¯”å¦‚ <code>3</code>ï¼Œæäº¤å®ŒåŽå›žè·³åˆ°ç¬¬ 3 æ­¥"
                        }), {
                            label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼?",
                            remark: {
                                trigger: "click",
                                rootClose: !0,
                                title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                placement: "right"
                            },
                            type: "switch",
                            name: "asyncApi",
                            visibleOn: "data.api",
                            pipeIn: function(e) {
                                return null != e
                            },
                            pipeOut: function(e) {
                                return e ? "": void 0
                            },
                            mode: "inline",
                            className: "block"
                        },
                        o.getSchemaTplByName("api", {
                            name: "asyncApi",
                            label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                            visibleOn: "data.asyncApi != null",
                            description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•æäº¤å‘é€ä¿å­˜æŽ¥å£åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                        }), {
                            type: "divider"
                        },
                        o.getSchemaTplByName("api", {
                            name: "initApi",
                            label: "åˆå§‹åŒ–æŽ¥å£",
                            description: "ç”¨æ¥åˆå§‹åŒ–è¡¨å•æ•°æ®"
                        }), {
                            label: "é‡‡ç”¨å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                            remark: {
                                trigger: "click",
                                rootClose: !0,
                                title: "ä»€ä¹ˆæ˜¯å¼‚æ­¥æ–¹å¼ï¼Ÿ",
                                content: "å¼‚æ­¥æ–¹å¼ä¸»è¦ç”¨æ¥è§£å†³è¯·æ±‚è¶…æ—¶é—®é¢˜ï¼Œå¯ç”¨å¼‚æ­¥æ–¹å¼åŽï¼Œç¨‹åºä¼šåœ¨è¯·æ±‚å®ŒåŽï¼Œå®šæ—¶è½®è¯¢è¯·æ±‚é¢å¤–çš„æŽ¥å£ç”¨æ¥å’¨è¯¢æ“ä½œæ˜¯å¦å®Œæˆã€‚æ‰€ä»¥æŽ¥å£å¯ä»¥å¿«é€Ÿçš„è¿”å›žï¼Œè€Œä¸éœ€è¦ç­‰å¾…æµç¨‹çœŸæ­£å®Œæˆã€‚",
                                placement: "right"
                            },
                            type: "switch",
                            name: "initAsyncApi",
                            visibleOn: "data.initApi",
                            pipeIn: function(e) {
                                return null != e
                            },
                            pipeOut: function(e) {
                                return e ? "": void 0
                            },
                            mode: "inline",
                            className: "block"
                        },
                        o.getSchemaTplByName("api", {
                            name: "initAsyncApi",
                            label: "å¼‚æ­¥æ£€æµ‹æŽ¥å£",
                            visibleOn: "data.initAsyncApi != null",
                            description: "è®¾ç½®æ­¤å±žæ€§åŽï¼Œè¡¨å•è¯·æ±‚ initApi åŽï¼Œè¿˜ä¼šç»§ç»­è½®è®­è¯·æ±‚è¯¥æŽ¥å£ï¼Œç›´åˆ°è¿”å›ž finished å±žæ€§ä¸º true æ‰ ç»“æŸ"
                        }), o.getSchemaTplByName("initFetch")]
                    },
                    {
                        title: "å¤–è§‚",
                        controls: [{
                            name: "mode",
                            label: "å±•ç¤ºæ¨¡å¼",
                            type: "button-group",
                            size: "xs",
                            mode: "inline",
                            className: "w-full",
                            value: "normal",
                            options: [{
                                label: "é»˜è®¤",
                                value: "normal"
                            },
                            {
                                label: "å·¦å³æ‘†æ”¾",
                                value: "horizontal"
                            },
                            {
                                label: "å†…è”",
                                value: "inline"
                            }]
                        },
                        o.getSchemaTplByName("horizontal", {
                            visibleOn: 'data.mode == "horizontal"'
                        })]
                    },
                    {
                        title: "å…¶ä»–",
                        controls: [{
                            label: "æ˜¯å¦å¯è¢«ç‚¹å¼€",
                            type: "text",
                            name: "jumpableOn",
                            description: "ç”¨è¡¨è¾¾å¼æ¥å†³å®šï¼Œå½“å‰æ­¥éª¤æ˜¯å¦å¯è¢«ç‚¹å¼€ã€‚é¢å¤–å¯ç”¨å˜é‡ï¼šcurrentStep è¡¨ç¤ºå½“å‰æ­¥éª¤ã€‚"
                        }]
                    }])
                },
                t.regions2path = {
                    controls: "control"
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.renderRenderer = function(e) {
                var t = this;
                if (!e.actionsDom) return n.createElement("div", {
                    key: e.key,
                    ref: this.childRef,
                    "data-editor-id": this.props.$$id
                });
                var a = this.props.classnames;
                return n.createElement("div", {
                    key: e.key,
                    ref: this.childRef,
                    "data-editor-id": this.props.$$id
                },
                e.stepsDom, n.createElement("div", {
                    className: a("Wizard-stepContent")
                },
                this.renderFakeBody()), n.createElement(r.
            default, {
                    name: "actions",
                    ref: function(e) {
                        return t.regionRef("actions", e)
                    },
                    label: "æŒ‰é’®æ ",
                    hostId: this.props.$$id
                },
                e.actionsDom))
            },
            t.prototype.renderFakeBody = function() {
                var e = this,
                t = this.props.render,
                a = this.props.controls;
                return t("wizardform", {
                    type: "form",
                    wrapWithPanel: !1,
                    controls: [{
                        children: function(t) {
                            var l = t.renderFormItems;
                            return n.createElement(r.
                        default, {
                                name: "controls",
                                ref: function(t) {
                                    return e.regionRef("controls", t)
                                },
                                label: "è¡¨å•é¡¹",
                                hostId: e.props.$$id
                            },
                            l({
                                controls: a
                            },
                            "wizard"))
                        }
                    }]
                })
            },
            t.prototype.openEditForm = function() {
                e.prototype.openEditForm.call(this);
                var t = this.context.editorNode;
                t.component.switchTo && t.component.switchTo(this.props.index)
            },
            t.prototype.acceptChild = function(t, a, l) {
                return void 0 === a && (a = "body"),
                "actions" === a ? !!~ ["submit", "button", "reset"].indexOf(t) : e.prototype.acceptChild.call(this, t, a, l)
            },
            t.prototype.pickChild = function(t) {
                for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
                return "actions" === t ? e.prototype.pickChild.call(this, "action", "actions", void 0, ["button", "reset", "submit", "button-group", "dropdown-button"], !0) : "controls" === t ? e.prototype.pickChild.call(this, "control", "controls") : e.prototype.pickChild.apply(this, l.__spreadArrays([t], a))
            },
            t
        } (i.
    default);
        t.WizardStepEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        }),
        t.WrapperEditor = void 0;
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(1),
        o = a(2),
        r = a(5),
        s = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.tipName = "Wrapper",
                t.dropable = !0,
                t.containers = ["body"],
                t.containerLabels = ["å†…å®¹åŒº"],
                t.settingsSchema = {
                    title: "åŒ…è£¹é…ç½®",
                    controls: o.getSchemaTplByName("tabs", [{
                        title: "åŸºæœ¬",
                        controls: [{
                            children: i.
                        default.createElement(r.Button, {
                                size: "sm",
                                className: "m-b-sm",
                                level: "info",
                                block: !0,
                                onClick: function() {
                                    t.pickChild("body")
                                }
                            },
                            "æ–°å¢žå†…å®¹")
                        },
                        {
                            type: "divider"
                        },
                        o.getSchemaTplByName("size", {
                            label: "å†…é—´è·å¤§å°",
                            options: [{
                                label: "æžå°",
                                value: "xs"
                            },
                            {
                                label: "å°",
                                value: "sm"
                            },
                            {
                                label: "é»˜è®¤",
                                value: ""
                            },
                            {
                                label: "ä¸­",
                                value: "md"
                            },
                            {
                                label: "å¤§",
                                value: "lg"
                            },
                            {
                                label: "æ— ",
                                value: "none"
                            }],
                            pipeIn: o.defaultValue("")
                        }), o.getSchemaTplByName("className", {
                            description: "è®¾ç½®æ ·å¼åŽï¼Œå¤§å°è®¾ç½®å°†æ— æ•ˆã€‚",
                            pipeIn: o.defaultValue("bg-white")
                        })]
                    }])
                },
                t
            }
            return l.__extends(t, e),
            t = l.__decorate([n.Editor("wrapper", {
                name: "åŒ…è£¹",
                type: "wrapper",
                description: "ç±»ä¼¼äºŽå®¹å™¨ï¼Œå”¯ä¸€çš„åŒºåˆ«åœ¨äºŽä¼šé»˜è®¤ä¼šæœ‰ä¸€å±‚å†…è¾¹è·ã€‚",
                tags: ["å®¹å™¨"],
                icon: "fa fa-tablet",
                previewSchema: {
                    type: "wrapper",
                    body: "åŒ…è£¹",
                    className: "b-a b-light"
                },
                scaffold: {
                    type: "wrapper",
                    body: "å†…å®¹"
                },
                $schema: "https://isuda.baidu.com/schemas/WrapperSchema.json"
            })], t)
        } (l.__importDefault(a(9)).
    default);
        t.WrapperEditor = s
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(5),
        o = l.__importDefault(a(145)),
        r = l.__importDefault(a(24)),
        s = l.__importDefault(a(35)),
        p = a(4),
        c = l.__importDefault(a(148)),
        d = l.__importDefault(a(9)),
        m = a(19),
        u = a(149),
        h = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.id = Date.now(),
                t.innerRef = i.
            default.createRef(),
                t.toDispose = [],
                t.state = {
                    data: t.data = t.pipeIn(t.props),
                    raw: t.raw,
                    schema: t.props.settings && t.props.settings.schema || {}
                },
                t.handleSelect = function(e, a) {
                    void 0 === a && (a = !1);
                    var i = t.props.settings,
                    n = {
                        activeKey: e,
                        data: t.data
                    };
                    e !== t.state.activeKey || a ? "code" === e && "form" === t.state.activeKey && i ? n.raw = t.raw = i.getRaw() : "form" === e && "code" === t.state.activeKey && i && (n.data = t.data = l.__assign(l.__assign({},
                    t.data), t.raw)) : n.activeKey = "none",
                    t.setState(n)
                },
                t.formChangedAt = 0,
                t.handleFormChange = function(e) {
                    var a = t.props.settings;
                    Date.now() - t.formChangedAt < 200 || (t.data = e, a && a.onChange && a.onChange(t.pipeOut(e), "form"))
                },
                t.handleCodeChange = function(e, a) {
                    var i = t.props.settings,
                    o = void 0;
                    if (Object.keys(a).length) {
                        var r = function(e, t) {
                            var a = l.__assign({},
                            e);
                            return Object.keys(t).forEach((function(e) {
                                var i, o, s = t[e],
                                c = a[e];
                                if (void 0 === s) {
                                    var d = p.JSONPipeOut(((i = {})[e] = "", i));
                                    delete a[Object.keys(d)[0]]
                                } else n.utils.isObject(s) && n.utils.isObject(c) ? a[e] = r(c, s) : a = l.__assign(l.__assign({},
                                a), p.JSONPipeOut(((o = {})[e] = s, o)))
                            })),
                            a
                        };
                        t.data = r(t.data, a),
                        o = function() {
                            return i && i.onChange && i.onChange(t.pipeOut(t.data), "code")
                        }
                    }
                    t.raw = e,
                    t.setState({
                        raw: t.raw
                    },
                    o)
                },
                t.startX = 0,
                t.startWidth = 0,
                t
            }
            return l.__extends(t, e),
            t.prototype.pipeIn = function(e) {
                var t = e.settings;
                return this.raw = {},
                t ? (this.raw = t.getRaw(), p.JSONPipeOut(t.getValue && t.getValue() || t.value)) : {}
            },
            t.prototype.pipeOut = function(e) {
                return p.JSONPipeIn(e)
            },
            t.prototype.componentDidUpdate = function(e) {
                var t = this.props;
                if (t.showDropableNodesOnly !== e.showDropableNodesOnly ? (t.showDropableNodesOnly && this.state.activeKey && (this.lastKey = this.state.activeKey), this.openTab(t.showDropableNodesOnly ? "nav": this.lastKey)) : e.settings && !t.settings && "form" === this.state.activeKey && this.openTab("nav"), e.settings !== t.settings) {
                    var a = this.state.activeKey;
                    if (t.settings ? ("code" !== a || t.settings.$schema) && ("renderers" !== a || t.settings.editor instanceof d.
                default && t.settings.editor.allSubRenderers.length) || (a = "form") : a = "nav", e.settings && this.form) {
                        var i = this.form.getValue();
                        this.form.flush();
                        var n = this.form.getValue();
                        if (m.isObjectShallowModified(i, n, !1)) {
                            var o = l.__assign({},
                            n),
                            r = e.settings;
                            this.formChangedAt = Date.now(),
                            this.data = o,
                            r && r.onChange && r.onChange(this.pipeOut(o), "form")
                        }
                    }
                    this.setState({
                        data: this.data = this.pipeIn(t),
                        raw: this.raw,
                        activeKey: a || "form",
                        schema: t.settings && t.settings.schema
                    })
                }
            },
            t.prototype.openTab = function(e) {
                this.handleSelect(e, !0)
            },
            t.prototype.getPopOverContainer = function() {
                return this.innerRef.current
            },
            t.prototype.formRef = function(e) {
                this.form = e
            },
            t.prototype.updateSettings = function(e, t) {
                "form" !== t && this.props.settings && "code" !== this.state.activeKey ? this.setState({
                    data: this.data = this.pipeIn(this.props),
                    raw: this.raw
                }) : "undo" !== t && "redo" !== t || this.setState({
                    data: this.data = this.pipeIn(this.props),
                    raw: this.raw
                })
            },
            t.prototype.handleResizeMouseDown = function(e) {
                3 == e.nativeEvent.which || (this.codeWrap = e.currentTarget.parentElement, document.addEventListener("mousemove", this.handleResizeMouseMove), document.addEventListener("mouseup", this.handleResizeMouseUp), this.startX = e.clientX, this.startWidth = this.codeWrap.offsetWidth)
            },
            t.prototype.handleResizeMouseMove = function(e) {
                var t = e.clientX - this.startX;
                this.codeWrap.style.cssText += "width: " + Math.max(this.startWidth + t, 300) + "px"
            },
            t.prototype.handleResizeMouseUp = function() {
                document.removeEventListener("mousemove", this.handleResizeMouseMove),
                document.removeEventListener("mouseup", this.handleResizeMouseUp)
            },
            t.prototype.render = function() {
                var e = this.props.settings,
                t = this.props.theme,
                a = (this.props.size, this.props.onSizeToggle, this.props.onSelect),
                l = this.props.onHover,
                p = this.props.activeId,
                m = this.props.outline,
                h = this.props.showDropableNodesOnly,
                b = t ? u.getTheme(t).classnames: n.classnames;
                return i.
            default.createElement("div", {
                    className: b("ae-Settings", this.state.activeKey && "none" !== this.state.activeKey ? "is-active": "")
                },
                i.
            default.createElement("div", {
                    className: "ae-Settings-inner",
                    ref: this.innerRef
                },
                i.
            default.createElement(n.Tabs, {
                    theme: t,
                    className: b("ae-Settings-tabs"),
                    contentClassName: b("ae-Settings-tabs-content"),
                    classnames: n.classnames,
                    activeKey: this.state.activeKey || "nav",
                    onSelect: this.handleSelect
                },
                i.
            default.createElement(n.Tab, {
                    eventKey: "nav",
                    title: "å¤§çº²",
                    icon: "fa fa-navicon"
                },
                i.
            default.createElement("div", {
                    className: "ae-Settings-content"
                },
                i.
            default.createElement(o.
            default, {
                    onHover: l,
                    onSelect: a,
                    options: m,
                    value: p,
                    showDropableNodesOnly: h
                }))), i.
            default.createElement(n.Tab, {
                    eventKey: "form",
                    title: "è®¾ç½®",
                    icon: "fa fa-cog"
                },
                e ? i.
            default.createElement(r.
            default, {
                    ref: this.formRef,
                    schema: this.state.schema,
                    value: this.state.data,
                    onChange: this.handleFormChange,
                    popOverContainer: this.getPopOverContainer,
                    theme: this.props.theme
                }) : i.
            default.createElement("p", {
                    className: "ae-Settings-placeholder"
                },
                "è¯·å…ˆä»Žå³ä¾§ç‚¹é€‰ä½ æƒ³è¦ç¼–è¾‘çš„ç»„ä»¶")), i.
            default.createElement(n.Tab, {
                    eventKey: "renderers",
                    title: "ç»„ä»¶",
                    icon: "fa fa-cube"
                },
                e && e.editor && e.editor instanceof d.
            default && e.editor.allSubRenderers.length ? i.
            default.createElement(c.
            default, {
                    id: e.id,
                    editor: e.editor
                }) : e ? i.
            default.createElement("p", {
                    className: "ae-Settings-placeholder"
                },
                "éžå®¹å™¨ç»„ä»¶ä¸å¯æ‹–å…¥ç»„ä»¶") : i.
            default.createElement("p", {
                    className: "ae-Settings-placeholder"
                },
                "è¯·å…ˆä»Žå³ä¾§ç‚¹é€‰ä½ æƒ³è¦ç¼–è¾‘çš„ç»„ä»¶")), i.
            default.createElement(n.Tab, {
                    eventKey: "code",
                    title: "ä»£ç ",
                    icon: "fa fa-code"
                },
                e && e.$schema ? i.
            default.createElement("div", {
                    className: "ae-Editor-codePane"
                },
                i.
            default.createElement(s.
            default, {
                    $schema: e.$schema,
                    value: this.state.raw,
                    onChange: this.handleCodeChange,
                    theme: this.props.theme,
                    $schemaUrl: this.props.$schemaUrl
                }), i.
            default.createElement("div", {
                    onMouseDown: this.handleResizeMouseDown,
                    className: "ae-Editor-codeResizor"
                })) : e ? i.
            default.createElement("p", {
                    className: "ae-Settings-placeholder"
                },
                "å½“å‰ç»„ä»¶ä¸æ”¯æŒä»£ç ç¼–è¾‘") : i.
            default.createElement("p", {
                    className: "ae-Settings-placeholder"
                },
                "è¯·å…ˆä»Žå³ä¾§ç‚¹é€‰ä½ æƒ³è¦ç¼–è¾‘çš„ç»„ä»¶")))))
            },
            l.__decorate([n.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "getPopOverContainer", null),
            l.__decorate([n.utils.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "formRef", null),
            l.__decorate([p.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [String, String]), l.__metadata("design:returntype", void 0)], t.prototype, "updateSettings", null),
            l.__decorate([p.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleResizeMouseDown", null),
            l.__decorate([p.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [MouseEvent]), l.__metadata("design:returntype", void 0)], t.prototype, "handleResizeMouseMove", null),
            l.__decorate([p.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "handleResizeMouseUp", null),
            t
        } (i.
    default.PureComponent);
        t.
    default = h
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = l.__importDefault(a(13)),
        o = l.__importDefault(a(16)),
        r = a(5);
        function s(e, t) {
            return e
        }
        var p = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                return a.state = {
                    options: s(t.options, t.showDropableNodesOnly),
                    folded: {}
                },
                a.handleClick = a.handleClick.bind(a),
                a.handleEnter = a.handleEnter.bind(a),
                a.handleExpanderClick = a.handleExpanderClick.bind(a),
                a.handleDragStart = a.handleDragStart.bind(a),
                a.handleDragOver = a.handleDragOver.bind(a),
                a
            }
            return l.__extends(t, e),
            t.prototype.componentWillReceiveProps = function(e) {
                var t = this.props;
                t.options === e.options && t.showDropableNodesOnly === e.showDropableNodesOnly || this.setState({
                    options: s(e.options, e.showDropableNodesOnly)
                })
            },
            t.prototype.handleClick = function(e) {
                var t = this.props.onSelect;
                e.isDefaultPrevented() || t(e.currentTarget.closest("[data-node-id]").getAttribute("data-node-id"))
            },
            t.prototype.handleEnter = function(e) {
                var t = this.props.onHover;
                e.isDefaultPrevented() || t(e.currentTarget.closest("[data-node-id]").getAttribute("data-node-id"))
            },
            t.prototype.handleExpanderClick = function(e) {
                var t;
                e.preventDefault();
                var a = e.currentTarget.closest("[data-node-id]").getAttribute("data-node-id");
                this.setState({
                    folded: l.__assign(l.__assign({},
                    this.state.folded), (t = {},
                    t[a] = !this.state.folded[a], t))
                })
            },
            t.prototype.handleDragStart = function(e) {
                var t = e.currentTarget,
                a = this.context.editor,
                l = document.querySelector('[data-editor-id="' + t.getAttribute("data-node-id") + '"]');
                t && a && l && a.onDragStart(e, l)
            },
            t.prototype.handleDragOver = function(e) {
                var t = e.target,
                a = this.context.editor;
                if (t && a) {
                    var l = t.closest("[data-dropable][data-node-id]");
                    if (l) {
                        a.setDropId(l.getAttribute("data-node-id"));
                        var i = l.getAttribute("data-node-id").split("-region-"),
                        n = i[0],
                        o = i[1];
                        if (o) {
                            var r = document.querySelector('[data-editor-id="' + n + '"] [data-region="' + o + '"]');
                            r && a.onDragOver(e, r)
                        }
                    }
                }
            },
            t.prototype.renderItem = function(e, t) {
                var a = this,
                l = e.children && e.children.length,
                o = this.context.editor;
                return i.
            default.createElement("li", {
                    className: n.
                default("ae-Outline-node", {
                        "is-folded": !this.props.showDropableNodesOnly && this.state.folded[e.value] || o.getDragId() === e.value,
                        "is-active": e.value === this.props.value,
                        "is-region": e.isRegion,
                        "has-children": l,
                        "is-dragging": o.getDragId() === e.value
                    }),
                    key: t
                },
                i.
            default.createElement("a", {
                    onClick: this.handleClick,
                    onMouseEnter: this.handleEnter,
                    "data-node-id": e.value,
                    "data-dropable": e.dropable && o.getDragId() !== e.value ? "dropable": void 0,
                    draggable: e.draggable,
                    onDragStart: this.handleDragStart
                },
                l ? i.
            default.createElement("span", {
                    onClick: this.handleExpanderClick,
                    className: n.
                default("ae-Outline-expander", {
                        "is-folded": !this.props.showDropableNodesOnly && this.state.folded[e.value]
                    })
                },
                i.
            default.createElement(r.Icon, {
                    icon: "right-arrow-bold"
                })) : null, e.label), l ? i.
            default.createElement("ul", {
                    className: "ae-Outline-sublist"
                },
                e.children.map((function(e, t) {
                    return a.renderItem(e, t)
                }))) : null)
            },
            t.prototype.render = function() {
                var e = this,
                t = this.props.showDropableNodesOnly,
                a = this.state.options;
                return i.
            default.createElement("div", {
                    className: n.
                default("ae-Outline", {
                        "ae-Outline--draging": t
                    }),
                    onDragOver: this.handleDragOver
                },
                t ? i.
            default.createElement("div", {
                    className: "ae-Outline-tip"
                },
                "å°†ç›®æ ‡æ‹–å…¥å¯¼èˆªä¸­çš„èŠ‚ç‚¹å¯ä»¥åˆ‡æ¢å®¹å™¨ï¼") : null, a.length ? i.
            default.createElement("ul", {
                    className: "ae-Outline-list"
                },
                a.map((function(t, a) {
                    return e.renderItem(t, a)
                }))) : i.
            default.createElement("div", null, "è®¡ç®—ä¸­ï¼Œè¯·ç¨ç­‰ã€‚ã€‚"))
            },
            t.contextTypes = {
                editor: o.
            default.object
            },
            t
        } (i.
    default.PureComponent);
        t.
    default = p
    },
    function(e, t) {
        e.exports = require("58cb658")
    },
    function(e, t) {
        e.exports = require("09afeaf")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = l.__importDefault(a(16)),
        o = l.__importDefault(a(13)),
        r = a(5),
        s = a(4),
        p = a(24),
        c = function(e) {
            function t(t) {
                var a = e.call(this, t) || this;
                a.id = s.guid();
                var l = a.build(a.props);
                return a.state = {
                    items: l,
                    filteredItems: l,
                    keywords: ""
                },
                a
            }
            return l.__extends(t, e),
            t.prototype.build = function(e) {
                return void 0 === e && (e = this.props),
                e.editor.getAvaiableSubRenderers()
            },
            t.prototype.componentDidUpdate = function(e) {
                if (this.props.id !== e.id) {
                    var t = this.build(this.props);
                    this.setState({
                        items: t,
                        filteredItems: t,
                        keywords: ""
                    })
                }
            },
            t.prototype.handleDragStart = function(e) {
                var t = e.currentTarget,
                a = parseInt(t.getAttribute("data-index"), 10),
                l = this.state.filteredItems[a];
                e.dataTransfer.effectAllowed = "copy",
                e.dataTransfer.setData("dnd/data", JSON.stringify(l.value)),
                e.dataTransfer.setData(("dnd/ae-editor-" + this.id + "-" + l.id).toLowerCase(), "ae-editor-" + l.value.type)
            },
            t.prototype.handleFilterChange = function(e) {
                var t = this.state.items.concat();
                if (e) {
                    var a = new RegExp(e, "i");
                    t = t.filter((function(e) {
                        return ["label", "description", "value.type"].some((function(t) {
                            return r.resolveVariable(t, e) && a.test(r.resolveVariable(t, e))
                        }))
                    }))
                }
                this.setState({
                    keywords: e,
                    filteredItems: t
                })
            },
            t.prototype.handleFilterReset = function() {
                this.handleFilterChange("")
            },
            t.prototype.renderThumb = function(e) {
                return e ? r.render(e, {
                    onAction: s.noop
                },
                p.getEnv()) : i.
            default.createElement("p", null, "æ²¡æœ‰é¢„è§ˆå›¾")
            },
            t.prototype.render = function() {
                var e = this,
                t = this.state,
                a = (t.items, t.keywords, t.filteredItems),
                l = {};
                a.forEach((function(e, t) {
                    var a; (null === (a = e.tags) || void 0 === a ? void 0 : a.length) ? e.tags.forEach((function(a) {
                        l[a] = l[a] || [],
                        l[a].push({
                            item: e,
                            index: t
                        })
                    })) : (l["å…¶ä»–"] = l["å…¶ä»–"] || [], l["å…¶ä»–"].push({
                        item: e,
                        index: t
                    }))
                }));
                var n = Object.keys(l),
                s = n.indexOf("å…¶ä»–");
                return~s && (n.splice(s, 1), n.push("å…¶ä»–")),
                i.
            default.createElement("div", {
                    className: "ae-RendererList"
                },
                i.
            default.createElement("div", {
                    className: "p-l p-r m-b-xs"
                },
                i.
            default.createElement(r.InputBox, {
                    value: this.state.keywords,
                    onChange: this.handleFilterChange,
                    placeholder: "è¾“å…¥å…³é”®å­—å¯è¿‡æ»¤ç»„ä»¶",
                    clearable: !1
                },
                this.state.keywords ? i.
            default.createElement("a", {
                    onClick: this.handleFilterReset
                },
                i.
            default.createElement(r.Icon, {
                    icon: "close",
                    className: "icon"
                })) : i.
            default.createElement(r.Icon, {
                    icon: "search",
                    className: "icon"
                }))), a.length ? n.map((function(t) {
                    var a = l[t];
                    return a && a.length ? i.
                default.createElement("div", {
                        key: t,
                        className: "ae-RendererList-group"
                    },
                    i.
                default.createElement("div", {
                        className: "ae-RendererList-groupLabel"
                    },
                    t), a.map((function(t) {
                        var a = t.item,
                        l = t.index;
                        return i.
                    default.createElement("div", {
                            onDragStart: e.handleDragStart,
                            "data-index": l,
                            "data-dnd-id": "ae-editor-" + e.id + "-" + a.id,
                            "data-dnd-data": JSON.stringify(a.value),
                            key: l,
                            draggable: !0,
                            className: "ae-RendererList-item"
                        },
                        i.
                    default.createElement("i", {
                            className: o.
                        default("fa-fw", a.icon || "fa fa-dot-circle-o")
                        }), i.
                    default.createElement("div", {
                            className: "ae-RendererList-itemLabel"
                        },
                        a.label), i.
                    default.createElement("div", {
                            className: "ae-RendererList-itemInfo"
                        },
                        i.
                    default.createElement(r.TooltipWrapper, {
                            tooltipClassName: "ae-RendererThumb",
                            trigger: "click",
                            rootClose: !0,
                            placement: "right",
                            tooltip: {
                                dom: i.
                            default.createElement("div", {
                                    className: "ae-RendererInfo"
                                },
                                i.
                            default.createElement("div", null, a.description, a.docLink ? i.
                            default.createElement("a", {
                                    target: "_blank",
                                    href: a.docLink
                                },
                                "è¯¦æƒ…") : null), i.
                            default.createElement("div", {
                                    className: "ae-RendererDiv"
                                }), i.
                            default.createElement("div", {
                                    className: "ae-RendererPreview"
                                },
                                e.renderThumb(a.previewSchema)))
                            }
                        },
                        i.
                    default.createElement("a", {
                            className: "ae-RendererIcon",
                            "data-position": "bottom"
                        },
                        i.
                    default.createElement(r.Icon, {
                            icon: "info",
                            className: "icon"
                        })))))
                    }))) : null
                })) : i.
            default.createElement("span", null, "æ²¡æœ‰å¯ç”¨ç»„ä»¶ï¼Œä¹Ÿè®¸ä½ è¯¥åˆ‡æ¢å®¹å™¨è¯•è¯•ã€‚"))
            },
            t.contextTypes = {
                editor: n.
            default.object
            },
            l.__decorate([s.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleDragStart", null),
            l.__decorate([s.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [String]), l.__metadata("design:returntype", void 0)], t.prototype, "handleFilterChange", null),
            l.__decorate([s.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "handleFilterReset", null),
            t
        } (i.
    default.PureComponent);
        t.
    default = c
    },
    function(e, t) {
        e.exports = require("eb00a4d")
    },
    function(e, t) {
        e.exports = require("c2d1905")
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(19),
        o = a(4),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    links: []
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.componentDidMount = function() {
                this.syncOutline()
            },
            t.prototype.componentDidUpdate = function(e) {
                var t = this.props;
                t.activeId === e.activeId && t.outline === e.outline || this.syncOutline()
            },
            t.prototype.syncOutline = function() {
                var e = this.props,
                t = e.outline,
                a = e.activeId,
                l = [];
                a ? (n.findTree(t, (function(e, t, i, n) {
                    e.value === a && (l = n.concat(e))
                })), this.setState({
                    links: l
                })) : this.setState({
                    links: []
                })
            },
            t.prototype.handleClick = function(e) {
                var t = e.currentTarget.getAttribute("data-id"); (0, this.props.onSelect)(t)
            },
            t.prototype.handleMouseEnter = function(e) {
                var t = e.currentTarget.getAttribute("data-id"); (0, this.props.onHover)(t)
            },
            t.prototype.render = function() {
                var e = this,
                t = this.state.links,
                a = this.props.outline;
                return i.
            default.createElement("div", {
                    className: "ae-Breadcrumb"
                },
                i.
            default.createElement("span", null, "ç»„ä»¶è·¯å¾„ï¼š"), t.length ? i.
            default.createElement("ul", null, t.map((function(l, n) {
                    var o = n > 0 ? t[n - 1].children: a;
                    return i.
                default.createElement("li", {
                        key: n
                    },
                    i.
                default.createElement("a", {
                        "data-id": l.value,
                        onClick: e.handleClick,
                        onMouseEnter: e.handleMouseEnter
                    },
                    l.label), Array.isArray(o) && o.length > 1 ? i.
                default.createElement("ul", null, o.map((function(t, a) {
                        return i.
                    default.createElement("li", {
                            key: a
                        },
                        i.
                    default.createElement("a", {
                            onClick: e.handleClick,
                            onMouseEnter: e.handleMouseEnter,
                            "data-id": t.value,
                            className: t.value === l.value ? "is-active": ""
                        },
                        t.label))
                    }))) : null)
                }))) : i.
            default.createElement("span", null, "ç‚¹é€‰ç»„ä»¶å¼€å§‹ç¼–è¾‘"))
            },
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleClick", null),
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleMouseEnter", null),
            t
        } (i.
    default.Component);
        t.
    default = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3)),
        n = a(5),
        o = a(19),
        r = function(e) {
            function t() {
                var t = null !== e && e.apply(this, arguments) || this;
                return t.state = {
                    filteredItems: [],
                    keywords: "",
                    activeIndex: 0
                },
                t
            }
            return l.__extends(t, e),
            t.prototype.componentDidMount = function() {
                this.syncRenderers()
            },
            t.prototype.componentDidUpdate = function(e) {
                this.props.data.renderers !== e.data.renderers && this.syncRenderers()
            },
            t.prototype.syncRenderers = function(e) {
                void 0 === e && (e = this.state.keywords);
                var t = this.props.data.renderers.concat();
                if (e) {
                    var a = new RegExp(e, "i");
                    t = t.filter((function(e) {
                        return ["label", "description", "value.type"].some((function(t) {
                            return n.resolveVariable(t, e) && a.test(n.resolveVariable(t, e))
                        }))
                    }))
                }
                this.setState({
                    filteredItems: t
                })
            },
            t.prototype.handleSearch = function(e) {
                this.setState({
                    keywords: e
                },
                this.syncRenderers)
            },
            t.prototype.handleSeachCancel = function() {
                this.setState({
                    keywords: ""
                },
                this.syncRenderers)
            },
            t.prototype.handleLeftClick = function(e) {
                var t = parseInt(e.currentTarget.getAttribute("data-index"), 10);
                this.setState({
                    activeIndex: t
                })
            },
            t.prototype.handleClick = function(e) {
                var t = parseInt(e.currentTarget.getAttribute("data-index"), 10),
                a = this.state.filteredItems[t]; (0, this.props.onChange)(a.value)
            },
            t.prototype.hadnlDBClick = function(e) {
                if (!e.defaultPrevented) {
                    var t = parseInt(e.currentTarget.getAttribute("data-index"), 10),
                    a = this.state.filteredItems[t]; (0, this.props.onChange)(a.value, !0)
                }
            },
            t.prototype.renderRenderers = function() {
                var e = this,
                t = this.props.render,
                a = this.props.value,
                l = this.state.filteredItems,
                n = {};
                l.forEach((function(e, t) {
                    var a; (null === (a = e.tags) || void 0 === a ? void 0 : a.length) ? e.tags.forEach((function(a) {
                        n[a] = n[a] || [],
                        n[a].push({
                            item: e,
                            index: t
                        })
                    })) : (n["å…¶ä»–"] = n["å…¶ä»–"] || [], n["å…¶ä»–"].push({
                        item: e,
                        index: t
                    }))
                }));
                var o = Object.keys(n),
                r = o.indexOf("å…¶ä»–");~r && (o.splice(r, 1), o.push("å…¶ä»–")),
                o.unshift("å…¨éƒ¨");
                var s = 0 === this.state.activeIndex ? l.map((function(e, t) {
                    return {
                        item: e,
                        index: t
                    }
                })) : n[o[this.state.activeIndex]];
                return i.
            default.createElement("div", {
                    className: "ae-RenderersPicker-list"
                },
                i.
            default.createElement("ul", null, o.map((function(t, a) {
                    return i.
                default.createElement("li", {
                        key: t,
                        className: a === e.state.activeIndex ? "is-active": ""
                    },
                    i.
                default.createElement("a", {
                        "data-index": a,
                        onClick: e.handleLeftClick
                    },
                    t))
                }))), i.
            default.createElement("div", {
                    className: "ae-RenderersPicker-content"
                },
                Array.isArray(s) && s.length ? i.
            default.createElement("ul", null, s.map((function(l) {
                    var n = l.item,
                    o = l.index;
                    return i.
                default.createElement("li", {
                        className: a === n.value ? "is-active": "",
                        key: o,
                        "data-index": o,
                        onClick: e.handleClick,
                        onDoubleClick: e.hadnlDBClick
                    },
                    t("thumb", {
                        type: "ae-renderer-thumb",
                        name: "previewSchema",
                        columnClassName: "ae-Editor-rendererCol"
                    },
                    {
                        data: n
                    }), i.
                default.createElement("div", {
                        className: "ae-RenderersPicker-info"
                    },
                    i.
                default.createElement("h4", null, n.label), i.
                default.createElement("div", null, n.description, n.docLink ? i.
                default.createElement("a", {
                        target: "_blank",
                        href: n.docLink
                    },
                    "è¯¦æƒ…") : null)))
                }))) : i.
            default.createElement("div", null, "æ²¡æœ‰å¯ç”¨ç»„ä»¶ï¼Œä¹Ÿè®¸ä½ è¯¥åˆ‡æ¢å®¹å™¨è¯•è¯•ã€‚")))
            },
            t.prototype.render = function() {
                return i.
            default.createElement("div", {
                    className: "ae-RenderersPicker"
                },
                i.
            default.createElement(n.InputBox, {
                    value: this.state.keywords,
                    onChange: this.handleSearch,
                    placeholder: "è¾“å…¥å…³é”®å­—å¯è¿‡æ»¤ç»„ä»¶",
                    clearable: !1
                },
                this.state.keywords ? i.
            default.createElement("a", {
                    onClick: this.handleSeachCancel
                },
                i.
            default.createElement(n.Icon, {
                    icon: "close",
                    className: "icon"
                })) : i.
            default.createElement(n.Icon, {
                    icon: "search",
                    className: "icon"
                })), this.renderRenderers())
            },
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "syncRenderers", null),
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [String]), l.__metadata("design:returntype", void 0)], t.prototype, "handleSearch", null),
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", []), l.__metadata("design:returntype", void 0)], t.prototype, "handleSeachCancel", null),
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleLeftClick", null),
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "handleClick", null),
            l.__decorate([o.autobind, l.__metadata("design:type", Function), l.__metadata("design:paramtypes", [Object]), l.__metadata("design:returntype", void 0)], t.prototype, "hadnlDBClick", null),
            t
        } (i.
    default.Component);
        t.
    default = r
    },
    function(e, t, a) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var l = a(0),
        i = l.__importDefault(a(3));
        a(25);
        var n = l.__importDefault(a(1)),
        o = l.__importDefault(a(13)),
        r = l.__importDefault(a(10)),
        s = a(4),
        p = function(e) {
            function t() {
                return null !== e && e.apply(this, arguments) || this
            }
            return l.__extends(t, e),
            t.prototype.getChildContext = function() {
                var t = e.prototype.getChildContext.call(this);
                return t.editor.isMini = !0,
                t
            },
            t.prototype.applyPatches = function(e) {
                var t = this.getSchema();
                e.forEach((function(e) {
                    var a, i;
                    if ("update" === e.op) t = s.JSONUpdate(t, e.target, e.value);
                    else if ("replace" === e.op) t = s.JSONUpdate(t, e.target, e.value, !0);
                    else if ("delete" === e.op) t = s.JSONDelete(t, e.target);
                    else if ("push" === e.op) {
                        var n = (o = s.JSONGetById(t, e.target))[e.key]; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).push(e.value),
                        o = l.__assign(l.__assign({},
                        o), ((a = {})[e.key] = n, a)),
                        t = s.JSONUpdate(t, e.target, o)
                    } else if ("splice" === e.op) {
                        var o;
                        n = (o = s.JSONGetById(t, e.target))[e.key]; (n = Array.isArray(n) ? n.concat() : n ? [n] : []).splice.apply(n, e.args),
                        o = l.__assign(l.__assign({},
                        o), ((i = {})[e.key] = n, i)),
                        t = s.JSONUpdate(t, e.target, o)
                    }
                })),
                this.handleChange(t)
            },
            t.prototype.handleKeyDown = function(e) {},
            t.prototype.render = function() {
                var e = this.props,
                t = e.preview,
                a = e.pathPrefix,
                r = e.previewClassName,
                s = (e.onChange, e.value, e.className),
                p = e.previewProps,
                c = e.theme,
                d = e.isEditorEnabled,
                m = (e.onAccept, l.__rest(e, ["preview", "pathPrefix", "previewClassName", "onChange", "value", "className", "previewProps", "theme", "isEditorEnabled", "onAccept"])),
                u = this.state.value;
                return i.
            default.createElement("div", {
                    className: o.
                default("ae-Editor", {
                        preview: t
                    },
                    s),
                    onContextMenu: this.handleContextMenu
                },
                i.
            default.createElement("div", {
                    className: "ae-Editor-inner"
                },
                i.
            default.createElement(n.
            default, l.__assign({
                    ref: this.previewRef,
                    onResize: this.handlePreviewResize,
                    onMouseLeave: this.handleMouseLeave,
                    onMouseMove: this.handleMouseMove,
                    onDragEnter: this.handleDragEnter,
                    onDragOver: this.handleDragOver,
                    onDragLeave: this.handleDragLeave,
                    onDrop: this.handleDrop,
                    onClick: this.handleClick,
                    editable: !t,
                    getSchema: this.getSchema,
                    schema: u,
                    widgetsLayerRef: this.widgetsLayerRef,
                    pathPrefix: a,
                    className: r,
                    theme: c,
                    isEditorEnabled: d
                },
                m, p, {
                    key: u.$$id
                }))))
            },
            t
        } (r.
    default);
        t.
    default = p
    }]));

});